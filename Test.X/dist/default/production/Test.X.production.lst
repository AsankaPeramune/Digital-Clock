

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Oct 24 09:20:57 2023

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	intentry,global,class=CODE,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 2.05
    29                           ; Generated 20/12/2018 GMT
    30                           ; 
    31                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F877A Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  0088                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  018C                     	;# 
   121  018D                     	;# 
   122  0000                     	;# 
   123  0001                     	;# 
   124  0002                     	;# 
   125  0003                     	;# 
   126  0004                     	;# 
   127  0005                     	;# 
   128  0006                     	;# 
   129  0007                     	;# 
   130  0008                     	;# 
   131  0009                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000D                     	;# 
   136  000E                     	;# 
   137  000E                     	;# 
   138  000F                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0015                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001B                     	;# 
   153  001C                     	;# 
   154  001D                     	;# 
   155  001E                     	;# 
   156  001F                     	;# 
   157  0081                     	;# 
   158  0085                     	;# 
   159  0086                     	;# 
   160  0087                     	;# 
   161  0088                     	;# 
   162  0089                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  0091                     	;# 
   167  0092                     	;# 
   168  0093                     	;# 
   169  0094                     	;# 
   170  0098                     	;# 
   171  0099                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  009F                     	;# 
   176  010C                     	;# 
   177  010D                     	;# 
   178  010E                     	;# 
   179  010F                     	;# 
   180  018C                     	;# 
   181  018D                     	;# 
   182  0006                     _PORTBbits	set	6
   183  0008                     _PORTD	set	8
   184  000B                     _INTCONbits	set	11
   185  0086                     _TRISBbits	set	134
   186  0088                     _TRISD	set	136
   187  0087                     _TRISC	set	135
   188  0081                     _OPTION_REGbits	set	129
   189                           
   190                           	psect	strings
   191  0718                     __pstrings:	
   192  0718                     stringtab:	
   193  0718                     __stringtab:	
   194  0718                     stringcode:	
   195                           ;	String table - string pointers are 1 byte each
   196                           
   197  0718                     stringdir:	
   198  0718  3007               	movlw	high stringdir
   199  0719  008A               	movwf	10
   200  071A  0804               	movf	4,w
   201  071B  0A84               	incf	4,f
   202  071C  0782               	addwf	2,f
   203  071D                     __stringbase:	
   204  071D  3400               	retlw	0
   205  071E                     __end_of__stringtab:	
   206  071E                     STR_1:	
   207  071E  3443               	retlw	67	;'C'
   208  071F  344C               	retlw	76	;'L'
   209  0720  344F               	retlw	79	;'O'
   210  0721  3443               	retlw	67	;'C'
   211  0722  344B               	retlw	75	;'K'
   212  0723  343A               	retlw	58	;':'
   213  0724  3400               	retlw	0
   214  0725                     STR_3:	
   215  0725  3453               	retlw	83	;'S'
   216  0726  3445               	retlw	69	;'E'
   217  0727  3443               	retlw	67	;'C'
   218  0728  342E               	retlw	46	;'.'
   219  0729  343A               	retlw	58	;':'
   220  072A  3400               	retlw	0
   221  072B                     STR_6:	
   222  072B  344D               	retlw	77	;'M'
   223  072C  3449               	retlw	73	;'I'
   224  072D  344E               	retlw	78	;'N'
   225  072E  342E               	retlw	46	;'.'
   226  072F  343A               	retlw	58	;':'
   227  0730  3400               	retlw	0
   228  0731                     STR_15:	
   229  0731  344D               	retlw	77	;'M'
   230  0732  344F               	retlw	79	;'O'
   231  0733  344E               	retlw	78	;'N'
   232  0734  342E               	retlw	46	;'.'
   233  0735  343A               	retlw	58	;':'
   234  0736  3400               	retlw	0
   235  0737                     STR_18:	
   236  0737  3479               	retlw	121	;'y'
   237  0738  3465               	retlw	101	;'e'
   238  0739  3472               	retlw	114	;'r'
   239  073A  342E               	retlw	46	;'.'
   240  073B  343A               	retlw	58	;':'
   241  073C  3400               	retlw	0
   242  073D                     STR_2:	
   243  073D  3444               	retlw	68	;'D'
   244  073E  3441               	retlw	65	;'A'
   245  073F  3454               	retlw	84	;'T'
   246  0740  3445               	retlw	69	;'E'
   247  0741  343A               	retlw	58	;':'
   248  0742  3400               	retlw	0
   249  0743                     STR_9:	
   250  0743  3468               	retlw	104	;'h'
   251  0744  346F               	retlw	111	;'o'
   252  0745  3475               	retlw	117	;'u'
   253  0746  3472               	retlw	114	;'r'
   254  0747  343A               	retlw	58	;':'
   255  0748  3400               	retlw	0
   256  0725                     
   257                           ; #config settings
   258  0000                     
   259                           	psect	cinit
   260  000F                     start_initialization:	
   261  000F                     __initialization:	
   262                           
   263                           ; Clear objects allocated to COMMON
   264  000F  01F6               	clrf	__pbssCOMMON& (0+127)
   265  0010  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   266                           
   267                           ; Clear objects allocated to BANK0
   268  0011  1283               	bcf	3,5	;RP0=0, select bank0
   269  0012  1303               	bcf	3,6	;RP1=0, select bank0
   270  0013  01C2               	clrf	__pbssBANK0& (0+127)
   271  0014  01C3               	clrf	(__pbssBANK0+1)& (0+127)
   272  0015  01C4               	clrf	(__pbssBANK0+2)& (0+127)
   273  0016  01C5               	clrf	(__pbssBANK0+3)& (0+127)
   274  0017  01C6               	clrf	(__pbssBANK0+4)& (0+127)
   275  0018  01C7               	clrf	(__pbssBANK0+5)& (0+127)
   276  0019  01C8               	clrf	(__pbssBANK0+6)& (0+127)
   277  001A                     end_of_initialization:	
   278                           ;End of C runtime variable initialization code
   279                           
   280  001A                     __end_of__initialization:	
   281  001A  0183               	clrf	3
   282  001B  120A  118A  2D6E   	ljmp	_main	;jump to C main() function
   283                           
   284                           	psect	bssCOMMON
   285  0076                     __pbssCOMMON:	
   286  0076                     ___con:	
   287  0076                     	ds	1
   288  0077                     ___day:	
   289  0077                     	ds	1
   290                           
   291                           	psect	bssBANK0
   292  0042                     __pbssBANK0:	
   293  0042                     _timing_flag:	
   294  0042                     	ds	1
   295  0043                     ___year:	
   296  0043                     	ds	1
   297  0044                     ___month:	
   298  0044                     	ds	1
   299  0045                     ___date:	
   300  0045                     	ds	1
   301  0046                     ___hour:	
   302  0046                     	ds	1
   303  0047                     ___minute:	
   304  0047                     	ds	1
   305  0048                     ___second:	
   306  0048                     	ds	1
   307                           
   308                           	psect	cstackCOMMON
   309  0070                     __pcstackCOMMON:	
   310  0070                     ?_lcd_init:	
   311  0070                     ?_lcd_command:	
   312                           ; 1 bytes @ 0x0
   313                           
   314  0070                     ?_bcd_to_ascii:	
   315                           ; 1 bytes @ 0x0
   316                           
   317  0070                     ?_set_timing:	
   318                           ; 1 bytes @ 0x0
   319                           
   320  0070                     ?_main:	
   321                           ; 1 bytes @ 0x0
   322                           
   323  0070                     ?_lcd_data:	
   324                           ; 1 bytes @ 0x0
   325                           
   326  0070                     ?_bcd_to_decimal:	
   327                           ; 1 bytes @ 0x0
   328                           
   329  0070                     ?_decimal_to_bcd:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0070                     ?_external:	
   333                           ; 1 bytes @ 0x0
   334                           
   335  0070                     ?i1_lcd_init:	
   336                           ; 1 bytes @ 0x0
   337                           
   338  0070                     ?i1_lcd_command:	
   339                           ; 1 bytes @ 0x0
   340                           
   341  0070                     ??i1_lcd_command:	
   342                           ; 1 bytes @ 0x0
   343                           
   344                           
   345                           ; 1 bytes @ 0x0
   346  0070                     	ds	2
   347  0072                     i1lcd_command@cmd:	
   348                           
   349                           ; 1 bytes @ 0x2
   350  0072                     	ds	1
   351  0073                     ??_external:	
   352  0073                     ??i1_lcd_init:	
   353                           ; 1 bytes @ 0x3
   354                           
   355                           
   356                           ; 1 bytes @ 0x3
   357  0073                     	ds	3
   358  0076                     ??_lcd_init:	
   359                           
   360                           	psect	cstackBANK0
   361  0020                     __pcstackBANK0:	
   362                           ; 1 bytes @ 0x6
   363                           
   364  0020                     ??_lcd_command:	
   365  0020                     ??_lcd_data:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0020                     ?___bmul:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0020                     ?___awdiv:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0020                     ?___awmod:	
   375                           ; 2 bytes @ 0x0
   376                           
   377  0020                     ___bmul@multiplicand:	
   378                           ; 2 bytes @ 0x0
   379                           
   380  0020                     ___awdiv@divisor:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0020                     ___awmod@divisor:	
   384                           ; 2 bytes @ 0x0
   385                           
   386                           
   387                           ; 2 bytes @ 0x0
   388  0020                     	ds	1
   389  0021                     ??___bmul:	
   390                           
   391                           ; 1 bytes @ 0x1
   392  0021                     	ds	1
   393  0022                     lcd_data@data:	
   394  0022                     lcd_command@cmd:	
   395                           ; 1 bytes @ 0x2
   396                           
   397  0022                     ___bmul@product:	
   398                           ; 1 bytes @ 0x2
   399                           
   400  0022                     ___awdiv@dividend:	
   401                           ; 1 bytes @ 0x2
   402                           
   403  0022                     ___awmod@dividend:	
   404                           ; 2 bytes @ 0x2
   405                           
   406                           
   407                           ; 2 bytes @ 0x2
   408  0022                     	ds	1
   409  0023                     ?_lcd_string:	
   410  0023                     ??_bcd_to_ascii:	
   411                           ; 1 bytes @ 0x3
   412                           
   413  0023                     lcd_string@num:	
   414                           ; 1 bytes @ 0x3
   415                           
   416  0023                     ___bmul@multiplier:	
   417                           ; 1 bytes @ 0x3
   418                           
   419                           
   420                           ; 1 bytes @ 0x3
   421  0023                     	ds	1
   422  0024                     ??_lcd_string:	
   423  0024                     ??_bcd_to_decimal:	
   424                           ; 1 bytes @ 0x4
   425                           
   426  0024                     ??___awdiv:	
   427                           ; 1 bytes @ 0x4
   428                           
   429  0024                     ??___awmod:	
   430                           ; 1 bytes @ 0x4
   431                           
   432                           
   433                           ; 1 bytes @ 0x4
   434  0024                     	ds	1
   435  0025                     lcd_string@i:	
   436  0025                     bcd_to_ascii@value:	
   437                           ; 1 bytes @ 0x5
   438                           
   439  0025                     ___awdiv@counter:	
   440                           ; 1 bytes @ 0x5
   441                           
   442  0025                     ___awmod@counter:	
   443                           ; 1 bytes @ 0x5
   444                           
   445                           
   446                           ; 1 bytes @ 0x5
   447  0025                     	ds	1
   448  0026                     lcd_string@str:	
   449  0026                     bcd_to_ascii@bcd:	
   450                           ; 1 bytes @ 0x6
   451                           
   452  0026                     bcd_to_decimal@value:	
   453                           ; 1 bytes @ 0x6
   454                           
   455  0026                     ___awdiv@sign:	
   456                           ; 1 bytes @ 0x6
   457                           
   458  0026                     ___awmod@sign:	
   459                           ; 1 bytes @ 0x6
   460                           
   461                           
   462                           ; 1 bytes @ 0x6
   463  0026                     	ds	1
   464  0027                     bcd_to_decimal@dec:	
   465  0027                     ___awdiv@quotient:	
   466                           ; 1 bytes @ 0x7
   467                           
   468                           
   469                           ; 2 bytes @ 0x7
   470  0027                     	ds	2
   471  0029                     ??_decimal_to_bcd:	
   472                           
   473                           ; 1 bytes @ 0x9
   474  0029                     	ds	3
   475  002C                     decimal_to_bcd@msb:	
   476                           
   477                           ; 1 bytes @ 0xC
   478  002C                     	ds	1
   479  002D                     decimal_to_bcd@lsb:	
   480                           
   481                           ; 1 bytes @ 0xD
   482  002D                     	ds	1
   483  002E                     decimal_to_bcd@hex:	
   484                           
   485                           ; 1 bytes @ 0xE
   486  002E                     	ds	1
   487  002F                     decimal_to_bcd@value:	
   488                           
   489                           ; 1 bytes @ 0xF
   490  002F                     	ds	1
   491  0030                     ??_set_timing:	
   492                           
   493                           ; 1 bytes @ 0x10
   494  0030                     	ds	3
   495  0033                     set_timing@bcd_val_second:	
   496                           
   497                           ; 1 bytes @ 0x13
   498  0033                     	ds	1
   499  0034                     set_timing@bcd_val_minute:	
   500                           
   501                           ; 1 bytes @ 0x14
   502  0034                     	ds	1
   503  0035                     set_timing@bcd_val_hour:	
   504                           
   505                           ; 1 bytes @ 0x15
   506  0035                     	ds	1
   507  0036                     set_timing@bcd_val_date:	
   508                           
   509                           ; 1 bytes @ 0x16
   510  0036                     	ds	1
   511  0037                     set_timing@bcd_val_month:	
   512                           
   513                           ; 1 bytes @ 0x17
   514  0037                     	ds	1
   515  0038                     set_timing@bcd_val_year:	
   516                           
   517                           ; 1 bytes @ 0x18
   518  0038                     	ds	1
   519  0039                     set_timing@decimal_val_minute:	
   520                           
   521                           ; 1 bytes @ 0x19
   522  0039                     	ds	1
   523  003A                     set_timing@decimal_val_hour:	
   524                           
   525                           ; 1 bytes @ 0x1A
   526  003A                     	ds	1
   527  003B                     set_timing@decimal_val_date:	
   528                           
   529                           ; 1 bytes @ 0x1B
   530  003B                     	ds	1
   531  003C                     set_timing@decimal_val_month:	
   532                           
   533                           ; 1 bytes @ 0x1C
   534  003C                     	ds	1
   535  003D                     set_timing@decimal_val_year:	
   536                           
   537                           ; 1 bytes @ 0x1D
   538  003D                     	ds	1
   539  003E                     set_timing@decimal_val_second:	
   540                           
   541                           ; 1 bytes @ 0x1E
   542  003E                     	ds	1
   543  003F                     ??_main:	
   544                           
   545                           ; 1 bytes @ 0x1F
   546  003F                     	ds	3
   547                           
   548                           	psect	maintext
   549  056E                     __pmaintext:	
   550 ;;
   551 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   552 ;;
   553 ;; *************** function _main *****************
   554 ;; Defined at:
   555 ;;		line 34 in file "newmain.c"
   556 ;; Parameters:    Size  Location     Type
   557 ;;		None
   558 ;; Auto vars:     Size  Location     Type
   559 ;;		None
   560 ;; Return value:  Size  Location     Type
   561 ;;                  1    wreg      void 
   562 ;; Registers used:
   563 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   564 ;; Tracked objects:
   565 ;;		On entry : B00/0
   566 ;;		On exit  : 0/0
   567 ;;		Unchanged: 0/0
   568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   569 ;;      Params:         0       0       0       0       0
   570 ;;      Locals:         0       0       0       0       0
   571 ;;      Temps:          0       3       0       0       0
   572 ;;      Totals:         0       3       0       0       0
   573 ;;Total ram usage:        3 bytes
   574 ;; Hardware stack levels required when called:    6
   575 ;; This function calls:
   576 ;;		_bcd_to_ascii
   577 ;;		_lcd_command
   578 ;;		_lcd_init
   579 ;;		_lcd_string
   580 ;;		_set_timing
   581 ;; This function is called by:
   582 ;;		Startup code after reset
   583 ;; This function uses a non-reentrant model
   584 ;;
   585                           
   586                           
   587                           ;psect for function _main
   588  056E                     _main:	
   589                           
   590                           ;newmain.c: 35: INTCONbits.GIE = 1;
   591                           
   592                           ;incstack = 0
   593                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   594  056E  178B               	bsf	11,7	;volatile
   595                           
   596                           ;newmain.c: 36: INTCONbits.PEIE = 1;
   597  056F  170B               	bsf	11,6	;volatile
   598                           
   599                           ;newmain.c: 37: INTCONbits.INTE = 1;
   600  0570  160B               	bsf	11,4	;volatile
   601                           
   602                           ;newmain.c: 38: OPTION_REGbits.INTEDG =1;
   603  0571  1683               	bsf	3,5	;RP0=1, select bank1
   604  0572  1303               	bcf	3,6	;RP1=0, select bank1
   605  0573  1701               	bsf	1,6	;volatile
   606                           
   607                           ;newmain.c: 40: TRISC = 0xff;
   608  0574  30FF               	movlw	255
   609  0575  0087               	movwf	7	;volatile
   610                           
   611                           ;newmain.c: 41: TRISD =0x00;
   612  0576  0188               	clrf	8	;volatile
   613                           
   614                           ;newmain.c: 42: PORTD = 0x00;
   615  0577  1283               	bcf	3,5	;RP0=0, select bank0
   616  0578  1303               	bcf	3,6	;RP1=0, select bank0
   617  0579  0188               	clrf	8	;volatile
   618                           
   619                           ;newmain.c: 43: TRISBbits.TRISB0 =1;
   620  057A  1683               	bsf	3,5	;RP0=1, select bank1
   621  057B  1303               	bcf	3,6	;RP1=0, select bank1
   622  057C  1406               	bsf	6,0	;volatile
   623                           
   624                           ;newmain.c: 44: TRISBbits.TRISB1 =0;
   625  057D  1086               	bcf	6,1	;volatile
   626                           
   627                           ;newmain.c: 45: TRISBbits.TRISB2 =0;
   628  057E  1106               	bcf	6,2	;volatile
   629                           
   630                           ;newmain.c: 46: TRISBbits.TRISB3 =0;
   631  057F  1186               	bcf	6,3	;volatile
   632                           
   633                           ;newmain.c: 47: TRISBbits.TRISB4 =1;
   634  0580  1606               	bsf	6,4	;volatile
   635                           
   636                           ;newmain.c: 48: TRISBbits.TRISB5 =1;
   637  0581  1686               	bsf	6,5	;volatile
   638                           
   639                           ;newmain.c: 49: TRISBbits.TRISB6 =1;
   640  0582  1706               	bsf	6,6	;volatile
   641                           
   642                           ;newmain.c: 52: lcd_init();
   643  0583  120A  118A  27AE  120A  118A  	fcall	_lcd_init
   644                           
   645                           ;newmain.c: 53: lcd_command (0x80);
   646  0588  3080               	movlw	128
   647  0589  120A  158A  27EA  120A  118A  	fcall	_lcd_command
   648                           
   649                           ;newmain.c: 54: lcd_string ("CLOCK:",6);
   650  058E  3006               	movlw	6
   651  058F  1283               	bcf	3,5	;RP0=0, select bank0
   652  0590  1303               	bcf	3,6	;RP1=0, select bank0
   653  0591  00BF               	movwf	??_main
   654  0592  083F               	movf	??_main,w
   655  0593  00A3               	movwf	lcd_string@num
   656  0594  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   657  0595  120A  118A  2778  120A  118A  	fcall	_lcd_string
   658                           
   659                           ;newmain.c: 55: lcd_command (0xc0) ;
   660  059A  30C0               	movlw	192
   661  059B  120A  158A  27EA  120A  118A  	fcall	_lcd_command
   662                           
   663                           ;newmain.c: 56: lcd_string ("DATE:", 5) ;
   664  05A0  3005               	movlw	5
   665  05A1  1283               	bcf	3,5	;RP0=0, select bank0
   666  05A2  1303               	bcf	3,6	;RP1=0, select bank0
   667  05A3  00BF               	movwf	??_main
   668  05A4  083F               	movf	??_main,w
   669  05A5  00A3               	movwf	lcd_string@num
   670  05A6  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   671  05A7  120A  118A  2778  120A  118A  	fcall	_lcd_string
   672                           
   673                           ;newmain.c: 58: __second = 53 ;
   674  05AC  3035               	movlw	53
   675  05AD  1283               	bcf	3,5	;RP0=0, select bank0
   676  05AE  1303               	bcf	3,6	;RP1=0, select bank0
   677  05AF  00BF               	movwf	??_main
   678  05B0  083F               	movf	??_main,w
   679  05B1  00C8               	movwf	___second
   680                           
   681                           ;newmain.c: 59: __date = 33 ;
   682  05B2  3021               	movlw	33
   683  05B3  00BF               	movwf	??_main
   684  05B4  083F               	movf	??_main,w
   685  05B5  00C5               	movwf	___date
   686                           
   687                           ;newmain.c: 60: timing_flag = 0;
   688  05B6  01C2               	clrf	_timing_flag
   689  05B7                     l2508:	
   690                           
   691                           ;newmain.c: 63: {;newmain.c: 64: lcd_command (0x88) ;
   692  05B7  3088               	movlw	136
   693  05B8  120A  158A  27EA  120A  118A  	fcall	_lcd_command
   694                           
   695                           ;newmain.c: 65: bcd_to_ascii (__second) ;
   696  05BD  1283               	bcf	3,5	;RP0=0, select bank0
   697  05BE  1303               	bcf	3,6	;RP1=0, select bank0
   698  05BF  0848               	movf	___second,w
   699  05C0  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
   700                           
   701                           ;newmain.c: 66: _delay((unsigned long)((300)*(20000000/4000.0)));
   702  05C5  3008               	movlw	8
   703  05C6  1283               	bcf	3,5	;RP0=0, select bank0
   704  05C7  1303               	bcf	3,6	;RP1=0, select bank0
   705  05C8  00C1               	movwf	??_main+2
   706  05C9  309D               	movlw	157
   707  05CA  00C0               	movwf	??_main+1
   708  05CB  3005               	movlw	5
   709  05CC  00BF               	movwf	??_main
   710  05CD                     u2127:	
   711  05CD  0BBF               	decfsz	??_main,f
   712  05CE  2DCD               	goto	u2127
   713  05CF  0BC0               	decfsz	??_main+1,f
   714  05D0  2DCD               	goto	u2127
   715  05D1  0BC1               	decfsz	??_main+2,f
   716  05D2  2DCD               	goto	u2127
   717                           
   718                           ;newmain.c: 67: lcd_command (0xc7) ;
   719  05D3  30C7               	movlw	199
   720  05D4  120A  158A  27EA  120A  118A  	fcall	_lcd_command
   721                           
   722                           ;newmain.c: 68: bcd_to_ascii (__date) ;
   723  05D9  1283               	bcf	3,5	;RP0=0, select bank0
   724  05DA  1303               	bcf	3,6	;RP1=0, select bank0
   725  05DB  0845               	movf	___date,w
   726  05DC  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
   727                           
   728                           ;newmain.c: 69: _delay((unsigned long)((300)*(20000000/4000.0)));
   729  05E1  3008               	movlw	8
   730  05E2  1283               	bcf	3,5	;RP0=0, select bank0
   731  05E3  1303               	bcf	3,6	;RP1=0, select bank0
   732  05E4  00C1               	movwf	??_main+2
   733  05E5  309D               	movlw	157
   734  05E6  00C0               	movwf	??_main+1
   735  05E7  3005               	movlw	5
   736  05E8  00BF               	movwf	??_main
   737  05E9                     u2137:	
   738  05E9  0BBF               	decfsz	??_main,f
   739  05EA  2DE9               	goto	u2137
   740  05EB  0BC0               	decfsz	??_main+1,f
   741  05EC  2DE9               	goto	u2137
   742  05ED  0BC1               	decfsz	??_main+2,f
   743  05EE  2DE9               	goto	u2137
   744                           
   745                           ;newmain.c: 70: if(timing_flag > 0 ) {
   746  05EF  1283               	bcf	3,5	;RP0=0, select bank0
   747  05F0  1303               	bcf	3,6	;RP1=0, select bank0
   748  05F1  0842               	movf	_timing_flag,w
   749  05F2  1903               	btfsc	3,2
   750  05F3  2DB7               	goto	l2508
   751                           
   752                           ;newmain.c: 71: set_timing ();
   753  05F4  120A  118A  201E  120A  118A  	fcall	_set_timing
   754  05F9  2DB7               	goto	l2508
   755  05FA                     __end_of_main:	
   756                           
   757                           	psect	text1
   758  001E                     __ptext1:	
   759 ;; *************** function _set_timing *****************
   760 ;; Defined at:
   761 ;;		line 147 in file "newmain.c"
   762 ;; Parameters:    Size  Location     Type
   763 ;;		None
   764 ;; Auto vars:     Size  Location     Type
   765 ;;  decimal_val_    1   30[BANK0 ] unsigned char 
   766 ;;  decimal_val_    1   29[BANK0 ] unsigned char 
   767 ;;  decimal_val_    1   28[BANK0 ] unsigned char 
   768 ;;  decimal_val_    1   27[BANK0 ] unsigned char 
   769 ;;  decimal_val_    1   26[BANK0 ] unsigned char 
   770 ;;  decimal_val_    1   25[BANK0 ] unsigned char 
   771 ;;  bcd_val_year    1   24[BANK0 ] unsigned char 
   772 ;;  bcd_val_mont    1   23[BANK0 ] unsigned char 
   773 ;;  bcd_val_date    1   22[BANK0 ] unsigned char 
   774 ;;  bcd_val_hour    1   21[BANK0 ] unsigned char 
   775 ;;  bcd_val_minu    1   20[BANK0 ] unsigned char 
   776 ;;  bcd_val_seco    1   19[BANK0 ] unsigned char 
   777 ;; Return value:  Size  Location     Type
   778 ;;                  1    wreg      void 
   779 ;; Registers used:
   780 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   781 ;; Tracked objects:
   782 ;;		On entry : 0/0
   783 ;;		On exit  : 0/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   786 ;;      Params:         0       0       0       0       0
   787 ;;      Locals:         0      12       0       0       0
   788 ;;      Temps:          0       3       0       0       0
   789 ;;      Totals:         0      15       0       0       0
   790 ;;Total ram usage:       15 bytes
   791 ;; Hardware stack levels used:    1
   792 ;; Hardware stack levels required when called:    5
   793 ;; This function calls:
   794 ;;		_bcd_to_ascii
   795 ;;		_bcd_to_decimal
   796 ;;		_decimal_to_bcd
   797 ;;		_lcd_command
   798 ;;		_lcd_init
   799 ;;		_lcd_string
   800 ;; This function is called by:
   801 ;;		_main
   802 ;; This function uses a non-reentrant model
   803 ;;
   804                           
   805                           
   806                           ;psect for function _set_timing
   807  001E                     _set_timing:	
   808                           
   809                           ;incstack = 0
   810                           ; Regs used in _set_timing: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   811  001E  1283               	bcf	3,5	;RP0=0, select bank0
   812  001F  1303               	bcf	3,6	;RP1=0, select bank0
   813  0020  0848               	movf	___second,w
   814  0021  120A  118A  2749  120A  118A  	fcall	_bcd_to_decimal
   815                           
   816                           ;newmain.c: 163: bcd_val_second =__second ;
   817  0026  1283               	bcf	3,5	;RP0=0, select bank0
   818  0027  1303               	bcf	3,6	;RP1=0, select bank0
   819  0028  0848               	movf	___second,w
   820  0029  00B0               	movwf	??_set_timing
   821  002A  0830               	movf	??_set_timing,w
   822  002B  00B3               	movwf	set_timing@bcd_val_second
   823  002C  0847               	movf	___minute,w
   824  002D  120A  118A  2749  120A  118A  	fcall	_bcd_to_decimal
   825                           
   826                           ;newmain.c: 165: bcd_val_minute =__minute ;
   827  0032  1283               	bcf	3,5	;RP0=0, select bank0
   828  0033  1303               	bcf	3,6	;RP1=0, select bank0
   829  0034  0847               	movf	___minute,w
   830  0035  00B0               	movwf	??_set_timing
   831  0036  0830               	movf	??_set_timing,w
   832  0037  00B4               	movwf	set_timing@bcd_val_minute
   833                           
   834                           ;newmain.c: 166: decimal_val_second = bcd_to_decimal (__hour) ;
   835  0038  0846               	movf	___hour,w
   836  0039  120A  118A  2749  120A  118A  	fcall	_bcd_to_decimal
   837  003E  1283               	bcf	3,5	;RP0=0, select bank0
   838  003F  1303               	bcf	3,6	;RP1=0, select bank0
   839  0040  00B0               	movwf	??_set_timing
   840  0041  0830               	movf	??_set_timing,w
   841  0042  00BE               	movwf	set_timing@decimal_val_second
   842                           
   843                           ;newmain.c: 167: bcd_val_hour =__hour ;
   844  0043  0846               	movf	___hour,w
   845  0044  00B0               	movwf	??_set_timing
   846  0045  0830               	movf	??_set_timing,w
   847  0046  00B5               	movwf	set_timing@bcd_val_hour
   848                           
   849                           ;newmain.c: 168: decimal_val_date = bcd_to_decimal (__date) ;
   850  0047  0845               	movf	___date,w
   851  0048  120A  118A  2749  120A  118A  	fcall	_bcd_to_decimal
   852  004D  1283               	bcf	3,5	;RP0=0, select bank0
   853  004E  1303               	bcf	3,6	;RP1=0, select bank0
   854  004F  00B0               	movwf	??_set_timing
   855  0050  0830               	movf	??_set_timing,w
   856  0051  00BB               	movwf	set_timing@decimal_val_date
   857                           
   858                           ;newmain.c: 169: bcd_val_date =__date ;
   859  0052  0845               	movf	___date,w
   860  0053  00B0               	movwf	??_set_timing
   861  0054  0830               	movf	??_set_timing,w
   862  0055  00B6               	movwf	set_timing@bcd_val_date
   863                           
   864                           ;newmain.c: 170: decimal_val_month = bcd_to_decimal (__month) ;
   865  0056  0844               	movf	___month,w
   866  0057  120A  118A  2749  120A  118A  	fcall	_bcd_to_decimal
   867  005C  1283               	bcf	3,5	;RP0=0, select bank0
   868  005D  1303               	bcf	3,6	;RP1=0, select bank0
   869  005E  00B0               	movwf	??_set_timing
   870  005F  0830               	movf	??_set_timing,w
   871  0060  00BC               	movwf	set_timing@decimal_val_month
   872                           
   873                           ;newmain.c: 171: bcd_val_month =__month ;
   874  0061  0844               	movf	___month,w
   875  0062  00B0               	movwf	??_set_timing
   876  0063  0830               	movf	??_set_timing,w
   877  0064  00B7               	movwf	set_timing@bcd_val_month
   878                           
   879                           ;newmain.c: 172: decimal_val_year = bcd_to_decimal (__year) ;
   880  0065  0843               	movf	___year,w
   881  0066  120A  118A  2749  120A  118A  	fcall	_bcd_to_decimal
   882  006B  1283               	bcf	3,5	;RP0=0, select bank0
   883  006C  1303               	bcf	3,6	;RP1=0, select bank0
   884  006D  00B0               	movwf	??_set_timing
   885  006E  0830               	movf	??_set_timing,w
   886  006F  00BD               	movwf	set_timing@decimal_val_year
   887                           
   888                           ;newmain.c: 173: bcd_val_year =__year ;
   889  0070  0843               	movf	___year,w
   890  0071  00B0               	movwf	??_set_timing
   891  0072  0830               	movf	??_set_timing,w
   892  0073  00B8               	movwf	set_timing@bcd_val_year
   893  0074                     l2442:	
   894                           
   895                           ;newmain.c: 429: lcd_init ();
   896  0074  120A  118A  27AE  120A  118A  	fcall	_lcd_init
   897  0079                     l2444:	
   898  0079  1283               	bcf	3,5	;RP0=0, select bank0
   899  007A  1303               	bcf	3,6	;RP1=0, select bank0
   900  007B  0842               	movf	_timing_flag,w
   901  007C  1903               	btfsc	3,2
   902  007D  2D15               	goto	l2446
   903                           
   904                           ;newmain.c: 178: {;newmain.c: 180: if (timing_flag == 1)
   905                           
   906                           ;newmain.c: 177: while (timing_flag > 0)
   907                           
   908                           ;newmain.c: 175: lcd_init ();
   909  007E  0342               	decf	_timing_flag,w
   910  007F  1D03               	btfss	3,2
   911  0080  2940               	goto	l2184
   912                           
   913                           ;newmain.c: 181: {;newmain.c: 182: lcd_command(0x01);
   914  0081  3001               	movlw	1
   915  0082  120A  158A  27EA  120A  118A  	fcall	_lcd_command
   916                           
   917                           ;newmain.c: 183: lcd_command (0x83);
   918  0087  3083               	movlw	131
   919  0088  120A  158A  27EA  120A  118A  	fcall	_lcd_command
   920                           
   921                           ;newmain.c: 184: lcd_string ("SEC.:",5);
   922  008D  3005               	movlw	5
   923  008E  1283               	bcf	3,5	;RP0=0, select bank0
   924  008F  1303               	bcf	3,6	;RP1=0, select bank0
   925  0090  00B0               	movwf	??_set_timing
   926  0091  0830               	movf	??_set_timing,w
   927  0092  00A3               	movwf	lcd_string@num
   928  0093  3008               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   929  0094  120A  118A  2778  120A  118A  	fcall	_lcd_string
   930                           
   931                           ;newmain.c: 185: lcd_command (0x89) ;
   932  0099  3089               	movlw	137
   933  009A  120A  158A  27EA  120A  118A  	fcall	_lcd_command
   934                           
   935                           ;newmain.c: 186: bcd_to_ascii (bcd_val_second) ;
   936  009F  1283               	bcf	3,5	;RP0=0, select bank0
   937  00A0  1303               	bcf	3,6	;RP1=0, select bank0
   938  00A1  0833               	movf	set_timing@bcd_val_second,w
   939  00A2  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
   940                           
   941                           ;newmain.c: 188: if(PORTBbits.RB4 == 1)
   942  00A7  1283               	bcf	3,5	;RP0=0, select bank0
   943  00A8  1303               	bcf	3,6	;RP1=0, select bank0
   944  00A9  1E06               	btfss	6,4	;volatile
   945  00AA  28F3               	goto	l2164
   946  00AB                     l84:	
   947  00AB  1A06               	btfsc	6,4	;volatile
   948  00AC  28AB               	goto	l84
   949                           
   950                           ;newmain.c: 191: decimal_val_second ++ ;
   951  00AD  3001               	movlw	1
   952  00AE  00B0               	movwf	??_set_timing
   953  00AF  0830               	movf	??_set_timing,w
   954  00B0  07BE               	addwf	set_timing@decimal_val_second,f
   955                           
   956                           ;newmain.c: 192: if(decimal_val_second == 60)
   957  00B1  303C               	movlw	60
   958  00B2  063E               	xorwf	set_timing@decimal_val_second,w
   959  00B3  1903               	btfsc	3,2
   960                           
   961                           ;newmain.c: 193: {;newmain.c: 194: decimal_val_second =0 ;
   962  00B4  01BE               	clrf	set_timing@decimal_val_second
   963                           
   964                           ;newmain.c: 195: };newmain.c: 196: _delay((unsigned long)((100)*(20000000/4000.0)));
   965  00B5  3003               	movlw	3
   966  00B6  1283               	bcf	3,5	;RP0=0, select bank0
   967  00B7  1303               	bcf	3,6	;RP1=0, select bank0
   968  00B8  00B2               	movwf	??_set_timing+2
   969  00B9  308A               	movlw	138
   970  00BA  00B1               	movwf	??_set_timing+1
   971  00BB  3055               	movlw	85
   972  00BC  00B0               	movwf	??_set_timing
   973  00BD                     u2147:	
   974  00BD  0BB0               	decfsz	??_set_timing,f
   975  00BE  28BD               	goto	u2147
   976  00BF  0BB1               	decfsz	??_set_timing+1,f
   977  00C0  28BD               	goto	u2147
   978  00C1  0BB2               	decfsz	??_set_timing+2,f
   979  00C2  28BD               	goto	u2147
   980                           
   981                           ;newmain.c: 197: lcd_command (0x83);
   982  00C3  3083               	movlw	131
   983  00C4  120A  158A  27EA  120A  118A  	fcall	_lcd_command
   984                           
   985                           ;newmain.c: 198: lcd_string ("SEC.:",5);
   986  00C9  3005               	movlw	5
   987  00CA  1283               	bcf	3,5	;RP0=0, select bank0
   988  00CB  1303               	bcf	3,6	;RP1=0, select bank0
   989  00CC  00B0               	movwf	??_set_timing
   990  00CD  0830               	movf	??_set_timing,w
   991  00CE  00A3               	movwf	lcd_string@num
   992  00CF  3008               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   993  00D0  120A  118A  2778  120A  118A  	fcall	_lcd_string
   994                           
   995                           ;newmain.c: 199: lcd_command (0x89) ;
   996  00D5  3089               	movlw	137
   997  00D6  120A  158A  27EA  120A  118A  	fcall	_lcd_command
   998                           
   999                           ;newmain.c: 200: bcd_val_second = decimal_to_bcd (decimal_val_second);
  1000  00DB  1283               	bcf	3,5	;RP0=0, select bank0
  1001  00DC  1303               	bcf	3,6	;RP1=0, select bank0
  1002  00DD  083E               	movf	set_timing@decimal_val_second,w
  1003  00DE  120A  118A  26A2  120A  118A  	fcall	_decimal_to_bcd
  1004  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  1005  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  1006  00E5  00B0               	movwf	??_set_timing
  1007  00E6  0830               	movf	??_set_timing,w
  1008  00E7  00B3               	movwf	set_timing@bcd_val_second
  1009                           
  1010                           ;newmain.c: 201: bcd_to_ascii (bcd_val_second) ;
  1011  00E8  0833               	movf	set_timing@bcd_val_second,w
  1012  00E9  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
  1013                           
  1014                           ;newmain.c: 202: lcd_init ();
  1015  00EE  120A  118A  27AE  120A  118A  	fcall	_lcd_init
  1016  00F3                     l2164:	
  1017                           
  1018                           ;newmain.c: 203: };newmain.c: 204: if(PORTBbits.RB5 == 1)
  1019  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1020  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1021  00F5  1E86               	btfss	6,5	;volatile
  1022  00F6  2940               	goto	l2184
  1023  00F7                     l89:	
  1024  00F7  1A86               	btfsc	6,5	;volatile
  1025  00F8  28F7               	goto	l89
  1026                           
  1027                           ;newmain.c: 207: decimal_val_second -- ;
  1028  00F9  3001               	movlw	1
  1029  00FA  02BE               	subwf	set_timing@decimal_val_second,f
  1030                           
  1031                           ;newmain.c: 208: if(decimal_val_second == 0)
  1032  00FB  083E               	movf	set_timing@decimal_val_second,w
  1033  00FC  1D03               	btfss	3,2
  1034  00FD  2902               	goto	l92
  1035                           
  1036                           ;newmain.c: 209: {;newmain.c: 210: decimal_val_second = 59 ;
  1037  00FE  303B               	movlw	59
  1038  00FF  00B0               	movwf	??_set_timing
  1039  0100  0830               	movf	??_set_timing,w
  1040  0101  00BE               	movwf	set_timing@decimal_val_second
  1041  0102                     l92:	
  1042                           
  1043                           ;newmain.c: 211: };newmain.c: 212: _delay((unsigned long)((100)*(20000000/4000.0)));
  1044  0102  3003               	movlw	3
  1045  0103  1283               	bcf	3,5	;RP0=0, select bank0
  1046  0104  1303               	bcf	3,6	;RP1=0, select bank0
  1047  0105  00B2               	movwf	??_set_timing+2
  1048  0106  308A               	movlw	138
  1049  0107  00B1               	movwf	??_set_timing+1
  1050  0108  3055               	movlw	85
  1051  0109  00B0               	movwf	??_set_timing
  1052  010A                     u2157:	
  1053  010A  0BB0               	decfsz	??_set_timing,f
  1054  010B  290A               	goto	u2157
  1055  010C  0BB1               	decfsz	??_set_timing+1,f
  1056  010D  290A               	goto	u2157
  1057  010E  0BB2               	decfsz	??_set_timing+2,f
  1058  010F  290A               	goto	u2157
  1059                           
  1060                           ;newmain.c: 213: lcd_command (0x83);
  1061  0110  3083               	movlw	131
  1062  0111  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1063                           
  1064                           ;newmain.c: 214: lcd_string ("SEC.:",5);
  1065  0116  3005               	movlw	5
  1066  0117  1283               	bcf	3,5	;RP0=0, select bank0
  1067  0118  1303               	bcf	3,6	;RP1=0, select bank0
  1068  0119  00B0               	movwf	??_set_timing
  1069  011A  0830               	movf	??_set_timing,w
  1070  011B  00A3               	movwf	lcd_string@num
  1071  011C  3008               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1072  011D  120A  118A  2778  120A  118A  	fcall	_lcd_string
  1073                           
  1074                           ;newmain.c: 215: lcd_command (0x89) ;
  1075  0122  3089               	movlw	137
  1076  0123  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1077                           
  1078                           ;newmain.c: 216: bcd_val_second = decimal_to_bcd (decimal_val_second);
  1079  0128  1283               	bcf	3,5	;RP0=0, select bank0
  1080  0129  1303               	bcf	3,6	;RP1=0, select bank0
  1081  012A  083E               	movf	set_timing@decimal_val_second,w
  1082  012B  120A  118A  26A2  120A  118A  	fcall	_decimal_to_bcd
  1083  0130  1283               	bcf	3,5	;RP0=0, select bank0
  1084  0131  1303               	bcf	3,6	;RP1=0, select bank0
  1085  0132  00B0               	movwf	??_set_timing
  1086  0133  0830               	movf	??_set_timing,w
  1087  0134  00B3               	movwf	set_timing@bcd_val_second
  1088                           
  1089                           ;newmain.c: 217: bcd_to_ascii (bcd_val_second) ;
  1090  0135  0833               	movf	set_timing@bcd_val_second,w
  1091  0136  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
  1092                           
  1093                           ;newmain.c: 218: lcd_init ();
  1094  013B  120A  118A  27AE  120A  118A  	fcall	_lcd_init
  1095  0140                     l2184:	
  1096                           
  1097                           ;newmain.c: 219: };newmain.c: 221: };newmain.c: 223: if (timing_flag == 2)
  1098  0140  3002               	movlw	2
  1099  0141  1283               	bcf	3,5	;RP0=0, select bank0
  1100  0142  1303               	bcf	3,6	;RP1=0, select bank0
  1101  0143  0642               	xorwf	_timing_flag,w
  1102  0144  1D03               	btfss	3,2
  1103  0145  2A05               	goto	l2236
  1104                           
  1105                           ;newmain.c: 224: {;newmain.c: 225: lcd_command(0x01);
  1106  0146  3001               	movlw	1
  1107  0147  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1108                           
  1109                           ;newmain.c: 226: lcd_command (0x83);
  1110  014C  3083               	movlw	131
  1111  014D  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1112                           
  1113                           ;newmain.c: 227: lcd_string ("MIN.:",5);
  1114  0152  3005               	movlw	5
  1115  0153  1283               	bcf	3,5	;RP0=0, select bank0
  1116  0154  1303               	bcf	3,6	;RP1=0, select bank0
  1117  0155  00B0               	movwf	??_set_timing
  1118  0156  0830               	movf	??_set_timing,w
  1119  0157  00A3               	movwf	lcd_string@num
  1120  0158  300E               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1121  0159  120A  118A  2778  120A  118A  	fcall	_lcd_string
  1122                           
  1123                           ;newmain.c: 228: lcd_command (0x89) ;
  1124  015E  3089               	movlw	137
  1125  015F  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1126                           
  1127                           ;newmain.c: 229: bcd_to_ascii (bcd_val_minute) ;
  1128  0164  1283               	bcf	3,5	;RP0=0, select bank0
  1129  0165  1303               	bcf	3,6	;RP1=0, select bank0
  1130  0166  0834               	movf	set_timing@bcd_val_minute,w
  1131  0167  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
  1132                           
  1133                           ;newmain.c: 231: if(PORTBbits.RB4 == 1)
  1134  016C  1283               	bcf	3,5	;RP0=0, select bank0
  1135  016D  1303               	bcf	3,6	;RP1=0, select bank0
  1136  016E  1E06               	btfss	6,4	;volatile
  1137  016F  29B8               	goto	l2216
  1138  0170                     l95:	
  1139  0170  1A06               	btfsc	6,4	;volatile
  1140  0171  2970               	goto	l95
  1141                           
  1142                           ;newmain.c: 234: decimal_val_minute ++ ;
  1143  0172  3001               	movlw	1
  1144  0173  00B0               	movwf	??_set_timing
  1145  0174  0830               	movf	??_set_timing,w
  1146  0175  07B9               	addwf	set_timing@decimal_val_minute,f
  1147                           
  1148                           ;newmain.c: 235: if(decimal_val_minute == 60)
  1149  0176  303C               	movlw	60
  1150  0177  0639               	xorwf	set_timing@decimal_val_minute,w
  1151  0178  1903               	btfsc	3,2
  1152                           
  1153                           ;newmain.c: 236: {;newmain.c: 237: decimal_val_minute =0 ;
  1154  0179  01B9               	clrf	set_timing@decimal_val_minute
  1155                           
  1156                           ;newmain.c: 238: };newmain.c: 239: _delay((unsigned long)((100)*(20000000/4000.0)));
  1157  017A  3003               	movlw	3
  1158  017B  1283               	bcf	3,5	;RP0=0, select bank0
  1159  017C  1303               	bcf	3,6	;RP1=0, select bank0
  1160  017D  00B2               	movwf	??_set_timing+2
  1161  017E  308A               	movlw	138
  1162  017F  00B1               	movwf	??_set_timing+1
  1163  0180  3055               	movlw	85
  1164  0181  00B0               	movwf	??_set_timing
  1165  0182                     u2167:	
  1166  0182  0BB0               	decfsz	??_set_timing,f
  1167  0183  2982               	goto	u2167
  1168  0184  0BB1               	decfsz	??_set_timing+1,f
  1169  0185  2982               	goto	u2167
  1170  0186  0BB2               	decfsz	??_set_timing+2,f
  1171  0187  2982               	goto	u2167
  1172                           
  1173                           ;newmain.c: 240: lcd_command (0x83);
  1174  0188  3083               	movlw	131
  1175  0189  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1176                           
  1177                           ;newmain.c: 241: lcd_string ("MIN.:",5);
  1178  018E  3005               	movlw	5
  1179  018F  1283               	bcf	3,5	;RP0=0, select bank0
  1180  0190  1303               	bcf	3,6	;RP1=0, select bank0
  1181  0191  00B0               	movwf	??_set_timing
  1182  0192  0830               	movf	??_set_timing,w
  1183  0193  00A3               	movwf	lcd_string@num
  1184  0194  300E               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1185  0195  120A  118A  2778  120A  118A  	fcall	_lcd_string
  1186                           
  1187                           ;newmain.c: 242: lcd_command (0x89) ;
  1188  019A  3089               	movlw	137
  1189  019B  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1190                           
  1191                           ;newmain.c: 243: bcd_val_minute = decimal_to_bcd (decimal_val_minute);
  1192  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  1193  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  1194  01A2  0839               	movf	set_timing@decimal_val_minute,w
  1195  01A3  120A  118A  26A2  120A  118A  	fcall	_decimal_to_bcd
  1196  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  1197  01A9  1303               	bcf	3,6	;RP1=0, select bank0
  1198  01AA  00B0               	movwf	??_set_timing
  1199  01AB  0830               	movf	??_set_timing,w
  1200  01AC  00B4               	movwf	set_timing@bcd_val_minute
  1201                           
  1202                           ;newmain.c: 244: bcd_to_ascii (bcd_val_minute) ;
  1203  01AD  0834               	movf	set_timing@bcd_val_minute,w
  1204  01AE  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
  1205                           
  1206                           ;newmain.c: 245: lcd_init ();
  1207  01B3  120A  118A  27AE  120A  118A  	fcall	_lcd_init
  1208  01B8                     l2216:	
  1209                           
  1210                           ;newmain.c: 246: };newmain.c: 247: if(PORTBbits.RB5 == 1)
  1211  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  1212  01B9  1303               	bcf	3,6	;RP1=0, select bank0
  1213  01BA  1E86               	btfss	6,5	;volatile
  1214  01BB  2A05               	goto	l2236
  1215  01BC                     l100:	
  1216  01BC  1A86               	btfsc	6,5	;volatile
  1217  01BD  29BC               	goto	l100
  1218                           
  1219                           ;newmain.c: 250: decimal_val_minute -- ;
  1220  01BE  3001               	movlw	1
  1221  01BF  02B9               	subwf	set_timing@decimal_val_minute,f
  1222                           
  1223                           ;newmain.c: 251: if(decimal_val_minute == 0)
  1224  01C0  0839               	movf	set_timing@decimal_val_minute,w
  1225  01C1  1D03               	btfss	3,2
  1226  01C2  29C7               	goto	l103
  1227                           
  1228                           ;newmain.c: 252: {;newmain.c: 253: decimal_val_minute = 59 ;
  1229  01C3  303B               	movlw	59
  1230  01C4  00B0               	movwf	??_set_timing
  1231  01C5  0830               	movf	??_set_timing,w
  1232  01C6  00B9               	movwf	set_timing@decimal_val_minute
  1233  01C7                     l103:	
  1234                           
  1235                           ;newmain.c: 254: };newmain.c: 255: _delay((unsigned long)((100)*(20000000/4000.0)));
  1236  01C7  3003               	movlw	3
  1237  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  1238  01C9  1303               	bcf	3,6	;RP1=0, select bank0
  1239  01CA  00B2               	movwf	??_set_timing+2
  1240  01CB  308A               	movlw	138
  1241  01CC  00B1               	movwf	??_set_timing+1
  1242  01CD  3055               	movlw	85
  1243  01CE  00B0               	movwf	??_set_timing
  1244  01CF                     u2177:	
  1245  01CF  0BB0               	decfsz	??_set_timing,f
  1246  01D0  29CF               	goto	u2177
  1247  01D1  0BB1               	decfsz	??_set_timing+1,f
  1248  01D2  29CF               	goto	u2177
  1249  01D3  0BB2               	decfsz	??_set_timing+2,f
  1250  01D4  29CF               	goto	u2177
  1251                           
  1252                           ;newmain.c: 256: lcd_command (0x83);
  1253  01D5  3083               	movlw	131
  1254  01D6  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1255                           
  1256                           ;newmain.c: 257: lcd_string ("MIN.:",5);
  1257  01DB  3005               	movlw	5
  1258  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  1259  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  1260  01DE  00B0               	movwf	??_set_timing
  1261  01DF  0830               	movf	??_set_timing,w
  1262  01E0  00A3               	movwf	lcd_string@num
  1263  01E1  300E               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1264  01E2  120A  118A  2778  120A  118A  	fcall	_lcd_string
  1265                           
  1266                           ;newmain.c: 258: lcd_command (0x89) ;
  1267  01E7  3089               	movlw	137
  1268  01E8  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1269                           
  1270                           ;newmain.c: 259: bcd_val_minute = decimal_to_bcd (decimal_val_minute);
  1271  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  1272  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  1273  01EF  0839               	movf	set_timing@decimal_val_minute,w
  1274  01F0  120A  118A  26A2  120A  118A  	fcall	_decimal_to_bcd
  1275  01F5  1283               	bcf	3,5	;RP0=0, select bank0
  1276  01F6  1303               	bcf	3,6	;RP1=0, select bank0
  1277  01F7  00B0               	movwf	??_set_timing
  1278  01F8  0830               	movf	??_set_timing,w
  1279  01F9  00B4               	movwf	set_timing@bcd_val_minute
  1280                           
  1281                           ;newmain.c: 260: bcd_to_ascii (bcd_val_minute) ;
  1282  01FA  0834               	movf	set_timing@bcd_val_minute,w
  1283  01FB  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
  1284                           
  1285                           ;newmain.c: 261: lcd_init ();
  1286  0200  120A  118A  27AE  120A  118A  	fcall	_lcd_init
  1287  0205                     l2236:	
  1288                           
  1289                           ;newmain.c: 262: };newmain.c: 263: };newmain.c: 265: if (timing_flag == 3)
  1290  0205  3003               	movlw	3
  1291  0206  1283               	bcf	3,5	;RP0=0, select bank0
  1292  0207  1303               	bcf	3,6	;RP1=0, select bank0
  1293  0208  0642               	xorwf	_timing_flag,w
  1294  0209  1D03               	btfss	3,2
  1295  020A  2ACA               	goto	l2288
  1296                           
  1297                           ;newmain.c: 266: {;newmain.c: 267: lcd_command(0x01);
  1298  020B  3001               	movlw	1
  1299  020C  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1300                           
  1301                           ;newmain.c: 268: lcd_command (0x83);
  1302  0211  3083               	movlw	131
  1303  0212  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1304                           
  1305                           ;newmain.c: 269: lcd_string ("hour:",5);
  1306  0217  3005               	movlw	5
  1307  0218  1283               	bcf	3,5	;RP0=0, select bank0
  1308  0219  1303               	bcf	3,6	;RP1=0, select bank0
  1309  021A  00B0               	movwf	??_set_timing
  1310  021B  0830               	movf	??_set_timing,w
  1311  021C  00A3               	movwf	lcd_string@num
  1312  021D  3026               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1313  021E  120A  118A  2778  120A  118A  	fcall	_lcd_string
  1314                           
  1315                           ;newmain.c: 270: lcd_command (0x89) ;
  1316  0223  3089               	movlw	137
  1317  0224  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1318                           
  1319                           ;newmain.c: 271: bcd_to_ascii (bcd_val_hour) ;
  1320  0229  1283               	bcf	3,5	;RP0=0, select bank0
  1321  022A  1303               	bcf	3,6	;RP1=0, select bank0
  1322  022B  0835               	movf	set_timing@bcd_val_hour,w
  1323  022C  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
  1324                           
  1325                           ;newmain.c: 273: if(PORTBbits.RB4 == 1)
  1326  0231  1283               	bcf	3,5	;RP0=0, select bank0
  1327  0232  1303               	bcf	3,6	;RP1=0, select bank0
  1328  0233  1E06               	btfss	6,4	;volatile
  1329  0234  2A7D               	goto	l2268
  1330  0235                     l106:	
  1331  0235  1A06               	btfsc	6,4	;volatile
  1332  0236  2A35               	goto	l106
  1333                           
  1334                           ;newmain.c: 276: decimal_val_hour ++ ;
  1335  0237  3001               	movlw	1
  1336  0238  00B0               	movwf	??_set_timing
  1337  0239  0830               	movf	??_set_timing,w
  1338  023A  07BA               	addwf	set_timing@decimal_val_hour,f
  1339                           
  1340                           ;newmain.c: 277: if(decimal_val_hour == 60)
  1341  023B  303C               	movlw	60
  1342  023C  063A               	xorwf	set_timing@decimal_val_hour,w
  1343  023D  1903               	btfsc	3,2
  1344                           
  1345                           ;newmain.c: 278: {;newmain.c: 279: decimal_val_hour =0 ;
  1346  023E  01BA               	clrf	set_timing@decimal_val_hour
  1347                           
  1348                           ;newmain.c: 280: };newmain.c: 281: _delay((unsigned long)((100)*(20000000/4000.0)));
  1349  023F  3003               	movlw	3
  1350  0240  1283               	bcf	3,5	;RP0=0, select bank0
  1351  0241  1303               	bcf	3,6	;RP1=0, select bank0
  1352  0242  00B2               	movwf	??_set_timing+2
  1353  0243  308A               	movlw	138
  1354  0244  00B1               	movwf	??_set_timing+1
  1355  0245  3055               	movlw	85
  1356  0246  00B0               	movwf	??_set_timing
  1357  0247                     u2187:	
  1358  0247  0BB0               	decfsz	??_set_timing,f
  1359  0248  2A47               	goto	u2187
  1360  0249  0BB1               	decfsz	??_set_timing+1,f
  1361  024A  2A47               	goto	u2187
  1362  024B  0BB2               	decfsz	??_set_timing+2,f
  1363  024C  2A47               	goto	u2187
  1364                           
  1365                           ;newmain.c: 282: lcd_command (0x83);
  1366  024D  3083               	movlw	131
  1367  024E  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1368                           
  1369                           ;newmain.c: 283: lcd_string ("SEC.:",5);
  1370  0253  3005               	movlw	5
  1371  0254  1283               	bcf	3,5	;RP0=0, select bank0
  1372  0255  1303               	bcf	3,6	;RP1=0, select bank0
  1373  0256  00B0               	movwf	??_set_timing
  1374  0257  0830               	movf	??_set_timing,w
  1375  0258  00A3               	movwf	lcd_string@num
  1376  0259  3008               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1377  025A  120A  118A  2778  120A  118A  	fcall	_lcd_string
  1378                           
  1379                           ;newmain.c: 284: lcd_command (0x89) ;
  1380  025F  3089               	movlw	137
  1381  0260  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1382                           
  1383                           ;newmain.c: 285: bcd_val_hour = decimal_to_bcd (decimal_val_hour);
  1384  0265  1283               	bcf	3,5	;RP0=0, select bank0
  1385  0266  1303               	bcf	3,6	;RP1=0, select bank0
  1386  0267  083A               	movf	set_timing@decimal_val_hour,w
  1387  0268  120A  118A  26A2  120A  118A  	fcall	_decimal_to_bcd
  1388  026D  1283               	bcf	3,5	;RP0=0, select bank0
  1389  026E  1303               	bcf	3,6	;RP1=0, select bank0
  1390  026F  00B0               	movwf	??_set_timing
  1391  0270  0830               	movf	??_set_timing,w
  1392  0271  00B5               	movwf	set_timing@bcd_val_hour
  1393                           
  1394                           ;newmain.c: 286: bcd_to_ascii (bcd_val_hour) ;
  1395  0272  0835               	movf	set_timing@bcd_val_hour,w
  1396  0273  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
  1397                           
  1398                           ;newmain.c: 287: lcd_init ();
  1399  0278  120A  118A  27AE  120A  118A  	fcall	_lcd_init
  1400  027D                     l2268:	
  1401                           
  1402                           ;newmain.c: 288: };newmain.c: 289: if(PORTBbits.RB5 == 1)
  1403  027D  1283               	bcf	3,5	;RP0=0, select bank0
  1404  027E  1303               	bcf	3,6	;RP1=0, select bank0
  1405  027F  1E86               	btfss	6,5	;volatile
  1406  0280  2ACA               	goto	l2288
  1407  0281                     l111:	
  1408  0281  1A86               	btfsc	6,5	;volatile
  1409  0282  2A81               	goto	l111
  1410                           
  1411                           ;newmain.c: 292: decimal_val_hour -- ;
  1412  0283  3001               	movlw	1
  1413  0284  02BA               	subwf	set_timing@decimal_val_hour,f
  1414                           
  1415                           ;newmain.c: 293: if(decimal_val_hour == 0)
  1416  0285  083A               	movf	set_timing@decimal_val_hour,w
  1417  0286  1D03               	btfss	3,2
  1418  0287  2A8C               	goto	l114
  1419                           
  1420                           ;newmain.c: 294: {;newmain.c: 295: decimal_val_hour = 59 ;
  1421  0288  303B               	movlw	59
  1422  0289  00B0               	movwf	??_set_timing
  1423  028A  0830               	movf	??_set_timing,w
  1424  028B  00BA               	movwf	set_timing@decimal_val_hour
  1425  028C                     l114:	
  1426                           
  1427                           ;newmain.c: 296: };newmain.c: 297: _delay((unsigned long)((100)*(20000000/4000.0)));
  1428  028C  3003               	movlw	3
  1429  028D  1283               	bcf	3,5	;RP0=0, select bank0
  1430  028E  1303               	bcf	3,6	;RP1=0, select bank0
  1431  028F  00B2               	movwf	??_set_timing+2
  1432  0290  308A               	movlw	138
  1433  0291  00B1               	movwf	??_set_timing+1
  1434  0292  3055               	movlw	85
  1435  0293  00B0               	movwf	??_set_timing
  1436  0294                     u2197:	
  1437  0294  0BB0               	decfsz	??_set_timing,f
  1438  0295  2A94               	goto	u2197
  1439  0296  0BB1               	decfsz	??_set_timing+1,f
  1440  0297  2A94               	goto	u2197
  1441  0298  0BB2               	decfsz	??_set_timing+2,f
  1442  0299  2A94               	goto	u2197
  1443                           
  1444                           ;newmain.c: 298: lcd_command (0x83);
  1445  029A  3083               	movlw	131
  1446  029B  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1447                           
  1448                           ;newmain.c: 299: lcd_string ("SEC.:",5);
  1449  02A0  3005               	movlw	5
  1450  02A1  1283               	bcf	3,5	;RP0=0, select bank0
  1451  02A2  1303               	bcf	3,6	;RP1=0, select bank0
  1452  02A3  00B0               	movwf	??_set_timing
  1453  02A4  0830               	movf	??_set_timing,w
  1454  02A5  00A3               	movwf	lcd_string@num
  1455  02A6  3008               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1456  02A7  120A  118A  2778  120A  118A  	fcall	_lcd_string
  1457                           
  1458                           ;newmain.c: 300: lcd_command (0x89) ;
  1459  02AC  3089               	movlw	137
  1460  02AD  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1461                           
  1462                           ;newmain.c: 301: bcd_val_hour = decimal_to_bcd (decimal_val_hour);
  1463  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  1464  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  1465  02B4  083A               	movf	set_timing@decimal_val_hour,w
  1466  02B5  120A  118A  26A2  120A  118A  	fcall	_decimal_to_bcd
  1467  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  1468  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  1469  02BC  00B0               	movwf	??_set_timing
  1470  02BD  0830               	movf	??_set_timing,w
  1471  02BE  00B5               	movwf	set_timing@bcd_val_hour
  1472                           
  1473                           ;newmain.c: 302: bcd_to_ascii (bcd_val_hour) ;
  1474  02BF  0835               	movf	set_timing@bcd_val_hour,w
  1475  02C0  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
  1476                           
  1477                           ;newmain.c: 303: lcd_init ();
  1478  02C5  120A  118A  27AE  120A  118A  	fcall	_lcd_init
  1479  02CA                     l2288:	
  1480                           
  1481                           ;newmain.c: 304: };newmain.c: 305: };newmain.c: 307: if (timing_flag == 4 )
  1482  02CA  3004               	movlw	4
  1483  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  1484  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  1485  02CD  0642               	xorwf	_timing_flag,w
  1486  02CE  1D03               	btfss	3,2
  1487  02CF  2B8F               	goto	l2340
  1488                           
  1489                           ;newmain.c: 308: {;newmain.c: 309: lcd_command(0x01);
  1490  02D0  3001               	movlw	1
  1491  02D1  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1492                           
  1493                           ;newmain.c: 310: lcd_command (0x83);
  1494  02D6  3083               	movlw	131
  1495  02D7  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1496                           
  1497                           ;newmain.c: 311: lcd_string ("DATE:",5);
  1498  02DC  3005               	movlw	5
  1499  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  1500  02DE  1303               	bcf	3,6	;RP1=0, select bank0
  1501  02DF  00B0               	movwf	??_set_timing
  1502  02E0  0830               	movf	??_set_timing,w
  1503  02E1  00A3               	movwf	lcd_string@num
  1504  02E2  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1505  02E3  120A  118A  2778  120A  118A  	fcall	_lcd_string
  1506                           
  1507                           ;newmain.c: 312: lcd_command (0x89) ;
  1508  02E8  3089               	movlw	137
  1509  02E9  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1510                           
  1511                           ;newmain.c: 313: bcd_to_ascii (bcd_val_date) ;
  1512  02EE  1283               	bcf	3,5	;RP0=0, select bank0
  1513  02EF  1303               	bcf	3,6	;RP1=0, select bank0
  1514  02F0  0836               	movf	set_timing@bcd_val_date,w
  1515  02F1  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
  1516                           
  1517                           ;newmain.c: 315: if(PORTBbits.RB4 == 1)
  1518  02F6  1283               	bcf	3,5	;RP0=0, select bank0
  1519  02F7  1303               	bcf	3,6	;RP1=0, select bank0
  1520  02F8  1E06               	btfss	6,4	;volatile
  1521  02F9  2B42               	goto	l2320
  1522  02FA                     l117:	
  1523  02FA  1A06               	btfsc	6,4	;volatile
  1524  02FB  2AFA               	goto	l117
  1525                           
  1526                           ;newmain.c: 318: decimal_val_date ++ ;
  1527  02FC  3001               	movlw	1
  1528  02FD  00B0               	movwf	??_set_timing
  1529  02FE  0830               	movf	??_set_timing,w
  1530  02FF  07BB               	addwf	set_timing@decimal_val_date,f
  1531                           
  1532                           ;newmain.c: 319: if(decimal_val_date == 32)
  1533  0300  3020               	movlw	32
  1534  0301  063B               	xorwf	set_timing@decimal_val_date,w
  1535  0302  1903               	btfsc	3,2
  1536                           
  1537                           ;newmain.c: 320: {;newmain.c: 321: decimal_val_date =0 ;
  1538  0303  01BB               	clrf	set_timing@decimal_val_date
  1539                           
  1540                           ;newmain.c: 322: };newmain.c: 323: _delay((unsigned long)((100)*(20000000/4000.0)));
  1541  0304  3003               	movlw	3
  1542  0305  1283               	bcf	3,5	;RP0=0, select bank0
  1543  0306  1303               	bcf	3,6	;RP1=0, select bank0
  1544  0307  00B2               	movwf	??_set_timing+2
  1545  0308  308A               	movlw	138
  1546  0309  00B1               	movwf	??_set_timing+1
  1547  030A  3055               	movlw	85
  1548  030B  00B0               	movwf	??_set_timing
  1549  030C                     u2207:	
  1550  030C  0BB0               	decfsz	??_set_timing,f
  1551  030D  2B0C               	goto	u2207
  1552  030E  0BB1               	decfsz	??_set_timing+1,f
  1553  030F  2B0C               	goto	u2207
  1554  0310  0BB2               	decfsz	??_set_timing+2,f
  1555  0311  2B0C               	goto	u2207
  1556                           
  1557                           ;newmain.c: 324: lcd_command (0x83);
  1558  0312  3083               	movlw	131
  1559  0313  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1560                           
  1561                           ;newmain.c: 325: lcd_string ("DATE:",5);
  1562  0318  3005               	movlw	5
  1563  0319  1283               	bcf	3,5	;RP0=0, select bank0
  1564  031A  1303               	bcf	3,6	;RP1=0, select bank0
  1565  031B  00B0               	movwf	??_set_timing
  1566  031C  0830               	movf	??_set_timing,w
  1567  031D  00A3               	movwf	lcd_string@num
  1568  031E  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1569  031F  120A  118A  2778  120A  118A  	fcall	_lcd_string
  1570                           
  1571                           ;newmain.c: 326: lcd_command (0x89) ;
  1572  0324  3089               	movlw	137
  1573  0325  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1574                           
  1575                           ;newmain.c: 327: bcd_val_date = decimal_to_bcd (decimal_val_date);
  1576  032A  1283               	bcf	3,5	;RP0=0, select bank0
  1577  032B  1303               	bcf	3,6	;RP1=0, select bank0
  1578  032C  083B               	movf	set_timing@decimal_val_date,w
  1579  032D  120A  118A  26A2  120A  118A  	fcall	_decimal_to_bcd
  1580  0332  1283               	bcf	3,5	;RP0=0, select bank0
  1581  0333  1303               	bcf	3,6	;RP1=0, select bank0
  1582  0334  00B0               	movwf	??_set_timing
  1583  0335  0830               	movf	??_set_timing,w
  1584  0336  00B6               	movwf	set_timing@bcd_val_date
  1585                           
  1586                           ;newmain.c: 328: bcd_to_ascii (bcd_val_date) ;
  1587  0337  0836               	movf	set_timing@bcd_val_date,w
  1588  0338  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
  1589                           
  1590                           ;newmain.c: 329: lcd_init ();
  1591  033D  120A  118A  27AE  120A  118A  	fcall	_lcd_init
  1592  0342                     l2320:	
  1593                           
  1594                           ;newmain.c: 330: };newmain.c: 331: if(PORTBbits.RB5 == 1)
  1595  0342  1283               	bcf	3,5	;RP0=0, select bank0
  1596  0343  1303               	bcf	3,6	;RP1=0, select bank0
  1597  0344  1E86               	btfss	6,5	;volatile
  1598  0345  2B8F               	goto	l2340
  1599  0346                     l122:	
  1600  0346  1A86               	btfsc	6,5	;volatile
  1601  0347  2B46               	goto	l122
  1602                           
  1603                           ;newmain.c: 334: decimal_val_date -- ;
  1604  0348  3001               	movlw	1
  1605  0349  02BB               	subwf	set_timing@decimal_val_date,f
  1606                           
  1607                           ;newmain.c: 335: if(decimal_val_date == 0)
  1608  034A  083B               	movf	set_timing@decimal_val_date,w
  1609  034B  1D03               	btfss	3,2
  1610  034C  2B51               	goto	l125
  1611                           
  1612                           ;newmain.c: 336: {;newmain.c: 337: decimal_val_date = 31 ;
  1613  034D  301F               	movlw	31
  1614  034E  00B0               	movwf	??_set_timing
  1615  034F  0830               	movf	??_set_timing,w
  1616  0350  00BB               	movwf	set_timing@decimal_val_date
  1617  0351                     l125:	
  1618                           
  1619                           ;newmain.c: 338: };newmain.c: 339: _delay((unsigned long)((100)*(20000000/4000.0)));
  1620  0351  3003               	movlw	3
  1621  0352  1283               	bcf	3,5	;RP0=0, select bank0
  1622  0353  1303               	bcf	3,6	;RP1=0, select bank0
  1623  0354  00B2               	movwf	??_set_timing+2
  1624  0355  308A               	movlw	138
  1625  0356  00B1               	movwf	??_set_timing+1
  1626  0357  3055               	movlw	85
  1627  0358  00B0               	movwf	??_set_timing
  1628  0359                     u2217:	
  1629  0359  0BB0               	decfsz	??_set_timing,f
  1630  035A  2B59               	goto	u2217
  1631  035B  0BB1               	decfsz	??_set_timing+1,f
  1632  035C  2B59               	goto	u2217
  1633  035D  0BB2               	decfsz	??_set_timing+2,f
  1634  035E  2B59               	goto	u2217
  1635                           
  1636                           ;newmain.c: 340: lcd_command (0x83);
  1637  035F  3083               	movlw	131
  1638  0360  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1639                           
  1640                           ;newmain.c: 341: lcd_string ("DATE:",5);
  1641  0365  3005               	movlw	5
  1642  0366  1283               	bcf	3,5	;RP0=0, select bank0
  1643  0367  1303               	bcf	3,6	;RP1=0, select bank0
  1644  0368  00B0               	movwf	??_set_timing
  1645  0369  0830               	movf	??_set_timing,w
  1646  036A  00A3               	movwf	lcd_string@num
  1647  036B  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1648  036C  120A  118A  2778  120A  118A  	fcall	_lcd_string
  1649                           
  1650                           ;newmain.c: 342: lcd_command (0x89) ;
  1651  0371  3089               	movlw	137
  1652  0372  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1653                           
  1654                           ;newmain.c: 343: bcd_val_date = decimal_to_bcd (decimal_val_date);
  1655  0377  1283               	bcf	3,5	;RP0=0, select bank0
  1656  0378  1303               	bcf	3,6	;RP1=0, select bank0
  1657  0379  083B               	movf	set_timing@decimal_val_date,w
  1658  037A  120A  118A  26A2  120A  118A  	fcall	_decimal_to_bcd
  1659  037F  1283               	bcf	3,5	;RP0=0, select bank0
  1660  0380  1303               	bcf	3,6	;RP1=0, select bank0
  1661  0381  00B0               	movwf	??_set_timing
  1662  0382  0830               	movf	??_set_timing,w
  1663  0383  00B6               	movwf	set_timing@bcd_val_date
  1664                           
  1665                           ;newmain.c: 344: bcd_to_ascii (bcd_val_date) ;
  1666  0384  0836               	movf	set_timing@bcd_val_date,w
  1667  0385  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
  1668                           
  1669                           ;newmain.c: 345: lcd_init ();
  1670  038A  120A  118A  27AE  120A  118A  	fcall	_lcd_init
  1671  038F                     l2340:	
  1672                           
  1673                           ;newmain.c: 346: };newmain.c: 347: };newmain.c: 349: if (timing_flag == 5)
  1674  038F  3005               	movlw	5
  1675  0390  1283               	bcf	3,5	;RP0=0, select bank0
  1676  0391  1303               	bcf	3,6	;RP1=0, select bank0
  1677  0392  0642               	xorwf	_timing_flag,w
  1678  0393  1D03               	btfss	3,2
  1679  0394  2C54               	goto	l2392
  1680                           
  1681                           ;newmain.c: 350: {;newmain.c: 351: lcd_command(0x01);
  1682  0395  3001               	movlw	1
  1683  0396  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1684                           
  1685                           ;newmain.c: 352: lcd_command (0x83);
  1686  039B  3083               	movlw	131
  1687  039C  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1688                           
  1689                           ;newmain.c: 353: lcd_string ("MON.:",5);
  1690  03A1  3005               	movlw	5
  1691  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  1692  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  1693  03A4  00B0               	movwf	??_set_timing
  1694  03A5  0830               	movf	??_set_timing,w
  1695  03A6  00A3               	movwf	lcd_string@num
  1696  03A7  3014               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1697  03A8  120A  118A  2778  120A  118A  	fcall	_lcd_string
  1698                           
  1699                           ;newmain.c: 354: lcd_command (0x89) ;
  1700  03AD  3089               	movlw	137
  1701  03AE  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1702                           
  1703                           ;newmain.c: 355: bcd_to_ascii (bcd_val_month) ;
  1704  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  1705  03B4  1303               	bcf	3,6	;RP1=0, select bank0
  1706  03B5  0837               	movf	set_timing@bcd_val_month,w
  1707  03B6  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
  1708                           
  1709                           ;newmain.c: 357: if(PORTBbits.RB4 == 1)
  1710  03BB  1283               	bcf	3,5	;RP0=0, select bank0
  1711  03BC  1303               	bcf	3,6	;RP1=0, select bank0
  1712  03BD  1E06               	btfss	6,4	;volatile
  1713  03BE  2C07               	goto	l2372
  1714  03BF                     l128:	
  1715  03BF  1A06               	btfsc	6,4	;volatile
  1716  03C0  2BBF               	goto	l128
  1717                           
  1718                           ;newmain.c: 360: decimal_val_month ++ ;
  1719  03C1  3001               	movlw	1
  1720  03C2  00B0               	movwf	??_set_timing
  1721  03C3  0830               	movf	??_set_timing,w
  1722  03C4  07BC               	addwf	set_timing@decimal_val_month,f
  1723                           
  1724                           ;newmain.c: 361: if(decimal_val_month == 60)
  1725  03C5  303C               	movlw	60
  1726  03C6  063C               	xorwf	set_timing@decimal_val_month,w
  1727  03C7  1903               	btfsc	3,2
  1728                           
  1729                           ;newmain.c: 362: {;newmain.c: 363: decimal_val_month =0 ;
  1730  03C8  01BC               	clrf	set_timing@decimal_val_month
  1731                           
  1732                           ;newmain.c: 364: };newmain.c: 365: _delay((unsigned long)((100)*(20000000/4000.0)));
  1733  03C9  3003               	movlw	3
  1734  03CA  1283               	bcf	3,5	;RP0=0, select bank0
  1735  03CB  1303               	bcf	3,6	;RP1=0, select bank0
  1736  03CC  00B2               	movwf	??_set_timing+2
  1737  03CD  308A               	movlw	138
  1738  03CE  00B1               	movwf	??_set_timing+1
  1739  03CF  3055               	movlw	85
  1740  03D0  00B0               	movwf	??_set_timing
  1741  03D1                     u2227:	
  1742  03D1  0BB0               	decfsz	??_set_timing,f
  1743  03D2  2BD1               	goto	u2227
  1744  03D3  0BB1               	decfsz	??_set_timing+1,f
  1745  03D4  2BD1               	goto	u2227
  1746  03D5  0BB2               	decfsz	??_set_timing+2,f
  1747  03D6  2BD1               	goto	u2227
  1748                           
  1749                           ;newmain.c: 366: lcd_command (0x83);
  1750  03D7  3083               	movlw	131
  1751  03D8  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1752                           
  1753                           ;newmain.c: 367: lcd_string ("SEC.:",5);
  1754  03DD  3005               	movlw	5
  1755  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  1756  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  1757  03E0  00B0               	movwf	??_set_timing
  1758  03E1  0830               	movf	??_set_timing,w
  1759  03E2  00A3               	movwf	lcd_string@num
  1760  03E3  3008               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1761  03E4  120A  118A  2778  120A  118A  	fcall	_lcd_string
  1762                           
  1763                           ;newmain.c: 368: lcd_command (0x89) ;
  1764  03E9  3089               	movlw	137
  1765  03EA  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1766                           
  1767                           ;newmain.c: 369: bcd_val_month = decimal_to_bcd (decimal_val_month);
  1768  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  1769  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  1770  03F1  083C               	movf	set_timing@decimal_val_month,w
  1771  03F2  120A  118A  26A2  120A  118A  	fcall	_decimal_to_bcd
  1772  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  1773  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  1774  03F9  00B0               	movwf	??_set_timing
  1775  03FA  0830               	movf	??_set_timing,w
  1776  03FB  00B7               	movwf	set_timing@bcd_val_month
  1777                           
  1778                           ;newmain.c: 370: bcd_to_ascii (bcd_val_month) ;
  1779  03FC  0837               	movf	set_timing@bcd_val_month,w
  1780  03FD  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
  1781                           
  1782                           ;newmain.c: 371: lcd_init ();
  1783  0402  120A  118A  27AE  120A  118A  	fcall	_lcd_init
  1784  0407                     l2372:	
  1785                           
  1786                           ;newmain.c: 372: };newmain.c: 373: if(PORTBbits.RB5 == 1)
  1787  0407  1283               	bcf	3,5	;RP0=0, select bank0
  1788  0408  1303               	bcf	3,6	;RP1=0, select bank0
  1789  0409  1E86               	btfss	6,5	;volatile
  1790  040A  2C54               	goto	l2392
  1791  040B                     l133:	
  1792  040B  1A86               	btfsc	6,5	;volatile
  1793  040C  2C0B               	goto	l133
  1794                           
  1795                           ;newmain.c: 376: decimal_val_month -- ;
  1796  040D  3001               	movlw	1
  1797  040E  02BC               	subwf	set_timing@decimal_val_month,f
  1798                           
  1799                           ;newmain.c: 377: if(decimal_val_month == 0)
  1800  040F  083C               	movf	set_timing@decimal_val_month,w
  1801  0410  1D03               	btfss	3,2
  1802  0411  2C16               	goto	l136
  1803                           
  1804                           ;newmain.c: 378: {;newmain.c: 379: decimal_val_month = 59 ;
  1805  0412  303B               	movlw	59
  1806  0413  00B0               	movwf	??_set_timing
  1807  0414  0830               	movf	??_set_timing,w
  1808  0415  00BC               	movwf	set_timing@decimal_val_month
  1809  0416                     l136:	
  1810                           
  1811                           ;newmain.c: 380: };newmain.c: 381: _delay((unsigned long)((100)*(20000000/4000.0)));
  1812  0416  3003               	movlw	3
  1813  0417  1283               	bcf	3,5	;RP0=0, select bank0
  1814  0418  1303               	bcf	3,6	;RP1=0, select bank0
  1815  0419  00B2               	movwf	??_set_timing+2
  1816  041A  308A               	movlw	138
  1817  041B  00B1               	movwf	??_set_timing+1
  1818  041C  3055               	movlw	85
  1819  041D  00B0               	movwf	??_set_timing
  1820  041E                     u2237:	
  1821  041E  0BB0               	decfsz	??_set_timing,f
  1822  041F  2C1E               	goto	u2237
  1823  0420  0BB1               	decfsz	??_set_timing+1,f
  1824  0421  2C1E               	goto	u2237
  1825  0422  0BB2               	decfsz	??_set_timing+2,f
  1826  0423  2C1E               	goto	u2237
  1827                           
  1828                           ;newmain.c: 382: lcd_command (0x83);
  1829  0424  3083               	movlw	131
  1830  0425  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1831                           
  1832                           ;newmain.c: 383: lcd_string ("SEC.:",5);
  1833  042A  3005               	movlw	5
  1834  042B  1283               	bcf	3,5	;RP0=0, select bank0
  1835  042C  1303               	bcf	3,6	;RP1=0, select bank0
  1836  042D  00B0               	movwf	??_set_timing
  1837  042E  0830               	movf	??_set_timing,w
  1838  042F  00A3               	movwf	lcd_string@num
  1839  0430  3008               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1840  0431  120A  118A  2778  120A  118A  	fcall	_lcd_string
  1841                           
  1842                           ;newmain.c: 384: lcd_command (0x89) ;
  1843  0436  3089               	movlw	137
  1844  0437  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1845                           
  1846                           ;newmain.c: 385: bcd_val_month = decimal_to_bcd (decimal_val_month);
  1847  043C  1283               	bcf	3,5	;RP0=0, select bank0
  1848  043D  1303               	bcf	3,6	;RP1=0, select bank0
  1849  043E  083C               	movf	set_timing@decimal_val_month,w
  1850  043F  120A  118A  26A2  120A  118A  	fcall	_decimal_to_bcd
  1851  0444  1283               	bcf	3,5	;RP0=0, select bank0
  1852  0445  1303               	bcf	3,6	;RP1=0, select bank0
  1853  0446  00B0               	movwf	??_set_timing
  1854  0447  0830               	movf	??_set_timing,w
  1855  0448  00B7               	movwf	set_timing@bcd_val_month
  1856                           
  1857                           ;newmain.c: 386: bcd_to_ascii (bcd_val_month) ;
  1858  0449  0837               	movf	set_timing@bcd_val_month,w
  1859  044A  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
  1860                           
  1861                           ;newmain.c: 387: lcd_init ();
  1862  044F  120A  118A  27AE  120A  118A  	fcall	_lcd_init
  1863  0454                     l2392:	
  1864                           
  1865                           ;newmain.c: 388: };newmain.c: 389: };newmain.c: 391: if (timing_flag == 6)
  1866  0454  3006               	movlw	6
  1867  0455  1283               	bcf	3,5	;RP0=0, select bank0
  1868  0456  1303               	bcf	3,6	;RP1=0, select bank0
  1869  0457  0642               	xorwf	_timing_flag,w
  1870  0458  1D03               	btfss	3,2
  1871  0459  2879               	goto	l2444
  1872                           
  1873                           ;newmain.c: 392: {;newmain.c: 393: lcd_command(0x01);
  1874  045A  3001               	movlw	1
  1875  045B  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1876                           
  1877                           ;newmain.c: 394: lcd_command (0x83);
  1878  0460  3083               	movlw	131
  1879  0461  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1880                           
  1881                           ;newmain.c: 395: lcd_string ("yer.:",5);
  1882  0466  3005               	movlw	5
  1883  0467  1283               	bcf	3,5	;RP0=0, select bank0
  1884  0468  1303               	bcf	3,6	;RP1=0, select bank0
  1885  0469  00B0               	movwf	??_set_timing
  1886  046A  0830               	movf	??_set_timing,w
  1887  046B  00A3               	movwf	lcd_string@num
  1888  046C  301A               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  1889  046D  120A  118A  2778  120A  118A  	fcall	_lcd_string
  1890                           
  1891                           ;newmain.c: 396: lcd_command (0x89) ;
  1892  0472  3089               	movlw	137
  1893  0473  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1894                           
  1895                           ;newmain.c: 397: bcd_to_ascii (bcd_val_year) ;
  1896  0478  1283               	bcf	3,5	;RP0=0, select bank0
  1897  0479  1303               	bcf	3,6	;RP1=0, select bank0
  1898  047A  0838               	movf	set_timing@bcd_val_year,w
  1899  047B  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
  1900                           
  1901                           ;newmain.c: 399: if(PORTBbits.RB4 == 1)
  1902  0480  1283               	bcf	3,5	;RP0=0, select bank0
  1903  0481  1303               	bcf	3,6	;RP1=0, select bank0
  1904  0482  1E06               	btfss	6,4	;volatile
  1905  0483  2CCC               	goto	l2424
  1906  0484                     l139:	
  1907  0484  1A06               	btfsc	6,4	;volatile
  1908  0485  2C84               	goto	l139
  1909                           
  1910                           ;newmain.c: 402: decimal_val_year ++ ;
  1911  0486  3001               	movlw	1
  1912  0487  00B0               	movwf	??_set_timing
  1913  0488  0830               	movf	??_set_timing,w
  1914  0489  07BD               	addwf	set_timing@decimal_val_year,f
  1915                           
  1916                           ;newmain.c: 403: if(decimal_val_year == 60)
  1917  048A  303C               	movlw	60
  1918  048B  063D               	xorwf	set_timing@decimal_val_year,w
  1919  048C  1903               	btfsc	3,2
  1920                           
  1921                           ;newmain.c: 404: {;newmain.c: 405: decimal_val_year =0 ;
  1922  048D  01BD               	clrf	set_timing@decimal_val_year
  1923                           
  1924                           ;newmain.c: 406: };newmain.c: 407: _delay((unsigned long)((100)*(20000000/4000.0)));
  1925  048E  3003               	movlw	3
  1926  048F  1283               	bcf	3,5	;RP0=0, select bank0
  1927  0490  1303               	bcf	3,6	;RP1=0, select bank0
  1928  0491  00B2               	movwf	??_set_timing+2
  1929  0492  308A               	movlw	138
  1930  0493  00B1               	movwf	??_set_timing+1
  1931  0494  3055               	movlw	85
  1932  0495  00B0               	movwf	??_set_timing
  1933  0496                     u2247:	
  1934  0496  0BB0               	decfsz	??_set_timing,f
  1935  0497  2C96               	goto	u2247
  1936  0498  0BB1               	decfsz	??_set_timing+1,f
  1937  0499  2C96               	goto	u2247
  1938  049A  0BB2               	decfsz	??_set_timing+2,f
  1939  049B  2C96               	goto	u2247
  1940                           
  1941                           ;newmain.c: 408: lcd_command (0x83);
  1942  049C  3083               	movlw	131
  1943  049D  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1944                           
  1945                           ;newmain.c: 409: lcd_string ("yer.:",5);
  1946  04A2  3005               	movlw	5
  1947  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  1948  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  1949  04A5  00B0               	movwf	??_set_timing
  1950  04A6  0830               	movf	??_set_timing,w
  1951  04A7  00A3               	movwf	lcd_string@num
  1952  04A8  301A               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  1953  04A9  120A  118A  2778  120A  118A  	fcall	_lcd_string
  1954                           
  1955                           ;newmain.c: 410: lcd_command (0x89) ;
  1956  04AE  3089               	movlw	137
  1957  04AF  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  1958                           
  1959                           ;newmain.c: 411: bcd_val_year = decimal_to_bcd (decimal_val_year);
  1960  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  1961  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  1962  04B6  083D               	movf	set_timing@decimal_val_year,w
  1963  04B7  120A  118A  26A2  120A  118A  	fcall	_decimal_to_bcd
  1964  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  1965  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  1966  04BE  00B0               	movwf	??_set_timing
  1967  04BF  0830               	movf	??_set_timing,w
  1968  04C0  00B8               	movwf	set_timing@bcd_val_year
  1969                           
  1970                           ;newmain.c: 412: bcd_to_ascii (bcd_val_year) ;
  1971  04C1  0838               	movf	set_timing@bcd_val_year,w
  1972  04C2  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
  1973                           
  1974                           ;newmain.c: 413: lcd_init ();
  1975  04C7  120A  118A  27AE  120A  118A  	fcall	_lcd_init
  1976  04CC                     l2424:	
  1977                           
  1978                           ;newmain.c: 414: };newmain.c: 415: if(PORTBbits.RB5 == 1)
  1979  04CC  1283               	bcf	3,5	;RP0=0, select bank0
  1980  04CD  1303               	bcf	3,6	;RP1=0, select bank0
  1981  04CE  1E86               	btfss	6,5	;volatile
  1982  04CF  2879               	goto	l2444
  1983  04D0                     l144:	
  1984  04D0  1A86               	btfsc	6,5	;volatile
  1985  04D1  2CD0               	goto	l144
  1986                           
  1987                           ;newmain.c: 418: decimal_val_year -- ;
  1988  04D2  3001               	movlw	1
  1989  04D3  02BD               	subwf	set_timing@decimal_val_year,f
  1990                           
  1991                           ;newmain.c: 419: if(decimal_val_year == 0)
  1992  04D4  083D               	movf	set_timing@decimal_val_year,w
  1993  04D5  1D03               	btfss	3,2
  1994  04D6  2CDB               	goto	l147
  1995                           
  1996                           ;newmain.c: 420: {;newmain.c: 421: decimal_val_year = 59 ;
  1997  04D7  303B               	movlw	59
  1998  04D8  00B0               	movwf	??_set_timing
  1999  04D9  0830               	movf	??_set_timing,w
  2000  04DA  00BD               	movwf	set_timing@decimal_val_year
  2001  04DB                     l147:	
  2002                           
  2003                           ;newmain.c: 422: };newmain.c: 423: _delay((unsigned long)((100)*(20000000/4000.0)));
  2004  04DB  3003               	movlw	3
  2005  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  2006  04DD  1303               	bcf	3,6	;RP1=0, select bank0
  2007  04DE  00B2               	movwf	??_set_timing+2
  2008  04DF  308A               	movlw	138
  2009  04E0  00B1               	movwf	??_set_timing+1
  2010  04E1  3055               	movlw	85
  2011  04E2  00B0               	movwf	??_set_timing
  2012  04E3                     u2257:	
  2013  04E3  0BB0               	decfsz	??_set_timing,f
  2014  04E4  2CE3               	goto	u2257
  2015  04E5  0BB1               	decfsz	??_set_timing+1,f
  2016  04E6  2CE3               	goto	u2257
  2017  04E7  0BB2               	decfsz	??_set_timing+2,f
  2018  04E8  2CE3               	goto	u2257
  2019                           
  2020                           ;newmain.c: 424: lcd_command (0x83);
  2021  04E9  3083               	movlw	131
  2022  04EA  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  2023                           
  2024                           ;newmain.c: 425: lcd_string ("yer.:",5);
  2025  04EF  3005               	movlw	5
  2026  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  2027  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  2028  04F2  00B0               	movwf	??_set_timing
  2029  04F3  0830               	movf	??_set_timing,w
  2030  04F4  00A3               	movwf	lcd_string@num
  2031  04F5  301A               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  2032  04F6  120A  118A  2778  120A  118A  	fcall	_lcd_string
  2033                           
  2034                           ;newmain.c: 426: lcd_command (0x89) ;
  2035  04FB  3089               	movlw	137
  2036  04FC  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  2037                           
  2038                           ;newmain.c: 427: bcd_val_year = decimal_to_bcd (decimal_val_year);
  2039  0501  1283               	bcf	3,5	;RP0=0, select bank0
  2040  0502  1303               	bcf	3,6	;RP1=0, select bank0
  2041  0503  083D               	movf	set_timing@decimal_val_year,w
  2042  0504  120A  118A  26A2  120A  118A  	fcall	_decimal_to_bcd
  2043  0509  1283               	bcf	3,5	;RP0=0, select bank0
  2044  050A  1303               	bcf	3,6	;RP1=0, select bank0
  2045  050B  00B0               	movwf	??_set_timing
  2046  050C  0830               	movf	??_set_timing,w
  2047  050D  00B8               	movwf	set_timing@bcd_val_year
  2048                           
  2049                           ;newmain.c: 428: bcd_to_ascii (bcd_val_year) ;
  2050  050E  0838               	movf	set_timing@bcd_val_year,w
  2051  050F  120A  118A  26E0  120A  118A  	fcall	_bcd_to_ascii
  2052  0514  2874               	goto	l2442
  2053  0515                     l2446:	
  2054                           
  2055                           ;newmain.c: 430: };newmain.c: 431: };newmain.c: 435: };newmain.c: 437: lcd_init ();
  2056  0515  120A  118A  27AE  120A  118A  	fcall	_lcd_init
  2057                           
  2058                           ;newmain.c: 438: lcd_command (0x80);
  2059  051A  3080               	movlw	128
  2060  051B  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  2061                           
  2062                           ;newmain.c: 439: lcd_string ("CLOCK:",6);
  2063  0520  3006               	movlw	6
  2064  0521  1283               	bcf	3,5	;RP0=0, select bank0
  2065  0522  1303               	bcf	3,6	;RP1=0, select bank0
  2066  0523  00B0               	movwf	??_set_timing
  2067  0524  0830               	movf	??_set_timing,w
  2068  0525  00A3               	movwf	lcd_string@num
  2069  0526  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2070  0527  120A  118A  2778  120A  118A  	fcall	_lcd_string
  2071                           
  2072                           ;newmain.c: 440: lcd_command (0xc0) ;
  2073  052C  30C0               	movlw	192
  2074  052D  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  2075                           
  2076                           ;newmain.c: 441: lcd_string ("DATE:", 5) ;
  2077  0532  3005               	movlw	5
  2078  0533  1283               	bcf	3,5	;RP0=0, select bank0
  2079  0534  1303               	bcf	3,6	;RP1=0, select bank0
  2080  0535  00B0               	movwf	??_set_timing
  2081  0536  0830               	movf	??_set_timing,w
  2082  0537  00A3               	movwf	lcd_string@num
  2083  0538  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2084  0539  120A  118A  2778  120A  118A  	fcall	_lcd_string
  2085                           
  2086                           ;newmain.c: 442: lcd_command (0xc7) ;
  2087  053E  30C7               	movlw	199
  2088  053F  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  2089                           
  2090                           ;newmain.c: 443: timing_flag = 0 ;
  2091  0544  1283               	bcf	3,5	;RP0=0, select bank0
  2092  0545  1303               	bcf	3,6	;RP1=0, select bank0
  2093  0546  01C2               	clrf	_timing_flag
  2094                           
  2095                           ;newmain.c: 444: __second = bcd_val_second ;
  2096  0547  0833               	movf	set_timing@bcd_val_second,w
  2097  0548  00B0               	movwf	??_set_timing
  2098  0549  0830               	movf	??_set_timing,w
  2099  054A  00C8               	movwf	___second
  2100                           
  2101                           ;newmain.c: 445: __minute = bcd_val_minute ;
  2102  054B  0834               	movf	set_timing@bcd_val_minute,w
  2103  054C  00B0               	movwf	??_set_timing
  2104  054D  0830               	movf	??_set_timing,w
  2105  054E  00C7               	movwf	___minute
  2106                           
  2107                           ;newmain.c: 446: __hour = bcd_val_hour ;
  2108  054F  0835               	movf	set_timing@bcd_val_hour,w
  2109  0550  00B0               	movwf	??_set_timing
  2110  0551  0830               	movf	??_set_timing,w
  2111  0552  00C6               	movwf	___hour
  2112                           
  2113                           ;newmain.c: 447: __date = bcd_val_date ;
  2114  0553  0836               	movf	set_timing@bcd_val_date,w
  2115  0554  00B0               	movwf	??_set_timing
  2116  0555  0830               	movf	??_set_timing,w
  2117  0556  00C5               	movwf	___date
  2118                           
  2119                           ;newmain.c: 448: __month = bcd_val_month ;
  2120  0557  0837               	movf	set_timing@bcd_val_month,w
  2121  0558  00B0               	movwf	??_set_timing
  2122  0559  0830               	movf	??_set_timing,w
  2123  055A  00C4               	movwf	___month
  2124                           
  2125                           ;newmain.c: 449: __year = bcd_val_year ;
  2126  055B  0838               	movf	set_timing@bcd_val_year,w
  2127  055C  00B0               	movwf	??_set_timing
  2128  055D  0830               	movf	??_set_timing,w
  2129  055E  00C3               	movwf	___year
  2130                           
  2131                           ;newmain.c: 450: _delay((unsigned long)((300)*(20000000/4000.0))) ;
  2132  055F  3008               	movlw	8
  2133  0560  1283               	bcf	3,5	;RP0=0, select bank0
  2134  0561  1303               	bcf	3,6	;RP1=0, select bank0
  2135  0562  00B2               	movwf	??_set_timing+2
  2136  0563  309D               	movlw	157
  2137  0564  00B1               	movwf	??_set_timing+1
  2138  0565  3005               	movlw	5
  2139  0566  00B0               	movwf	??_set_timing
  2140  0567                     u2267:	
  2141  0567  0BB0               	decfsz	??_set_timing,f
  2142  0568  2D67               	goto	u2267
  2143  0569  0BB1               	decfsz	??_set_timing+1,f
  2144  056A  2D67               	goto	u2267
  2145  056B  0BB2               	decfsz	??_set_timing+2,f
  2146  056C  2D67               	goto	u2267
  2147  056D  0008               	return
  2148  056E                     __end_of_set_timing:	
  2149                           
  2150                           	psect	text2
  2151  0778                     __ptext2:	
  2152 ;; *************** function _lcd_string *****************
  2153 ;; Defined at:
  2154 ;;		line 103 in file "newmain.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;  str             1    wreg     PTR const unsigned char 
  2157 ;;		 -> STR_22(6), STR_21(7), STR_20(6), STR_19(6), 
  2158 ;;		 -> STR_18(6), STR_17(6), STR_16(6), STR_15(6), 
  2159 ;;		 -> STR_14(6), STR_13(6), STR_12(6), STR_11(6), 
  2160 ;;		 -> STR_10(6), STR_9(6), STR_8(6), STR_7(6), 
  2161 ;;		 -> STR_6(6), STR_5(6), STR_4(6), STR_3(6), 
  2162 ;;		 -> STR_2(6), STR_1(7), 
  2163 ;;  num             1    3[BANK0 ] unsigned char 
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;  str             1    6[BANK0 ] PTR const unsigned char 
  2166 ;;		 -> STR_22(6), STR_21(7), STR_20(6), STR_19(6), 
  2167 ;;		 -> STR_18(6), STR_17(6), STR_16(6), STR_15(6), 
  2168 ;;		 -> STR_14(6), STR_13(6), STR_12(6), STR_11(6), 
  2169 ;;		 -> STR_10(6), STR_9(6), STR_8(6), STR_7(6), 
  2170 ;;		 -> STR_6(6), STR_5(6), STR_4(6), STR_3(6), 
  2171 ;;		 -> STR_2(6), STR_1(7), 
  2172 ;;  i               1    5[BANK0 ] unsigned char 
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  1    wreg      void 
  2175 ;; Registers used:
  2176 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2182 ;;      Params:         0       1       0       0       0
  2183 ;;      Locals:         0       2       0       0       0
  2184 ;;      Temps:          0       1       0       0       0
  2185 ;;      Totals:         0       4       0       0       0
  2186 ;;Total ram usage:        4 bytes
  2187 ;; Hardware stack levels used:    1
  2188 ;; Hardware stack levels required when called:    4
  2189 ;; This function calls:
  2190 ;;		_lcd_data
  2191 ;; This function is called by:
  2192 ;;		_main
  2193 ;;		_set_timing
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197                           
  2198                           ;psect for function _lcd_string
  2199  0778                     _lcd_string:	
  2200                           
  2201                           ;incstack = 0
  2202                           ; Regs used in _lcd_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2203                           ;lcd_string@str stored from wreg
  2204  0778  1283               	bcf	3,5	;RP0=0, select bank0
  2205  0779  1303               	bcf	3,6	;RP1=0, select bank0
  2206  077A  00A6               	movwf	lcd_string@str
  2207                           
  2208                           ;newmain.c: 104: unsigned char i ;;newmain.c: 105: for (i=0; i<num; i++)
  2209  077B  01A5               	clrf	lcd_string@i
  2210  077C                     l2072:	
  2211  077C  0823               	movf	lcd_string@num,w
  2212  077D  0225               	subwf	lcd_string@i,w
  2213  077E  1803               	btfsc	3,0
  2214  077F  0008               	return
  2215                           
  2216                           ;newmain.c: 106: {;newmain.c: 107: lcd_data(str[i]);
  2217  0780  0825               	movf	lcd_string@i,w
  2218  0781  0726               	addwf	lcd_string@str,w
  2219  0782  0084               	movwf	4
  2220  0783  120A  118A  2718  120A  118A  	fcall	stringdir
  2221  0788  120A  118A  27C5  120A  118A  	fcall	_lcd_data
  2222  078D  3001               	movlw	1
  2223  078E  1283               	bcf	3,5	;RP0=0, select bank0
  2224  078F  1303               	bcf	3,6	;RP1=0, select bank0
  2225  0790  00A4               	movwf	??_lcd_string
  2226  0791  0824               	movf	??_lcd_string,w
  2227  0792  07A5               	addwf	lcd_string@i,f
  2228  0793  2F7C               	goto	l2072
  2229  0794                     __end_of_lcd_string:	
  2230                           
  2231                           	psect	text3
  2232  07AE                     __ptext3:	
  2233 ;; *************** function _lcd_init *****************
  2234 ;; Defined at:
  2235 ;;		line 78 in file "newmain.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;		None
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;		None
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  1    wreg      void 
  2242 ;; Registers used:
  2243 ;;		wreg, status,2, status,0, pclath, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2249 ;;      Params:         0       0       0       0       0
  2250 ;;      Locals:         0       0       0       0       0
  2251 ;;      Temps:          0       0       0       0       0
  2252 ;;      Totals:         0       0       0       0       0
  2253 ;;Total ram usage:        0 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:    4
  2256 ;; This function calls:
  2257 ;;		_lcd_command
  2258 ;; This function is called by:
  2259 ;;		_main
  2260 ;;		_set_timing
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           
  2265                           ;psect for function _lcd_init
  2266  07AE                     _lcd_init:	
  2267                           
  2268                           ;newmain.c: 79: lcd_command (0x38);
  2269                           
  2270                           ;incstack = 0
  2271                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  2272  07AE  3038               	movlw	56
  2273  07AF  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  2274                           
  2275                           ;newmain.c: 80: lcd_command (0x06);
  2276  07B4  3006               	movlw	6
  2277  07B5  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  2278                           
  2279                           ;newmain.c: 81: lcd_command (0x0c);
  2280  07BA  300C               	movlw	12
  2281  07BB  120A  158A  27EA  120A  118A  	fcall	_lcd_command
  2282                           
  2283                           ;newmain.c: 82: lcd_command (0x01);
  2284  07C0  3001               	movlw	1
  2285  07C1  120A  158A  27EA   	fcall	_lcd_command
  2286  07C4  0008               	return
  2287  07C5                     __end_of_lcd_init:	
  2288                           
  2289                           	psect	text4
  2290  0FEA                     __ptext4:	
  2291 ;; *************** function _lcd_command *****************
  2292 ;; Defined at:
  2293 ;;		line 94 in file "newmain.c"
  2294 ;; Parameters:    Size  Location     Type
  2295 ;;  cmd             1    wreg     unsigned char 
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;  cmd             1    2[BANK0 ] unsigned char 
  2298 ;; Return value:  Size  Location     Type
  2299 ;;                  1    wreg      void 
  2300 ;; Registers used:
  2301 ;;		wreg
  2302 ;; Tracked objects:
  2303 ;;		On entry : 0/0
  2304 ;;		On exit  : 0/0
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2307 ;;      Params:         0       0       0       0       0
  2308 ;;      Locals:         0       1       0       0       0
  2309 ;;      Temps:          0       2       0       0       0
  2310 ;;      Totals:         0       3       0       0       0
  2311 ;;Total ram usage:        3 bytes
  2312 ;; Hardware stack levels used:    1
  2313 ;; Hardware stack levels required when called:    3
  2314 ;; This function calls:
  2315 ;;		Nothing
  2316 ;; This function is called by:
  2317 ;;		_main
  2318 ;;		_lcd_init
  2319 ;;		_set_timing
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           
  2324                           ;psect for function _lcd_command
  2325  0FEA                     _lcd_command:	
  2326                           
  2327                           ;incstack = 0
  2328                           ; Regs used in _lcd_command: [wreg]
  2329                           ;lcd_command@cmd stored from wreg
  2330  0FEA  1283               	bcf	3,5	;RP0=0, select bank0
  2331  0FEB  1303               	bcf	3,6	;RP1=0, select bank0
  2332  0FEC  00A2               	movwf	lcd_command@cmd
  2333                           
  2334                           ;newmain.c: 95: PORTD = cmd;
  2335  0FED  0822               	movf	lcd_command@cmd,w
  2336  0FEE  0088               	movwf	8	;volatile
  2337                           
  2338                           ;newmain.c: 96: PORTBbits.RB1 = 0;
  2339  0FEF  1086               	bcf	6,1	;volatile
  2340                           
  2341                           ;newmain.c: 97: PORTBbits.RB2 = 0;
  2342  0FF0  1106               	bcf	6,2	;volatile
  2343                           
  2344                           ;newmain.c: 98: PORTBbits.RB3 =1;
  2345  0FF1  1586               	bsf	6,3	;volatile
  2346                           
  2347                           ;newmain.c: 99: _delay((unsigned long)((2)*(20000000/4000.0)));
  2348  0FF2  300D               	movlw	13
  2349  0FF3  1283               	bcf	3,5	;RP0=0, select bank0
  2350  0FF4  1303               	bcf	3,6	;RP1=0, select bank0
  2351  0FF5  00A1               	movwf	??_lcd_command+1
  2352  0FF6  30FB               	movlw	251
  2353  0FF7  00A0               	movwf	??_lcd_command
  2354  0FF8                     u2277:	
  2355  0FF8  0BA0               	decfsz	??_lcd_command,f
  2356  0FF9  2FF8               	goto	u2277
  2357  0FFA  0BA1               	decfsz	??_lcd_command+1,f
  2358  0FFB  2FF8               	goto	u2277
  2359                           
  2360                           ;newmain.c: 100: PORTBbits.RB3 =0 ;
  2361  0FFC  1283               	bcf	3,5	;RP0=0, select bank0
  2362  0FFD  1303               	bcf	3,6	;RP1=0, select bank0
  2363  0FFE  1186               	bcf	6,3	;volatile
  2364  0FFF  0008               	return
  2365  1000                     __end_of_lcd_command:	
  2366                           
  2367                           	psect	text5
  2368  06A2                     __ptext5:	
  2369 ;; *************** function _decimal_to_bcd *****************
  2370 ;; Defined at:
  2371 ;;		line 136 in file "newmain.c"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;  value           1    wreg     unsigned char 
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;  value           1   15[BANK0 ] unsigned char 
  2376 ;;  hex             1   14[BANK0 ] unsigned char 
  2377 ;;  lsb             1   13[BANK0 ] unsigned char 
  2378 ;;  msb             1   12[BANK0 ] unsigned char 
  2379 ;; Return value:  Size  Location     Type
  2380 ;;                  1    wreg      unsigned char 
  2381 ;; Registers used:
  2382 ;;		wreg, status,2, status,0, pclath, cstack
  2383 ;; Tracked objects:
  2384 ;;		On entry : 0/0
  2385 ;;		On exit  : 0/0
  2386 ;;		Unchanged: 0/0
  2387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2388 ;;      Params:         0       0       0       0       0
  2389 ;;      Locals:         0       4       0       0       0
  2390 ;;      Temps:          0       3       0       0       0
  2391 ;;      Totals:         0       7       0       0       0
  2392 ;;Total ram usage:        7 bytes
  2393 ;; Hardware stack levels used:    1
  2394 ;; Hardware stack levels required when called:    4
  2395 ;; This function calls:
  2396 ;;		___awdiv
  2397 ;;		___awmod
  2398 ;; This function is called by:
  2399 ;;		_set_timing
  2400 ;; This function uses a non-reentrant model
  2401 ;;
  2402                           
  2403                           
  2404                           ;psect for function _decimal_to_bcd
  2405  06A2                     _decimal_to_bcd:	
  2406                           
  2407                           ;incstack = 0
  2408                           ; Regs used in _decimal_to_bcd: [wreg+status,2+status,0+pclath+cstack]
  2409                           ;decimal_to_bcd@value stored from wreg
  2410  06A2  1283               	bcf	3,5	;RP0=0, select bank0
  2411  06A3  1303               	bcf	3,6	;RP1=0, select bank0
  2412  06A4  00AF               	movwf	decimal_to_bcd@value
  2413                           
  2414                           ;newmain.c: 138: unsigned char msb ;;newmain.c: 139: unsigned char lsb ;;newmain.c: 140:
      +                           unsigned char hex ;;newmain.c: 142: msb = value / 10 ;
  2415  06A5  300A               	movlw	10
  2416  06A6  00A0               	movwf	___awdiv@divisor
  2417  06A7  3000               	movlw	0
  2418  06A8  00A1               	movwf	___awdiv@divisor+1
  2419  06A9  082F               	movf	decimal_to_bcd@value,w
  2420  06AA  00A9               	movwf	??_decimal_to_bcd
  2421  06AB  01AA               	clrf	??_decimal_to_bcd+1
  2422  06AC  0829               	movf	??_decimal_to_bcd,w
  2423  06AD  00A2               	movwf	___awdiv@dividend
  2424  06AE  082A               	movf	??_decimal_to_bcd+1,w
  2425  06AF  00A3               	movwf	___awdiv@dividend+1
  2426  06B0  120A  118A  25FA  120A  118A  	fcall	___awdiv
  2427  06B5  1283               	bcf	3,5	;RP0=0, select bank0
  2428  06B6  1303               	bcf	3,6	;RP1=0, select bank0
  2429  06B7  0820               	movf	?___awdiv,w
  2430  06B8  00AB               	movwf	??_decimal_to_bcd+2
  2431  06B9  082B               	movf	??_decimal_to_bcd+2,w
  2432  06BA  00AC               	movwf	decimal_to_bcd@msb
  2433                           
  2434                           ;newmain.c: 143: lsb = value % 10 ;
  2435  06BB  300A               	movlw	10
  2436  06BC  00A0               	movwf	___awmod@divisor
  2437  06BD  3000               	movlw	0
  2438  06BE  00A1               	movwf	___awmod@divisor+1
  2439  06BF  082F               	movf	decimal_to_bcd@value,w
  2440  06C0  00A9               	movwf	??_decimal_to_bcd
  2441  06C1  01AA               	clrf	??_decimal_to_bcd+1
  2442  06C2  0829               	movf	??_decimal_to_bcd,w
  2443  06C3  00A2               	movwf	___awmod@dividend
  2444  06C4  082A               	movf	??_decimal_to_bcd+1,w
  2445  06C5  00A3               	movwf	___awmod@dividend+1
  2446  06C6  120A  118A  2655  120A  118A  	fcall	___awmod
  2447  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  2448  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  2449  06CD  0820               	movf	?___awmod,w
  2450  06CE  00AB               	movwf	??_decimal_to_bcd+2
  2451  06CF  082B               	movf	??_decimal_to_bcd+2,w
  2452  06D0  00AD               	movwf	decimal_to_bcd@lsb
  2453                           
  2454                           ;newmain.c: 144: hex = ((msb<< 4) + lsb ) ;
  2455  06D1  082C               	movf	decimal_to_bcd@msb,w
  2456  06D2  00A9               	movwf	??_decimal_to_bcd
  2457  06D3  3004               	movlw	4
  2458  06D4                     u1675:	
  2459  06D4  1003               	clrc
  2460  06D5  0DA9               	rlf	??_decimal_to_bcd,f
  2461  06D6  3EFF               	addlw	-1
  2462  06D7  1D03               	skipz
  2463  06D8  2ED4               	goto	u1675
  2464  06D9  082D               	movf	decimal_to_bcd@lsb,w
  2465  06DA  0729               	addwf	??_decimal_to_bcd,w
  2466  06DB  00AA               	movwf	??_decimal_to_bcd+1
  2467  06DC  082A               	movf	??_decimal_to_bcd+1,w
  2468  06DD  00AE               	movwf	decimal_to_bcd@hex
  2469                           
  2470                           ;newmain.c: 145: return (hex) ;
  2471  06DE  082E               	movf	decimal_to_bcd@hex,w
  2472  06DF  0008               	return
  2473  06E0                     __end_of_decimal_to_bcd:	
  2474                           
  2475                           	psect	text6
  2476  0655                     __ptext6:	
  2477 ;; *************** function ___awmod *****************
  2478 ;; Defined at:
  2479 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;  divisor         2    0[BANK0 ] int 
  2482 ;;  dividend        2    2[BANK0 ] int 
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;  sign            1    6[BANK0 ] unsigned char 
  2485 ;;  counter         1    5[BANK0 ] unsigned char 
  2486 ;; Return value:  Size  Location     Type
  2487 ;;                  2    0[BANK0 ] int 
  2488 ;; Registers used:
  2489 ;;		wreg, status,2, status,0
  2490 ;; Tracked objects:
  2491 ;;		On entry : 0/0
  2492 ;;		On exit  : 0/0
  2493 ;;		Unchanged: 0/0
  2494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2495 ;;      Params:         0       4       0       0       0
  2496 ;;      Locals:         0       2       0       0       0
  2497 ;;      Temps:          0       1       0       0       0
  2498 ;;      Totals:         0       7       0       0       0
  2499 ;;Total ram usage:        7 bytes
  2500 ;; Hardware stack levels used:    1
  2501 ;; Hardware stack levels required when called:    3
  2502 ;; This function calls:
  2503 ;;		Nothing
  2504 ;; This function is called by:
  2505 ;;		_decimal_to_bcd
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509                           
  2510                           ;psect for function ___awmod
  2511  0655                     ___awmod:	
  2512                           
  2513                           ;incstack = 0
  2514                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2515  0655  1283               	bcf	3,5	;RP0=0, select bank0
  2516  0656  1303               	bcf	3,6	;RP1=0, select bank0
  2517  0657  01A6               	clrf	___awmod@sign
  2518  0658  1FA3               	btfss	___awmod@dividend+1,7
  2519  0659  2E61               	goto	l2034
  2520  065A  09A2               	comf	___awmod@dividend,f
  2521  065B  09A3               	comf	___awmod@dividend+1,f
  2522  065C  0AA2               	incf	___awmod@dividend,f
  2523  065D  1903               	skipnz
  2524  065E  0AA3               	incf	___awmod@dividend+1,f
  2525  065F  01A6               	clrf	___awmod@sign
  2526  0660  0AA6               	incf	___awmod@sign,f
  2527  0661                     l2034:	
  2528  0661  1FA1               	btfss	___awmod@divisor+1,7
  2529  0662  2E68               	goto	l2038
  2530  0663  09A0               	comf	___awmod@divisor,f
  2531  0664  09A1               	comf	___awmod@divisor+1,f
  2532  0665  0AA0               	incf	___awmod@divisor,f
  2533  0666  1903               	skipnz
  2534  0667  0AA1               	incf	___awmod@divisor+1,f
  2535  0668                     l2038:	
  2536  0668  0820               	movf	___awmod@divisor,w
  2537  0669  0421               	iorwf	___awmod@divisor+1,w
  2538  066A  1903               	btfsc	3,2
  2539  066B  2E95               	goto	l2056
  2540  066C  01A5               	clrf	___awmod@counter
  2541  066D  0AA5               	incf	___awmod@counter,f
  2542  066E                     l2046:	
  2543  066E  1BA1               	btfsc	___awmod@divisor+1,7
  2544  066F  2E7C               	goto	l2048
  2545  0670  3001               	movlw	1
  2546  0671                     u1585:	
  2547  0671  1003               	clrc
  2548  0672  0DA0               	rlf	___awmod@divisor,f
  2549  0673  0DA1               	rlf	___awmod@divisor+1,f
  2550  0674  3EFF               	addlw	-1
  2551  0675  1D03               	skipz
  2552  0676  2E71               	goto	u1585
  2553  0677  3001               	movlw	1
  2554  0678  00A4               	movwf	??___awmod
  2555  0679  0824               	movf	??___awmod,w
  2556  067A  07A5               	addwf	___awmod@counter,f
  2557  067B  2E6E               	goto	l2046
  2558  067C                     l2048:	
  2559  067C  0821               	movf	___awmod@divisor+1,w
  2560  067D  0223               	subwf	___awmod@dividend+1,w
  2561  067E  1D03               	skipz
  2562  067F  2E82               	goto	u1605
  2563  0680  0820               	movf	___awmod@divisor,w
  2564  0681  0222               	subwf	___awmod@dividend,w
  2565  0682                     u1605:	
  2566  0682  1C03               	skipc
  2567  0683  2E8A               	goto	l2052
  2568  0684  0820               	movf	___awmod@divisor,w
  2569  0685  02A2               	subwf	___awmod@dividend,f
  2570  0686  0821               	movf	___awmod@divisor+1,w
  2571  0687  1C03               	skipc
  2572  0688  03A3               	decf	___awmod@dividend+1,f
  2573  0689  02A3               	subwf	___awmod@dividend+1,f
  2574  068A                     l2052:	
  2575  068A  3001               	movlw	1
  2576  068B                     u1615:	
  2577  068B  1003               	clrc
  2578  068C  0CA1               	rrf	___awmod@divisor+1,f
  2579  068D  0CA0               	rrf	___awmod@divisor,f
  2580  068E  3EFF               	addlw	-1
  2581  068F  1D03               	skipz
  2582  0690  2E8B               	goto	u1615
  2583  0691  3001               	movlw	1
  2584  0692  02A5               	subwf	___awmod@counter,f
  2585  0693  1D03               	btfss	3,2
  2586  0694  2E7C               	goto	l2048
  2587  0695                     l2056:	
  2588  0695  0826               	movf	___awmod@sign,w
  2589  0696  1903               	btfsc	3,2
  2590  0697  2E9D               	goto	l2060
  2591  0698  09A2               	comf	___awmod@dividend,f
  2592  0699  09A3               	comf	___awmod@dividend+1,f
  2593  069A  0AA2               	incf	___awmod@dividend,f
  2594  069B  1903               	skipnz
  2595  069C  0AA3               	incf	___awmod@dividend+1,f
  2596  069D                     l2060:	
  2597  069D  0823               	movf	___awmod@dividend+1,w
  2598  069E  00A1               	movwf	?___awmod+1
  2599  069F  0822               	movf	___awmod@dividend,w
  2600  06A0  00A0               	movwf	?___awmod
  2601  06A1  0008               	return
  2602  06A2                     __end_of___awmod:	
  2603                           
  2604                           	psect	text7
  2605  05FA                     __ptext7:	
  2606 ;; *************** function ___awdiv *****************
  2607 ;; Defined at:
  2608 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;  divisor         2    0[BANK0 ] int 
  2611 ;;  dividend        2    2[BANK0 ] int 
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;  quotient        2    7[BANK0 ] int 
  2614 ;;  sign            1    6[BANK0 ] unsigned char 
  2615 ;;  counter         1    5[BANK0 ] unsigned char 
  2616 ;; Return value:  Size  Location     Type
  2617 ;;                  2    0[BANK0 ] int 
  2618 ;; Registers used:
  2619 ;;		wreg, status,2, status,0
  2620 ;; Tracked objects:
  2621 ;;		On entry : 0/0
  2622 ;;		On exit  : 0/0
  2623 ;;		Unchanged: 0/0
  2624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2625 ;;      Params:         0       4       0       0       0
  2626 ;;      Locals:         0       4       0       0       0
  2627 ;;      Temps:          0       1       0       0       0
  2628 ;;      Totals:         0       9       0       0       0
  2629 ;;Total ram usage:        9 bytes
  2630 ;; Hardware stack levels used:    1
  2631 ;; Hardware stack levels required when called:    3
  2632 ;; This function calls:
  2633 ;;		Nothing
  2634 ;; This function is called by:
  2635 ;;		_decimal_to_bcd
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639                           
  2640                           ;psect for function ___awdiv
  2641  05FA                     ___awdiv:	
  2642                           
  2643                           ;incstack = 0
  2644                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2645  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  2646  05FB  1303               	bcf	3,6	;RP1=0, select bank0
  2647  05FC  01A6               	clrf	___awdiv@sign
  2648  05FD  1FA1               	btfss	___awdiv@divisor+1,7
  2649  05FE  2E06               	goto	l1990
  2650  05FF  09A0               	comf	___awdiv@divisor,f
  2651  0600  09A1               	comf	___awdiv@divisor+1,f
  2652  0601  0AA0               	incf	___awdiv@divisor,f
  2653  0602  1903               	skipnz
  2654  0603  0AA1               	incf	___awdiv@divisor+1,f
  2655  0604  01A6               	clrf	___awdiv@sign
  2656  0605  0AA6               	incf	___awdiv@sign,f
  2657  0606                     l1990:	
  2658  0606  1FA3               	btfss	___awdiv@dividend+1,7
  2659  0607  2E11               	goto	l1996
  2660  0608  09A2               	comf	___awdiv@dividend,f
  2661  0609  09A3               	comf	___awdiv@dividend+1,f
  2662  060A  0AA2               	incf	___awdiv@dividend,f
  2663  060B  1903               	skipnz
  2664  060C  0AA3               	incf	___awdiv@dividend+1,f
  2665  060D  3001               	movlw	1
  2666  060E  00A4               	movwf	??___awdiv
  2667  060F  0824               	movf	??___awdiv,w
  2668  0610  06A6               	xorwf	___awdiv@sign,f
  2669  0611                     l1996:	
  2670  0611  01A7               	clrf	___awdiv@quotient
  2671  0612  01A8               	clrf	___awdiv@quotient+1
  2672  0613  0820               	movf	___awdiv@divisor,w
  2673  0614  0421               	iorwf	___awdiv@divisor+1,w
  2674  0615  1903               	btfsc	3,2
  2675  0616  2E48               	goto	l2018
  2676  0617  01A5               	clrf	___awdiv@counter
  2677  0618  0AA5               	incf	___awdiv@counter,f
  2678  0619                     l2006:	
  2679  0619  1BA1               	btfsc	___awdiv@divisor+1,7
  2680  061A  2E27               	goto	l2008
  2681  061B  3001               	movlw	1
  2682  061C                     u1485:	
  2683  061C  1003               	clrc
  2684  061D  0DA0               	rlf	___awdiv@divisor,f
  2685  061E  0DA1               	rlf	___awdiv@divisor+1,f
  2686  061F  3EFF               	addlw	-1
  2687  0620  1D03               	skipz
  2688  0621  2E1C               	goto	u1485
  2689  0622  3001               	movlw	1
  2690  0623  00A4               	movwf	??___awdiv
  2691  0624  0824               	movf	??___awdiv,w
  2692  0625  07A5               	addwf	___awdiv@counter,f
  2693  0626  2E19               	goto	l2006
  2694  0627                     l2008:	
  2695  0627  3001               	movlw	1
  2696  0628                     u1505:	
  2697  0628  1003               	clrc
  2698  0629  0DA7               	rlf	___awdiv@quotient,f
  2699  062A  0DA8               	rlf	___awdiv@quotient+1,f
  2700  062B  3EFF               	addlw	-1
  2701  062C  1D03               	skipz
  2702  062D  2E28               	goto	u1505
  2703  062E  0821               	movf	___awdiv@divisor+1,w
  2704  062F  0223               	subwf	___awdiv@dividend+1,w
  2705  0630  1D03               	skipz
  2706  0631  2E34               	goto	u1515
  2707  0632  0820               	movf	___awdiv@divisor,w
  2708  0633  0222               	subwf	___awdiv@dividend,w
  2709  0634                     u1515:	
  2710  0634  1C03               	skipc
  2711  0635  2E3D               	goto	l2014
  2712  0636  0820               	movf	___awdiv@divisor,w
  2713  0637  02A2               	subwf	___awdiv@dividend,f
  2714  0638  0821               	movf	___awdiv@divisor+1,w
  2715  0639  1C03               	skipc
  2716  063A  03A3               	decf	___awdiv@dividend+1,f
  2717  063B  02A3               	subwf	___awdiv@dividend+1,f
  2718  063C  1427               	bsf	___awdiv@quotient,0
  2719  063D                     l2014:	
  2720  063D  3001               	movlw	1
  2721  063E                     u1525:	
  2722  063E  1003               	clrc
  2723  063F  0CA1               	rrf	___awdiv@divisor+1,f
  2724  0640  0CA0               	rrf	___awdiv@divisor,f
  2725  0641  3EFF               	addlw	-1
  2726  0642  1D03               	skipz
  2727  0643  2E3E               	goto	u1525
  2728  0644  3001               	movlw	1
  2729  0645  02A5               	subwf	___awdiv@counter,f
  2730  0646  1D03               	btfss	3,2
  2731  0647  2E27               	goto	l2008
  2732  0648                     l2018:	
  2733  0648  0826               	movf	___awdiv@sign,w
  2734  0649  1903               	btfsc	3,2
  2735  064A  2E50               	goto	l2022
  2736  064B  09A7               	comf	___awdiv@quotient,f
  2737  064C  09A8               	comf	___awdiv@quotient+1,f
  2738  064D  0AA7               	incf	___awdiv@quotient,f
  2739  064E  1903               	skipnz
  2740  064F  0AA8               	incf	___awdiv@quotient+1,f
  2741  0650                     l2022:	
  2742  0650  0828               	movf	___awdiv@quotient+1,w
  2743  0651  00A1               	movwf	?___awdiv+1
  2744  0652  0827               	movf	___awdiv@quotient,w
  2745  0653  00A0               	movwf	?___awdiv
  2746  0654  0008               	return
  2747  0655                     __end_of___awdiv:	
  2748                           
  2749                           	psect	text8
  2750  0749                     __ptext8:	
  2751 ;; *************** function _bcd_to_decimal *****************
  2752 ;; Defined at:
  2753 ;;		line 125 in file "newmain.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;  value           1    wreg     unsigned char 
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;  value           1    6[BANK0 ] unsigned char 
  2758 ;;  dec             1    7[BANK0 ] unsigned char 
  2759 ;; Return value:  Size  Location     Type
  2760 ;;                  1    wreg      unsigned char 
  2761 ;; Registers used:
  2762 ;;		wreg, status,2, status,0, pclath, cstack
  2763 ;; Tracked objects:
  2764 ;;		On entry : 0/0
  2765 ;;		On exit  : 0/0
  2766 ;;		Unchanged: 0/0
  2767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2768 ;;      Params:         0       0       0       0       0
  2769 ;;      Locals:         0       2       0       0       0
  2770 ;;      Temps:          0       2       0       0       0
  2771 ;;      Totals:         0       4       0       0       0
  2772 ;;Total ram usage:        4 bytes
  2773 ;; Hardware stack levels used:    1
  2774 ;; Hardware stack levels required when called:    4
  2775 ;; This function calls:
  2776 ;;		___bmul
  2777 ;; This function is called by:
  2778 ;;		_set_timing
  2779 ;; This function uses a non-reentrant model
  2780 ;;
  2781                           
  2782                           
  2783                           ;psect for function _bcd_to_decimal
  2784  0749                     _bcd_to_decimal:	
  2785                           
  2786                           ;incstack = 0
  2787                           ; Regs used in _bcd_to_decimal: [wreg+status,2+status,0+pclath+cstack]
  2788                           ;bcd_to_decimal@value stored from wreg
  2789  0749  1283               	bcf	3,5	;RP0=0, select bank0
  2790  074A  1303               	bcf	3,6	;RP1=0, select bank0
  2791  074B  00A6               	movwf	bcd_to_decimal@value
  2792                           
  2793                           ;newmain.c: 127: unsigned char dec ;;newmain.c: 128: dec = value ;
  2794  074C  0826               	movf	bcd_to_decimal@value,w
  2795  074D  00A4               	movwf	??_bcd_to_decimal
  2796  074E  0824               	movf	??_bcd_to_decimal,w
  2797  074F  00A7               	movwf	bcd_to_decimal@dec
  2798                           
  2799                           ;newmain.c: 129: dec = dec & 0xf0 ;
  2800  0750  0827               	movf	bcd_to_decimal@dec,w
  2801  0751  39F0               	andlw	240
  2802  0752  00A4               	movwf	??_bcd_to_decimal
  2803  0753  0824               	movf	??_bcd_to_decimal,w
  2804  0754  00A7               	movwf	bcd_to_decimal@dec
  2805                           
  2806                           ;newmain.c: 130: dec = dec >> 4 ;
  2807  0755  0827               	movf	bcd_to_decimal@dec,w
  2808  0756  00A4               	movwf	??_bcd_to_decimal
  2809  0757  3004               	movlw	4
  2810  0758                     u1665:	
  2811  0758  1003               	clrc
  2812  0759  0CA4               	rrf	??_bcd_to_decimal,f
  2813  075A  3EFF               	addlw	-1
  2814  075B  1D03               	skipz
  2815  075C  2F58               	goto	u1665
  2816  075D  0824               	movf	??_bcd_to_decimal,w
  2817  075E  00A5               	movwf	??_bcd_to_decimal+1
  2818  075F  0825               	movf	??_bcd_to_decimal+1,w
  2819  0760  00A7               	movwf	bcd_to_decimal@dec
  2820                           
  2821                           ;newmain.c: 131: dec = dec * 10 ;
  2822  0761  300A               	movlw	10
  2823  0762  00A4               	movwf	??_bcd_to_decimal
  2824  0763  0824               	movf	??_bcd_to_decimal,w
  2825  0764  00A0               	movwf	___bmul@multiplicand
  2826  0765  0827               	movf	bcd_to_decimal@dec,w
  2827  0766  120A  158A  27C2   	fcall	___bmul
  2828  0769  1283               	bcf	3,5	;RP0=0, select bank0
  2829  076A  1303               	bcf	3,6	;RP1=0, select bank0
  2830  076B  00A5               	movwf	??_bcd_to_decimal+1
  2831  076C  0825               	movf	??_bcd_to_decimal+1,w
  2832  076D  00A7               	movwf	bcd_to_decimal@dec
  2833                           
  2834                           ;newmain.c: 132: dec = dec + (value & 0x0f) ;
  2835  076E  300F               	movlw	15
  2836  076F  0526               	andwf	bcd_to_decimal@value,w
  2837  0770  00A4               	movwf	??_bcd_to_decimal
  2838  0771  0827               	movf	bcd_to_decimal@dec,w
  2839  0772  0724               	addwf	??_bcd_to_decimal,w
  2840  0773  00A5               	movwf	??_bcd_to_decimal+1
  2841  0774  0825               	movf	??_bcd_to_decimal+1,w
  2842  0775  00A7               	movwf	bcd_to_decimal@dec
  2843                           
  2844                           ;newmain.c: 133: return (dec) ;
  2845  0776  0827               	movf	bcd_to_decimal@dec,w
  2846  0777  0008               	return
  2847  0778                     __end_of_bcd_to_decimal:	
  2848                           
  2849                           	psect	text9
  2850  0FC2                     __ptext9:	
  2851 ;; *************** function ___bmul *****************
  2852 ;; Defined at:
  2853 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;  multiplier      1    wreg     unsigned char 
  2856 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;  multiplier      1    3[BANK0 ] unsigned char 
  2859 ;;  product         1    2[BANK0 ] unsigned char 
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  1    wreg      unsigned char 
  2862 ;; Registers used:
  2863 ;;		wreg, status,2, status,0
  2864 ;; Tracked objects:
  2865 ;;		On entry : 0/0
  2866 ;;		On exit  : 0/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2869 ;;      Params:         0       1       0       0       0
  2870 ;;      Locals:         0       2       0       0       0
  2871 ;;      Temps:          0       1       0       0       0
  2872 ;;      Totals:         0       4       0       0       0
  2873 ;;Total ram usage:        4 bytes
  2874 ;; Hardware stack levels used:    1
  2875 ;; Hardware stack levels required when called:    3
  2876 ;; This function calls:
  2877 ;;		Nothing
  2878 ;; This function is called by:
  2879 ;;		_bcd_to_decimal
  2880 ;; This function uses a non-reentrant model
  2881 ;;
  2882                           
  2883                           
  2884                           ;psect for function ___bmul
  2885  0FC2                     ___bmul:	
  2886                           
  2887                           ;incstack = 0
  2888                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2889                           ;___bmul@multiplier stored from wreg
  2890  0FC2  1283               	bcf	3,5	;RP0=0, select bank0
  2891  0FC3  1303               	bcf	3,6	;RP1=0, select bank0
  2892  0FC4  00A3               	movwf	___bmul@multiplier
  2893  0FC5  01A2               	clrf	___bmul@product
  2894  0FC6                     l1970:	
  2895  0FC6  1C23               	btfss	___bmul@multiplier,0
  2896  0FC7  2FCC               	goto	l1974
  2897  0FC8  0820               	movf	___bmul@multiplicand,w
  2898  0FC9  00A1               	movwf	??___bmul
  2899  0FCA  0821               	movf	??___bmul,w
  2900  0FCB  07A2               	addwf	___bmul@product,f
  2901  0FCC                     l1974:	
  2902  0FCC  1003               	clrc
  2903  0FCD  0DA0               	rlf	___bmul@multiplicand,f
  2904  0FCE  1003               	clrc
  2905  0FCF  0CA3               	rrf	___bmul@multiplier,f
  2906  0FD0  0823               	movf	___bmul@multiplier,w
  2907  0FD1  1D03               	btfss	3,2
  2908  0FD2  2FC6               	goto	l1970
  2909  0FD3  0822               	movf	___bmul@product,w
  2910  0FD4  0008               	return
  2911  0FD5                     __end_of___bmul:	
  2912                           
  2913                           	psect	text10
  2914  06E0                     __ptext10:	
  2915 ;; *************** function _bcd_to_ascii *****************
  2916 ;; Defined at:
  2917 ;;		line 110 in file "newmain.c"
  2918 ;; Parameters:    Size  Location     Type
  2919 ;;  value           1    wreg     unsigned char 
  2920 ;; Auto vars:     Size  Location     Type
  2921 ;;  value           1    5[BANK0 ] unsigned char 
  2922 ;;  bcd             1    6[BANK0 ] unsigned char 
  2923 ;; Return value:  Size  Location     Type
  2924 ;;                  1    wreg      void 
  2925 ;; Registers used:
  2926 ;;		wreg, status,2, status,0, pclath, cstack
  2927 ;; Tracked objects:
  2928 ;;		On entry : 0/0
  2929 ;;		On exit  : 0/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2932 ;;      Params:         0       0       0       0       0
  2933 ;;      Locals:         0       2       0       0       0
  2934 ;;      Temps:          0       2       0       0       0
  2935 ;;      Totals:         0       4       0       0       0
  2936 ;;Total ram usage:        4 bytes
  2937 ;; Hardware stack levels used:    1
  2938 ;; Hardware stack levels required when called:    4
  2939 ;; This function calls:
  2940 ;;		_lcd_data
  2941 ;; This function is called by:
  2942 ;;		_main
  2943 ;;		_set_timing
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           
  2948                           ;psect for function _bcd_to_ascii
  2949  06E0                     _bcd_to_ascii:	
  2950                           
  2951                           ;incstack = 0
  2952                           ; Regs used in _bcd_to_ascii: [wreg+status,2+status,0+pclath+cstack]
  2953                           ;bcd_to_ascii@value stored from wreg
  2954  06E0  1283               	bcf	3,5	;RP0=0, select bank0
  2955  06E1  1303               	bcf	3,6	;RP1=0, select bank0
  2956  06E2  00A5               	movwf	bcd_to_ascii@value
  2957                           
  2958                           ;newmain.c: 112: unsigned char bcd ;;newmain.c: 113: bcd = value ;
  2959  06E3  0825               	movf	bcd_to_ascii@value,w
  2960  06E4  00A3               	movwf	??_bcd_to_ascii
  2961  06E5  0823               	movf	??_bcd_to_ascii,w
  2962  06E6  00A6               	movwf	bcd_to_ascii@bcd
  2963                           
  2964                           ;newmain.c: 114: bcd = bcd & 0xf0 ;
  2965  06E7  0826               	movf	bcd_to_ascii@bcd,w
  2966  06E8  39F0               	andlw	240
  2967  06E9  00A3               	movwf	??_bcd_to_ascii
  2968  06EA  0823               	movf	??_bcd_to_ascii,w
  2969  06EB  00A6               	movwf	bcd_to_ascii@bcd
  2970                           
  2971                           ;newmain.c: 115: bcd = bcd >> 4 ;
  2972  06EC  0826               	movf	bcd_to_ascii@bcd,w
  2973  06ED  00A3               	movwf	??_bcd_to_ascii
  2974  06EE  3004               	movlw	4
  2975  06EF                     u1655:	
  2976  06EF  1003               	clrc
  2977  06F0  0CA3               	rrf	??_bcd_to_ascii,f
  2978  06F1  3EFF               	addlw	-1
  2979  06F2  1D03               	skipz
  2980  06F3  2EEF               	goto	u1655
  2981  06F4  0823               	movf	??_bcd_to_ascii,w
  2982  06F5  00A4               	movwf	??_bcd_to_ascii+1
  2983  06F6  0824               	movf	??_bcd_to_ascii+1,w
  2984  06F7  00A6               	movwf	bcd_to_ascii@bcd
  2985                           
  2986                           ;newmain.c: 116: bcd = bcd | 0x30 ;
  2987  06F8  0826               	movf	bcd_to_ascii@bcd,w
  2988  06F9  3830               	iorlw	48
  2989  06FA  00A3               	movwf	??_bcd_to_ascii
  2990  06FB  0823               	movf	??_bcd_to_ascii,w
  2991  06FC  00A6               	movwf	bcd_to_ascii@bcd
  2992                           
  2993                           ;newmain.c: 117: lcd_data (bcd) ;
  2994  06FD  0826               	movf	bcd_to_ascii@bcd,w
  2995  06FE  120A  118A  27C5  120A  118A  	fcall	_lcd_data
  2996                           
  2997                           ;newmain.c: 119: bcd = value ;
  2998  0703  1283               	bcf	3,5	;RP0=0, select bank0
  2999  0704  1303               	bcf	3,6	;RP1=0, select bank0
  3000  0705  0825               	movf	bcd_to_ascii@value,w
  3001  0706  00A3               	movwf	??_bcd_to_ascii
  3002  0707  0823               	movf	??_bcd_to_ascii,w
  3003  0708  00A6               	movwf	bcd_to_ascii@bcd
  3004                           
  3005                           ;newmain.c: 120: bcd = bcd & 0x0f ;
  3006  0709  0826               	movf	bcd_to_ascii@bcd,w
  3007  070A  390F               	andlw	15
  3008  070B  00A3               	movwf	??_bcd_to_ascii
  3009  070C  0823               	movf	??_bcd_to_ascii,w
  3010  070D  00A6               	movwf	bcd_to_ascii@bcd
  3011                           
  3012                           ;newmain.c: 121: bcd = bcd | 0x30 ;
  3013  070E  0826               	movf	bcd_to_ascii@bcd,w
  3014  070F  3830               	iorlw	48
  3015  0710  00A3               	movwf	??_bcd_to_ascii
  3016  0711  0823               	movf	??_bcd_to_ascii,w
  3017  0712  00A6               	movwf	bcd_to_ascii@bcd
  3018                           
  3019                           ;newmain.c: 122: lcd_data (bcd) ;
  3020  0713  0826               	movf	bcd_to_ascii@bcd,w
  3021  0714  120A  118A  27C5   	fcall	_lcd_data
  3022  0717  0008               	return
  3023  0718                     __end_of_bcd_to_ascii:	
  3024                           
  3025                           	psect	text11
  3026  07C5                     __ptext11:	
  3027 ;; *************** function _lcd_data *****************
  3028 ;; Defined at:
  3029 ;;		line 85 in file "newmain.c"
  3030 ;; Parameters:    Size  Location     Type
  3031 ;;  data            1    wreg     unsigned char 
  3032 ;; Auto vars:     Size  Location     Type
  3033 ;;  data            1    2[BANK0 ] unsigned char 
  3034 ;; Return value:  Size  Location     Type
  3035 ;;                  1    wreg      void 
  3036 ;; Registers used:
  3037 ;;		wreg
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3043 ;;      Params:         0       0       0       0       0
  3044 ;;      Locals:         0       1       0       0       0
  3045 ;;      Temps:          0       2       0       0       0
  3046 ;;      Totals:         0       3       0       0       0
  3047 ;;Total ram usage:        3 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    3
  3050 ;; This function calls:
  3051 ;;		Nothing
  3052 ;; This function is called by:
  3053 ;;		_lcd_string
  3054 ;;		_bcd_to_ascii
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           
  3059                           ;psect for function _lcd_data
  3060  07C5                     _lcd_data:	
  3061                           
  3062                           ;incstack = 0
  3063                           ; Regs used in _lcd_data: [wreg]
  3064                           ;lcd_data@data stored from wreg
  3065  07C5  1283               	bcf	3,5	;RP0=0, select bank0
  3066  07C6  1303               	bcf	3,6	;RP1=0, select bank0
  3067  07C7  00A2               	movwf	lcd_data@data
  3068                           
  3069                           ;newmain.c: 86: PORTD = data;
  3070  07C8  0822               	movf	lcd_data@data,w
  3071  07C9  0088               	movwf	8	;volatile
  3072                           
  3073                           ;newmain.c: 87: PORTBbits.RB1 = 1;
  3074  07CA  1486               	bsf	6,1	;volatile
  3075                           
  3076                           ;newmain.c: 88: PORTBbits.RB2 = 0;
  3077  07CB  1106               	bcf	6,2	;volatile
  3078                           
  3079                           ;newmain.c: 89: PORTBbits.RB3 =1;
  3080  07CC  1586               	bsf	6,3	;volatile
  3081                           
  3082                           ;newmain.c: 90: _delay((unsigned long)((5)*(20000000/4000.0)));
  3083  07CD  3021               	movlw	33
  3084  07CE  1283               	bcf	3,5	;RP0=0, select bank0
  3085  07CF  1303               	bcf	3,6	;RP1=0, select bank0
  3086  07D0  00A1               	movwf	??_lcd_data+1
  3087  07D1  3075               	movlw	117
  3088  07D2  00A0               	movwf	??_lcd_data
  3089  07D3                     u2287:	
  3090  07D3  0BA0               	decfsz	??_lcd_data,f
  3091  07D4  2FD3               	goto	u2287
  3092  07D5  0BA1               	decfsz	??_lcd_data+1,f
  3093  07D6  2FD3               	goto	u2287
  3094  07D7  2FD8               	nop2
  3095                           
  3096                           ;newmain.c: 91: PORTBbits.RB3 =0 ;
  3097  07D8  1283               	bcf	3,5	;RP0=0, select bank0
  3098  07D9  1303               	bcf	3,6	;RP1=0, select bank0
  3099  07DA  1186               	bcf	6,3	;volatile
  3100  07DB  0008               	return
  3101  07DC                     __end_of_lcd_data:	
  3102                           
  3103                           	psect	text12
  3104  0794                     __ptext12:	
  3105 ;; *************** function _external *****************
  3106 ;; Defined at:
  3107 ;;		line 452 in file "newmain.c"
  3108 ;; Parameters:    Size  Location     Type
  3109 ;;		None
  3110 ;; Auto vars:     Size  Location     Type
  3111 ;;		None
  3112 ;; Return value:  Size  Location     Type
  3113 ;;                  1    wreg      void 
  3114 ;; Registers used:
  3115 ;;		wreg, status,2, status,0, pclath, cstack
  3116 ;; Tracked objects:
  3117 ;;		On entry : 0/0
  3118 ;;		On exit  : 0/0
  3119 ;;		Unchanged: 0/0
  3120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3121 ;;      Params:         0       0       0       0       0
  3122 ;;      Locals:         0       0       0       0       0
  3123 ;;      Temps:          3       0       0       0       0
  3124 ;;      Totals:         3       0       0       0       0
  3125 ;;Total ram usage:        3 bytes
  3126 ;; Hardware stack levels used:    1
  3127 ;; Hardware stack levels required when called:    2
  3128 ;; This function calls:
  3129 ;;		i1_lcd_init
  3130 ;; This function is called by:
  3131 ;;		Interrupt level 1
  3132 ;; This function uses a non-reentrant model
  3133 ;;
  3134                           
  3135                           
  3136                           ;psect for function _external
  3137  0794                     _external:	
  3138                           
  3139                           ;newmain.c: 455: if (INTCONbits.INTF == 1) {
  3140  0794  1C8B               	btfss	11,1	;volatile
  3141  0795  2FA7               	goto	i1l156
  3142                           
  3143                           ;newmain.c: 456: INTCONbits.INTF = 0;
  3144  0796  108B               	bcf	11,1	;volatile
  3145                           
  3146                           ;newmain.c: 457: lcd_init();
  3147  0797  120A  118A  27DC  120A  118A  	fcall	i1_lcd_init
  3148                           
  3149                           ;newmain.c: 458: timing_flag = 1 + timing_flag ;
  3150  079C  1283               	bcf	3,5	;RP0=0, select bank0
  3151  079D  1303               	bcf	3,6	;RP1=0, select bank0
  3152  079E  0842               	movf	_timing_flag,w
  3153  079F  3E01               	addlw	1
  3154  07A0  00F3               	movwf	??_external
  3155  07A1  0873               	movf	??_external,w
  3156  07A2  00C2               	movwf	_timing_flag
  3157                           
  3158                           ;newmain.c: 459: if (timing_flag == 7 ) {
  3159  07A3  3007               	movlw	7
  3160  07A4  0642               	xorwf	_timing_flag,w
  3161  07A5  1903               	btfsc	3,2
  3162                           
  3163                           ;newmain.c: 460: timing_flag = 0;
  3164  07A6  01C2               	clrf	_timing_flag
  3165  07A7                     i1l156:	
  3166  07A7  0875               	movf	??_external+2,w
  3167  07A8  008A               	movwf	10
  3168  07A9  0E74               	swapf	(??_external+1)^(0+4294967168),w
  3169  07AA  0083               	movwf	3
  3170  07AB  0EFE               	swapf	126,f
  3171  07AC  0E7E               	swapf	126,w
  3172  07AD  0009               	retfie
  3173  07AE                     __end_of_external:	
  3174                           
  3175                           	psect	intentry
  3176  0004                     __pintentry:	
  3177                           ;incstack = 0
  3178                           ; Regs used in _external: [wreg+status,2+status,0+pclath+cstack]
  3179                           
  3180  0004                     interrupt_function:	
  3181  007E                     saved_w	set	btemp
  3182  0004  00FE               	movwf	btemp
  3183  0005  0E03               	swapf	3,w
  3184  0006  00F4               	movwf	??_external+1
  3185  0007  080A               	movf	10,w
  3186  0008  00F5               	movwf	??_external+2
  3187  0009  120A  118A  2F94   	ljmp	_external
  3188                           
  3189                           	psect	text13
  3190  07DC                     __ptext13:	
  3191 ;; *************** function i1_lcd_init *****************
  3192 ;; Defined at:
  3193 ;;		line 78 in file "newmain.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;		None
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;		None
  3198 ;; Return value:  Size  Location     Type
  3199 ;;                  1    wreg      void 
  3200 ;; Registers used:
  3201 ;;		wreg, status,2, status,0, pclath, cstack
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3207 ;;      Params:         0       0       0       0       0
  3208 ;;      Locals:         0       0       0       0       0
  3209 ;;      Temps:          0       0       0       0       0
  3210 ;;      Totals:         0       0       0       0       0
  3211 ;;Total ram usage:        0 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; Hardware stack levels required when called:    1
  3214 ;; This function calls:
  3215 ;;		i1_lcd_command
  3216 ;; This function is called by:
  3217 ;;		_external
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           
  3222                           ;psect for function i1_lcd_init
  3223  07DC                     i1_lcd_init:	
  3224                           
  3225                           ;newmain.c: 79: lcd_command (0x38);
  3226                           
  3227                           ;incstack = 0
  3228                           ; Regs used in i1_lcd_init: [wreg+status,2+status,0+pclath+cstack]
  3229  07DC  3038               	movlw	56
  3230  07DD  120A  158A  27D5  120A  118A  	fcall	i1_lcd_command
  3231                           
  3232                           ;newmain.c: 80: lcd_command (0x06);
  3233  07E2  3006               	movlw	6
  3234  07E3  120A  158A  27D5  120A  118A  	fcall	i1_lcd_command
  3235                           
  3236                           ;newmain.c: 81: lcd_command (0x0c);
  3237  07E8  300C               	movlw	12
  3238  07E9  120A  158A  27D5  120A  118A  	fcall	i1_lcd_command
  3239                           
  3240                           ;newmain.c: 82: lcd_command (0x01);
  3241  07EE  3001               	movlw	1
  3242  07EF  120A  158A  27D5   	fcall	i1_lcd_command
  3243  07F2  0008               	return
  3244  07F3                     __end_ofi1_lcd_init:	
  3245                           
  3246                           	psect	text14
  3247  0FD5                     __ptext14:	
  3248 ;; *************** function i1_lcd_command *****************
  3249 ;; Defined at:
  3250 ;;		line 94 in file "newmain.c"
  3251 ;; Parameters:    Size  Location     Type
  3252 ;;  cmd             1    wreg     unsigned char 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;  cmd             1    2[COMMON] unsigned char 
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  1    wreg      void 
  3257 ;; Registers used:
  3258 ;;		wreg
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3264 ;;      Params:         0       0       0       0       0
  3265 ;;      Locals:         1       0       0       0       0
  3266 ;;      Temps:          2       0       0       0       0
  3267 ;;      Totals:         3       0       0       0       0
  3268 ;;Total ram usage:        3 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; This function calls:
  3271 ;;		Nothing
  3272 ;; This function is called by:
  3273 ;;		i1_lcd_init
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           
  3278                           ;psect for function i1_lcd_command
  3279  0FD5                     i1_lcd_command:	
  3280                           
  3281                           ;incstack = 0
  3282                           ; Regs used in i1_lcd_command: [wreg]
  3283                           ;i1lcd_command@cmd stored from wreg
  3284  0FD5  00F2               	movwf	i1lcd_command@cmd
  3285                           
  3286                           ;newmain.c: 95: PORTD = cmd;
  3287  0FD6  0872               	movf	i1lcd_command@cmd,w
  3288  0FD7  1283               	bcf	3,5	;RP0=0, select bank0
  3289  0FD8  1303               	bcf	3,6	;RP1=0, select bank0
  3290  0FD9  0088               	movwf	8	;volatile
  3291                           
  3292                           ;newmain.c: 96: PORTBbits.RB1 = 0;
  3293  0FDA  1086               	bcf	6,1	;volatile
  3294                           
  3295                           ;newmain.c: 97: PORTBbits.RB2 = 0;
  3296  0FDB  1106               	bcf	6,2	;volatile
  3297                           
  3298                           ;newmain.c: 98: PORTBbits.RB3 =1;
  3299  0FDC  1586               	bsf	6,3	;volatile
  3300                           
  3301                           ;newmain.c: 99: _delay((unsigned long)((2)*(20000000/4000.0)));
  3302  0FDD  300D               	movlw	13
  3303  0FDE  00F1               	movwf	??i1_lcd_command+1
  3304  0FDF  30FB               	movlw	251
  3305  0FE0  00F0               	movwf	??i1_lcd_command
  3306  0FE1                     u229_27:	
  3307  0FE1  0BF0               	decfsz	??i1_lcd_command,f
  3308  0FE2  2FE1               	goto	u229_27
  3309  0FE3  0BF1               	decfsz	??i1_lcd_command+1,f
  3310  0FE4  2FE1               	goto	u229_27
  3311  0FE5  2FE6               	nop2
  3312                           
  3313                           ;newmain.c: 100: PORTBbits.RB3 =0 ;
  3314  0FE6  1283               	bcf	3,5	;RP0=0, select bank0
  3315  0FE7  1303               	bcf	3,6	;RP1=0, select bank0
  3316  0FE8  1186               	bcf	6,3	;volatile
  3317  0FE9  0008               	return
  3318  0FEA                     __end_ofi1_lcd_command:	
  3319  007E                     btemp	set	126	;btemp
  3320  007E                     wtemp0	set	126


Data Sizes:
    Strings     43
    Constant    0
    Data        0
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       8
    BANK0            80     34      41
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_string@str	PTR const unsigned char  size(1) Largest target is 7
		 -> STR_22(CODE[6]), STR_21(CODE[7]), STR_20(CODE[6]), STR_19(CODE[6]), 
		 -> STR_18(CODE[6]), STR_17(CODE[6]), STR_16(CODE[6]), STR_15(CODE[6]), 
		 -> STR_14(CODE[6]), STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[6]), 
		 -> STR_10(CODE[6]), STR_9(CODE[6]), STR_8(CODE[6]), STR_7(CODE[6]), 
		 -> STR_6(CODE[6]), STR_5(CODE[6]), STR_4(CODE[6]), STR_3(CODE[6]), 
		 -> STR_2(CODE[6]), STR_1(CODE[7]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _external in COMMON

    i1_lcd_init->i1_lcd_command

Critical Paths under _main in BANK0

    _main->_set_timing
    _set_timing->_decimal_to_bcd
    _lcd_string->_lcd_data
    _lcd_init->_lcd_command
    _decimal_to_bcd->___awdiv
    _bcd_to_decimal->___bmul
    _bcd_to_ascii->_lcd_data

Critical Paths under _external in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _external in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _external in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _external in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   10144
                                             31 BANK0      3     3      0
                       _bcd_to_ascii
                        _lcd_command
                           _lcd_init
                         _lcd_string
                         _set_timing
 ---------------------------------------------------------------------------------
 (1) _set_timing                                          15    15      0    6818
                                             16 BANK0     15    15      0
                       _bcd_to_ascii
                     _bcd_to_decimal
                     _decimal_to_bcd
                        _lcd_command
                           _lcd_init
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _lcd_string                                           4     3      1    2933
                                              3 BANK0      4     3      1
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             0     0      0      31
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _lcd_command                                          3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _decimal_to_bcd                                       7     7      0    1402
                                              9 BANK0      7     7      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     613
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     625
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _bcd_to_decimal                                       4     4      0     458
                                              4 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     226
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _bcd_to_ascii                                         4     4      0     331
                                              3 BANK0      4     4      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (3) _lcd_data                                             3     3      0      31
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _external                                             3     3      0      22
                                              3 COMMON     3     3      0
                         i1_lcd_init
 ---------------------------------------------------------------------------------
 (5) i1_lcd_init                                           0     0      0      22
                      i1_lcd_command
 ---------------------------------------------------------------------------------
 (6) i1_lcd_command                                        3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _bcd_to_ascii
     _lcd_data
   _lcd_command
   _lcd_init
     _lcd_command
   _lcd_string
     _lcd_data
   _set_timing
     _bcd_to_ascii
       _lcd_data
     _bcd_to_decimal
       ___bmul
     _decimal_to_bcd
       ___awdiv
       ___awmod
     _lcd_command
     _lcd_init
       _lcd_command
     _lcd_string
       _lcd_data

 _external (ROOT)
   i1_lcd_init
     i1_lcd_command

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      31       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     22      29       5       51.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      31      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Oct 24 09:20:57 2023

                           pc 0002                  lcd_data@data 0022                ___bmul@product 0022  
                 __CFG_CP$OFF 0000                            l92 0102                            l84 00AB  
                          l95 0170                            l89 00F7                  ___awdiv@sign 0026  
                          fsr 0004        set_timing@bcd_val_date 0036        set_timing@bcd_val_hour 0035  
      set_timing@bcd_val_year 0038                _decimal_to_bcd 06A2                   __CFG_LVP$ON 0000  
                         l100 01BC                           l111 0281                           l103 01C7  
                         l122 0346                           l114 028C                           l106 0235  
                         l133 040B                           l125 0351                           l117 02FA  
                         l144 04D0                           l136 0416                           l128 03BF  
                         l147 04DB                           l139 0484                  __CFG_CPD$OFF 0000  
                         fsr0 0004                  ___awmod@sign 0026       set_timing@bcd_val_month 0037  
                  i1_lcd_init 07DC                          l2022 0650                          l2014 063D  
                        l2006 0619                          l2008 0627                          l2018 0648  
                        l2034 0661                          l2060 069D                          l2052 068A  
                        l2046 066E                          l2038 0668                          l2048 067C  
                        l2056 0695                          l2072 077C                          l2320 0342  
                        l2216 01B8                          l2340 038F                          l2236 0205  
                        l2164 00F3                          l2424 04CC                          l2184 0140  
                        l2442 0074                          l2372 0407                          l2268 027D  
                        l2444 0079                          l2508 05B7                          l2446 0515  
                        l2392 0454                          l2288 02CA                          l1970 0FC6  
                        l1974 0FCC                          l1990 0606                          l1996 0611  
                        STR_1 071E                          STR_2 073D                          STR_3 0725  
                        STR_4 0725                          STR_5 0725                          STR_6 072B  
                        STR_7 072B                          STR_8 072B                          STR_9 0743  
                        u2207 030C                          u2127 05CD                          u1505 0628  
                        u2217 0359                          u2137 05E9                          u1515 0634  
                        u2227 03D1                          u2147 00BD                          u1525 063E  
                        u1605 0682                          u2237 041E                          u2157 010A  
                        u1615 068B                          u2247 0496                          u2167 0182  
                        u2257 04E3                          u2177 01CF                          u2267 0567  
                        u2187 0247                          u1485 061C                          u2277 0FF8  
                        u2197 0294                          u2287 07D3                          u1655 06EF  
                        u1665 0758                          u1585 0671                          u1675 06D4  
                __CFG_WRT$OFF 0000                          _main 056E                          btemp 007E  
                        start 000C                   lcd_string@i 0025      set_timing@bcd_val_minute 0034  
    set_timing@bcd_val_second 0033             ___bmul@multiplier 0023        __end_of_decimal_to_bcd 06E0  
                       ?_main 0070               __end_of___awdiv 0655                         STR_10 0725  
                       STR_11 0725                         STR_20 0737                         STR_12 073D  
                       STR_13 073D                         STR_21 071E                         STR_22 073D  
                       STR_14 073D                         STR_15 0731                         STR_16 0725  
                       STR_17 0725                 __CFG_WDTE$OFF 0000                         STR_18 0737  
                       STR_19 0737               __end_of___awmod 06A2               ___awdiv@divisor 0020  
                       i1l156 07A7               ___awdiv@counter 0025         __size_of_bcd_to_ascii 0038  
                       _PORTD 0008                         _TRISC 0087                         _TRISD 0088  
                       ___day 0077                         ___con 0076                __CFG_BOREN$OFF 0000  
                       pclath 000A                         status 0003                         wtemp0 007E  
             __initialization 000F                  __end_of_main 05FA                  _bcd_to_ascii 06E0  
             ?_decimal_to_bcd 0070                        ??_main 003F                lcd_command@cmd 0022  
      __size_ofi1_lcd_command 0015                   ?i1_lcd_init 0070              ___awdiv@dividend 0022  
set_timing@decimal_val_minute 0039  set_timing@decimal_val_second 003E                        u229_27 0FE1  
              __CFG_PWRTE$OFF 0000              __end_of_lcd_data 07DC              __end_of_lcd_init 07C5  
        __size_of_lcd_command 0016                        ___date 0045                        ___bmul 0FC2  
                      ___hour 0046                        ___year 0043                     ??___awdiv 0024  
                   ??___awmod 0024              ___awdiv@quotient 0027               ___awmod@divisor 0020  
             ___awmod@counter 0025              __end_of_external 07AE                        saved_w 007E  
               lcd_string@num 0023               __CFG_FOSC$EXTRC 0000                 lcd_string@str 0026  
     __end_of__initialization 001A                 i1_lcd_command 0FD5           ___bmul@multiplicand 0020  
              __pcstackCOMMON 0070           __size_ofi1_lcd_init 0017                _OPTION_REGbits 0081  
                  __pbssBANK0 0042                ?i1_lcd_command 0070                    __pmaintext 056E  
                     ?___bmul 0020             bcd_to_decimal@dec 0027                    __pintentry 0004  
             bcd_to_ascii@bcd 0026           bcd_to_decimal@value 0026       __size_of_bcd_to_decimal 002F  
                   ?_lcd_data 0070                    _lcd_string 0778                     ?_lcd_init 0070  
                  __stringtab 0718             bcd_to_ascii@value 0025                     ?_external 0070  
            ??_decimal_to_bcd 0029               __size_of___bmul 0013                       ___awdiv 05FA  
                     ___awmod 0655                       ___month 0044                       __ptext1 001E  
                     __ptext2 0778                       __ptext3 07AE                       __ptext4 0FEA  
                     __ptext5 06A2                       __ptext6 0655                       __ptext7 05FA  
                     __ptext8 0749                       __ptext9 0FC2              ___awmod@dividend 0022  
                ??i1_lcd_init 0073           decimal_to_bcd@value 002F                    ??_lcd_data 0020  
                  ??_lcd_init 0076          end_of_initialization 001A               ??i1_lcd_command 0070  
            i1lcd_command@cmd 0072                    ??_external 0073                    _set_timing 001E  
          __end_ofi1_lcd_init 07F3                     _PORTBbits 0006                     _TRISBbits 0086  
                 ?_lcd_string 0023                 ??_lcd_command 0020                __end_of___bmul 0FD5  
         start_initialization 000F                _bcd_to_decimal 0749                      ??___bmul 0021  
                 ?_set_timing 0070             decimal_to_bcd@hex 002E             decimal_to_bcd@lsb 002D  
           decimal_to_bcd@msb 002C           __end_of_lcd_command 1000           __size_of_lcd_string 001C  
      __end_of_bcd_to_decimal 0778                   __pbssCOMMON 0076                     ___latbits 0002  
               __pcstackBANK0 0020             __size_of_lcd_data 0017             __size_of_lcd_init 0017  
           __size_of_external 001A                 ?_bcd_to_ascii 0070                      ?___awdiv 0020  
                    ?___awmod 0020                     __pstrings 0718               ?_bcd_to_decimal 0070  
         __size_of_set_timing 0550             interrupt_function 0004                   _lcd_command 0FEA  
              ??_bcd_to_ascii 0023                   __stringbase 071D                  ??_lcd_string 0024  
       __end_ofi1_lcd_command 0FEA   set_timing@decimal_val_month 003C              __size_of___awdiv 005B  
            __size_of___awmod 004D            __end_of_lcd_string 0794                      ___minute 0047  
          __end_of__stringtab 071E                      ___second 0048       __size_of_decimal_to_bcd 003E  
                    __ptext10 06E0                      __ptext11 07C5                      __ptext12 0794  
                    __ptext13 07DC                      __ptext14 0FD5                      _lcd_data 07C5  
                    _lcd_init 07AE                 __size_of_main 008C                      _external 0794  
                ??_set_timing 0030                    _INTCONbits 000B    set_timing@decimal_val_date 003B  
  set_timing@decimal_val_hour 003A    set_timing@decimal_val_year 003D          __end_of_bcd_to_ascii 0718  
                    intlevel1 0000            __end_of_set_timing 056E                     stringcode 0718  
            ??_bcd_to_decimal 0024                      stringdir 0718                      stringtab 0718  
                 _timing_flag 0042                  ?_lcd_command 0070  
