

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Oct 29 11:07:19 2023

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 2.05
    30                           ; Generated 20/12/2018 GMT
    31                           ; 
    32                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F877A Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  0007                     	;# 
    71  0008                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  000E                     	;# 
    79  000F                     	;# 
    80  0010                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0013                     	;# 
    84  0014                     	;# 
    85  0015                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0017                     	;# 
    89  0018                     	;# 
    90  0019                     	;# 
    91  001A                     	;# 
    92  001B                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  001D                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  0086                     	;# 
   101  0087                     	;# 
   102  0088                     	;# 
   103  0089                     	;# 
   104  008C                     	;# 
   105  008D                     	;# 
   106  008E                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0094                     	;# 
   111  0098                     	;# 
   112  0099                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  010C                     	;# 
   118  010D                     	;# 
   119  010E                     	;# 
   120  010F                     	;# 
   121  018C                     	;# 
   122  018D                     	;# 
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000D                     	;# 
   137  000E                     	;# 
   138  000E                     	;# 
   139  000F                     	;# 
   140  0010                     	;# 
   141  0011                     	;# 
   142  0012                     	;# 
   143  0013                     	;# 
   144  0014                     	;# 
   145  0015                     	;# 
   146  0015                     	;# 
   147  0016                     	;# 
   148  0017                     	;# 
   149  0018                     	;# 
   150  0019                     	;# 
   151  001A                     	;# 
   152  001B                     	;# 
   153  001B                     	;# 
   154  001C                     	;# 
   155  001D                     	;# 
   156  001E                     	;# 
   157  001F                     	;# 
   158  0081                     	;# 
   159  0085                     	;# 
   160  0086                     	;# 
   161  0087                     	;# 
   162  0088                     	;# 
   163  0089                     	;# 
   164  008C                     	;# 
   165  008D                     	;# 
   166  008E                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0093                     	;# 
   170  0094                     	;# 
   171  0098                     	;# 
   172  0099                     	;# 
   173  009C                     	;# 
   174  009D                     	;# 
   175  009E                     	;# 
   176  009F                     	;# 
   177  010C                     	;# 
   178  010D                     	;# 
   179  010E                     	;# 
   180  010F                     	;# 
   181  018C                     	;# 
   182  018D                     	;# 
   183  0014                     _SSPCON	set	20
   184  000B                     _INTCONbits	set	11
   185  0013                     _SSPBUF	set	19
   186  000C                     _PIR1bits	set	12
   187  0006                     _PORTBbits	set	6
   188  0008                     _PORTD	set	8
   189  0063                     _SSPIF	set	99
   190  0086                     _TRISBbits	set	134
   191  0088                     _TRISD	set	136
   192  0087                     _TRISC	set	135
   193  0093                     _SSPADD	set	147
   194  0081                     _OPTION_REGbits	set	129
   195  0094                     _SSPSTATbits	set	148
   196  0091                     _SSPCON2bits	set	145
   197  048C                     _ACKEN	set	1164
   198  0489                     _RSEN	set	1161
   199  048A                     _PEN	set	1162
   200  0488                     _SEN	set	1160
   201                           
   202                           	psect	strings
   203  0800                     __pstrings:	
   204  0800                     stringtab:	
   205  0800                     __stringtab:	
   206  0800                     stringcode:	
   207                           ;	String table - string pointers are 1 byte each
   208                           
   209  0800                     stringdir:	
   210  0800  3008               	movlw	high stringdir
   211  0801  008A               	movwf	10
   212  0802  0804               	movf	4,w
   213  0803  0A84               	incf	4,f
   214  0804  0782               	addwf	2,f
   215  0805                     __stringbase:	
   216  0805  3400               	retlw	0
   217  0806                     __end_of__stringtab:	
   218  0806                     STR_1:	
   219  0806  3443               	retlw	67	;'C'
   220  0807  344C               	retlw	76	;'L'
   221  0808  344F               	retlw	79	;'O'
   222  0809  3443               	retlw	67	;'C'
   223  080A  344B               	retlw	75	;'K'
   224  080B  343A               	retlw	58	;':'
   225  080C  3400               	retlw	0
   226  080D                     STR_3:	
   227  080D  3453               	retlw	83	;'S'
   228  080E  3445               	retlw	69	;'E'
   229  080F  3443               	retlw	67	;'C'
   230  0810  342E               	retlw	46	;'.'
   231  0811  343A               	retlw	58	;':'
   232  0812  3400               	retlw	0
   233  0813                     STR_4:	
   234  0813  344D               	retlw	77	;'M'
   235  0814  3449               	retlw	73	;'I'
   236  0815  344E               	retlw	78	;'N'
   237  0816  342E               	retlw	46	;'.'
   238  0817  343A               	retlw	58	;':'
   239  0818  3400               	retlw	0
   240  0819                     STR_13:	
   241  0819  344D               	retlw	77	;'M'
   242  081A  344F               	retlw	79	;'O'
   243  081B  344E               	retlw	78	;'N'
   244  081C  342E               	retlw	46	;'.'
   245  081D  343A               	retlw	58	;':'
   246  081E  3400               	retlw	0
   247  081F                     STR_16:	
   248  081F  3479               	retlw	121	;'y'
   249  0820  3465               	retlw	101	;'e'
   250  0821  3472               	retlw	114	;'r'
   251  0822  342E               	retlw	46	;'.'
   252  0823  343A               	retlw	58	;':'
   253  0824  3400               	retlw	0
   254  0825                     STR_2:	
   255  0825  3444               	retlw	68	;'D'
   256  0826  3441               	retlw	65	;'A'
   257  0827  3454               	retlw	84	;'T'
   258  0828  3445               	retlw	69	;'E'
   259  0829  343A               	retlw	58	;':'
   260  082A  3400               	retlw	0
   261  082B                     STR_7:	
   262  082B  3468               	retlw	104	;'h'
   263  082C  346F               	retlw	111	;'o'
   264  082D  3475               	retlw	117	;'u'
   265  082E  3472               	retlw	114	;'r'
   266  082F  343A               	retlw	58	;':'
   267  0830  3400               	retlw	0
   268  080D                     
   269                           ; #config settings
   270  0000                     
   271                           	psect	cinit
   272  000F                     start_initialization:	
   273  000F                     __initialization:	
   274                           
   275                           ; Clear objects allocated to BANK0
   276  000F  1283               	bcf	3,5	;RP0=0, select bank0
   277  0010  1303               	bcf	3,6	;RP1=0, select bank0
   278  0011  01C9               	clrf	__pbssBANK0& (0+127)
   279  0012  01CA               	clrf	(__pbssBANK0+1)& (0+127)
   280  0013  01CB               	clrf	(__pbssBANK0+2)& (0+127)
   281  0014  01CC               	clrf	(__pbssBANK0+3)& (0+127)
   282  0015  01CD               	clrf	(__pbssBANK0+4)& (0+127)
   283  0016  01CE               	clrf	(__pbssBANK0+5)& (0+127)
   284  0017  01CF               	clrf	(__pbssBANK0+6)& (0+127)
   285  0018  01D0               	clrf	(__pbssBANK0+7)& (0+127)
   286  0019  01D1               	clrf	(__pbssBANK0+8)& (0+127)
   287  001A                     end_of_initialization:	
   288                           ;End of C runtime variable initialization code
   289                           
   290  001A                     __end_of__initialization:	
   291  001A  0183               	clrf	3
   292  001B  120A  118A  2F35   	ljmp	_main	;jump to C main() function
   293                           
   294                           	psect	bssBANK0
   295  0049                     __pbssBANK0:	
   296  0049                     _timing_flag:	
   297  0049                     	ds	1
   298  004A                     ___con:	
   299  004A                     	ds	1
   300  004B                     ___year:	
   301  004B                     	ds	1
   302  004C                     ___month:	
   303  004C                     	ds	1
   304  004D                     ___date:	
   305  004D                     	ds	1
   306  004E                     ___day:	
   307  004E                     	ds	1
   308  004F                     ___hour:	
   309  004F                     	ds	1
   310  0050                     ___minute:	
   311  0050                     	ds	1
   312  0051                     ___second:	
   313  0051                     	ds	1
   314                           
   315                           	psect	cstackCOMMON
   316  0070                     __pcstackCOMMON:	
   317  0070                     ?_lcd_command:	
   318  0070                     ?_set_timing:	
   319                           ; 1 bytes @ 0x0
   320                           
   321  0070                     ?_lcd_init:	
   322                           ; 1 bytes @ 0x0
   323                           
   324  0070                     ?_lcd_data:	
   325                           ; 1 bytes @ 0x0
   326                           
   327  0070                     ?_bcd_to_ascii:	
   328                           ; 1 bytes @ 0x0
   329                           
   330  0070                     ?_bcd_to_decimal:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ?_decimal_to_bcd:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ?_main:	
   337                           ; 1 bytes @ 0x0
   338                           
   339  0070                     ?_external:	
   340                           ; 1 bytes @ 0x0
   341                           
   342  0070                     ?i1_lcd_init:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0070                     ?i1_lcd_command:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ??i1_lcd_command:	
   349                           ; 1 bytes @ 0x0
   350                           
   351                           
   352                           ; 1 bytes @ 0x0
   353  0070                     	ds	2
   354  0072                     i1lcd_command@cmd:	
   355                           
   356                           ; 1 bytes @ 0x2
   357  0072                     	ds	1
   358  0073                     ??_external:	
   359  0073                     ??i1_lcd_init:	
   360                           ; 1 bytes @ 0x3
   361                           
   362                           
   363                           ; 1 bytes @ 0x3
   364  0073                     	ds	3
   365  0076                     ??_lcd_command:	
   366  0076                     ??_lcd_data:	
   367                           ; 1 bytes @ 0x6
   368                           
   369  0076                     ?___bmul:	
   370                           ; 1 bytes @ 0x6
   371                           
   372  0076                     ??___awdiv:	
   373                           ; 1 bytes @ 0x6
   374                           
   375  0076                     ??___awmod:	
   376                           ; 1 bytes @ 0x6
   377                           
   378  0076                     ___bmul@multiplicand:	
   379                           ; 1 bytes @ 0x6
   380                           
   381                           
   382                           ; 1 bytes @ 0x6
   383  0076                     	ds	1
   384  0077                     ??_DS1307_write:	
   385  0077                     ??___bmul:	
   386                           ; 1 bytes @ 0x7
   387                           
   388  0077                     DS1307_write@_second:	
   389                           ; 1 bytes @ 0x7
   390                           
   391                           
   392                           ; 1 bytes @ 0x7
   393  0077                     	ds	1
   394  0078                     ??_lcd_init:	
   395                           
   396                           	psect	cstackBANK0
   397  0020                     __pcstackBANK0:	
   398                           ; 1 bytes @ 0x8
   399                           
   400  0020                     ?___awdiv:	
   401  0020                     ?___awmod:	
   402                           ; 2 bytes @ 0x0
   403                           
   404  0020                     lcd_data@data:	
   405                           ; 2 bytes @ 0x0
   406                           
   407  0020                     lcd_command@cmd:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0020                     ___bmul@product:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0020                     ___awdiv@divisor:	
   414                           ; 1 bytes @ 0x0
   415                           
   416  0020                     ___awmod@divisor:	
   417                           ; 2 bytes @ 0x0
   418                           
   419                           
   420                           ; 2 bytes @ 0x0
   421  0020                     	ds	1
   422  0021                     ?_lcd_string:	
   423  0021                     ??_bcd_to_ascii:	
   424                           ; 1 bytes @ 0x1
   425                           
   426  0021                     lcd_string@num:	
   427                           ; 1 bytes @ 0x1
   428                           
   429  0021                     ___bmul@multiplier:	
   430                           ; 1 bytes @ 0x1
   431                           
   432                           
   433                           ; 1 bytes @ 0x1
   434  0021                     	ds	1
   435  0022                     ??_lcd_string:	
   436  0022                     ??_bcd_to_decimal:	
   437                           ; 1 bytes @ 0x2
   438                           
   439  0022                     ___awdiv@dividend:	
   440                           ; 1 bytes @ 0x2
   441                           
   442  0022                     ___awmod@dividend:	
   443                           ; 2 bytes @ 0x2
   444                           
   445                           
   446                           ; 2 bytes @ 0x2
   447  0022                     	ds	1
   448  0023                     lcd_string@i:	
   449  0023                     bcd_to_ascii@value:	
   450                           ; 1 bytes @ 0x3
   451                           
   452                           
   453                           ; 1 bytes @ 0x3
   454  0023                     	ds	1
   455  0024                     lcd_string@str:	
   456  0024                     bcd_to_ascii@bcd:	
   457                           ; 1 bytes @ 0x4
   458                           
   459  0024                     bcd_to_decimal@value:	
   460                           ; 1 bytes @ 0x4
   461                           
   462  0024                     ___awdiv@counter:	
   463                           ; 1 bytes @ 0x4
   464                           
   465  0024                     ___awmod@counter:	
   466                           ; 1 bytes @ 0x4
   467                           
   468                           
   469                           ; 1 bytes @ 0x4
   470  0024                     	ds	1
   471  0025                     ?_DS1307_read:	
   472  0025                     bcd_to_decimal@dec:	
   473                           ; 1 bytes @ 0x5
   474                           
   475  0025                     DS1307_read@register_address:	
   476                           ; 1 bytes @ 0x5
   477                           
   478  0025                     ___awdiv@sign:	
   479                           ; 1 bytes @ 0x5
   480                           
   481  0025                     ___awmod@sign:	
   482                           ; 1 bytes @ 0x5
   483                           
   484                           
   485                           ; 1 bytes @ 0x5
   486  0025                     	ds	1
   487  0026                     ??_DS1307_read:	
   488  0026                     ___awdiv@quotient:	
   489                           ; 1 bytes @ 0x6
   490                           
   491                           
   492                           ; 2 bytes @ 0x6
   493  0026                     	ds	1
   494  0027                     DS1307_read@slave_address:	
   495                           
   496                           ; 1 bytes @ 0x7
   497  0027                     	ds	1
   498  0028                     ??_decimal_to_bcd:	
   499                           
   500                           ; 1 bytes @ 0x8
   501  0028                     	ds	3
   502  002B                     decimal_to_bcd@msb:	
   503                           
   504                           ; 1 bytes @ 0xB
   505  002B                     	ds	1
   506  002C                     decimal_to_bcd@lsb:	
   507                           
   508                           ; 1 bytes @ 0xC
   509  002C                     	ds	1
   510  002D                     decimal_to_bcd@hex:	
   511                           
   512                           ; 1 bytes @ 0xD
   513  002D                     	ds	1
   514  002E                     decimal_to_bcd@value:	
   515                           
   516                           ; 1 bytes @ 0xE
   517  002E                     	ds	1
   518  002F                     ?_DS1307_write:	
   519  002F                     DS1307_write@_minute:	
   520                           ; 1 bytes @ 0xF
   521                           
   522                           
   523                           ; 1 bytes @ 0xF
   524  002F                     	ds	1
   525  0030                     DS1307_write@_hour:	
   526                           
   527                           ; 1 bytes @ 0x10
   528  0030                     	ds	1
   529  0031                     DS1307_write@_day:	
   530                           
   531                           ; 1 bytes @ 0x11
   532  0031                     	ds	1
   533  0032                     DS1307_write@_date:	
   534                           
   535                           ; 1 bytes @ 0x12
   536  0032                     	ds	1
   537  0033                     DS1307_write@_month:	
   538                           
   539                           ; 1 bytes @ 0x13
   540  0033                     	ds	1
   541  0034                     DS1307_write@_year:	
   542                           
   543                           ; 1 bytes @ 0x14
   544  0034                     	ds	1
   545  0035                     ??_set_timing:	
   546                           
   547                           ; 1 bytes @ 0x15
   548  0035                     	ds	5
   549  003A                     set_timing@bcd_val_second:	
   550                           
   551                           ; 1 bytes @ 0x1A
   552  003A                     	ds	1
   553  003B                     set_timing@bcd_val_minute:	
   554                           
   555                           ; 1 bytes @ 0x1B
   556  003B                     	ds	1
   557  003C                     set_timing@bcd_val_hour:	
   558                           
   559                           ; 1 bytes @ 0x1C
   560  003C                     	ds	1
   561  003D                     set_timing@bcd_val_date:	
   562                           
   563                           ; 1 bytes @ 0x1D
   564  003D                     	ds	1
   565  003E                     set_timing@bcd_val_month:	
   566                           
   567                           ; 1 bytes @ 0x1E
   568  003E                     	ds	1
   569  003F                     set_timing@bcd_val_year:	
   570                           
   571                           ; 1 bytes @ 0x1F
   572  003F                     	ds	1
   573  0040                     set_timing@decimal_val_second:	
   574                           
   575                           ; 1 bytes @ 0x20
   576  0040                     	ds	1
   577  0041                     set_timing@decimal_val_minute:	
   578                           
   579                           ; 1 bytes @ 0x21
   580  0041                     	ds	1
   581  0042                     set_timing@decimal_val_hour:	
   582                           
   583                           ; 1 bytes @ 0x22
   584  0042                     	ds	1
   585  0043                     set_timing@decimal_val_date:	
   586                           
   587                           ; 1 bytes @ 0x23
   588  0043                     	ds	1
   589  0044                     set_timing@decimal_val_month:	
   590                           
   591                           ; 1 bytes @ 0x24
   592  0044                     	ds	1
   593  0045                     set_timing@decimal_val_year:	
   594                           
   595                           ; 1 bytes @ 0x25
   596  0045                     	ds	1
   597  0046                     ??_main:	
   598                           
   599                           ; 1 bytes @ 0x26
   600  0046                     	ds	3
   601                           
   602                           	psect	maintext
   603  0735                     __pmaintext:	
   604 ;;
   605 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   606 ;;
   607 ;; *************** function _main *****************
   608 ;; Defined at:
   609 ;;		line 33 in file "D_Clock.c"
   610 ;; Parameters:    Size  Location     Type
   611 ;;		None
   612 ;; Auto vars:     Size  Location     Type
   613 ;;		None
   614 ;; Return value:  Size  Location     Type
   615 ;;                  1    wreg      void 
   616 ;; Registers used:
   617 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   618 ;; Tracked objects:
   619 ;;		On entry : B00/0
   620 ;;		On exit  : 0/0
   621 ;;		Unchanged: 0/0
   622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   623 ;;      Params:         0       0       0       0       0
   624 ;;      Locals:         0       0       0       0       0
   625 ;;      Temps:          0       3       0       0       0
   626 ;;      Totals:         0       3       0       0       0
   627 ;;Total ram usage:        3 bytes
   628 ;; Hardware stack levels required when called:    7
   629 ;; This function calls:
   630 ;;		_DS1307_read
   631 ;;		_lcd_command
   632 ;;		_lcd_init
   633 ;;		_lcd_string
   634 ;;		_set_timing
   635 ;; This function is called by:
   636 ;;		Startup code after reset
   637 ;; This function uses a non-reentrant model
   638 ;;
   639                           
   640                           
   641                           ;psect for function _main
   642  0735                     _main:	
   643                           
   644                           ;D_Clock.c: 34: INTCONbits.GIE = 1;
   645                           
   646                           ;incstack = 0
   647                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   648  0735  178B               	bsf	11,7	;volatile
   649                           
   650                           ;D_Clock.c: 35: INTCONbits.PEIE = 1;
   651  0736  170B               	bsf	11,6	;volatile
   652                           
   653                           ;D_Clock.c: 36: INTCONbits.INTE = 1;
   654  0737  160B               	bsf	11,4	;volatile
   655                           
   656                           ;D_Clock.c: 37: OPTION_REGbits.INTEDG =1;
   657  0738  1683               	bsf	3,5	;RP0=1, select bank1
   658  0739  1303               	bcf	3,6	;RP1=0, select bank1
   659  073A  1701               	bsf	1,6	;volatile
   660                           
   661                           ;D_Clock.c: 39: SSPADD = 49 ;
   662  073B  3031               	movlw	49
   663  073C  0093               	movwf	19	;volatile
   664                           
   665                           ;D_Clock.c: 40: SSPCON = 0x28 ;
   666  073D  3028               	movlw	40
   667  073E  1283               	bcf	3,5	;RP0=0, select bank0
   668  073F  1303               	bcf	3,6	;RP1=0, select bank0
   669  0740  0094               	movwf	20	;volatile
   670                           
   671                           ;D_Clock.c: 42: TRISC = 0xff;
   672  0741  30FF               	movlw	255
   673  0742  1683               	bsf	3,5	;RP0=1, select bank1
   674  0743  1303               	bcf	3,6	;RP1=0, select bank1
   675  0744  0087               	movwf	7	;volatile
   676                           
   677                           ;D_Clock.c: 43: TRISD =0x00;
   678  0745  0188               	clrf	8	;volatile
   679                           
   680                           ;D_Clock.c: 44: PORTD = 0x00;
   681  0746  1283               	bcf	3,5	;RP0=0, select bank0
   682  0747  1303               	bcf	3,6	;RP1=0, select bank0
   683  0748  0188               	clrf	8	;volatile
   684                           
   685                           ;D_Clock.c: 45: TRISBbits.TRISB0 =1;
   686  0749  1683               	bsf	3,5	;RP0=1, select bank1
   687  074A  1303               	bcf	3,6	;RP1=0, select bank1
   688  074B  1406               	bsf	6,0	;volatile
   689                           
   690                           ;D_Clock.c: 46: TRISBbits.TRISB1 =0;
   691  074C  1086               	bcf	6,1	;volatile
   692                           
   693                           ;D_Clock.c: 47: TRISBbits.TRISB2 =0;
   694  074D  1106               	bcf	6,2	;volatile
   695                           
   696                           ;D_Clock.c: 48: TRISBbits.TRISB3 =0;
   697  074E  1186               	bcf	6,3	;volatile
   698                           
   699                           ;D_Clock.c: 49: TRISBbits.TRISB4 =1;
   700  074F  1606               	bsf	6,4	;volatile
   701                           
   702                           ;D_Clock.c: 50: TRISBbits.TRISB5 =1;
   703  0750  1686               	bsf	6,5	;volatile
   704                           
   705                           ;D_Clock.c: 51: TRISBbits.TRISB6 =1;
   706  0751  1706               	bsf	6,6	;volatile
   707                           
   708                           ;D_Clock.c: 54: lcd_init();
   709  0752  120A  158A  26B1  120A  118A  	fcall	_lcd_init
   710                           
   711                           ;D_Clock.c: 55: lcd_command (0x80);
   712  0757  3080               	movlw	128
   713  0758  120A  158A  2685  120A  118A  	fcall	_lcd_command
   714                           
   715                           ;D_Clock.c: 56: lcd_string ("CLOCK:",6);
   716  075D  3006               	movlw	6
   717  075E  1283               	bcf	3,5	;RP0=0, select bank0
   718  075F  1303               	bcf	3,6	;RP1=0, select bank0
   719  0760  00C6               	movwf	??_main
   720  0761  0846               	movf	??_main,w
   721  0762  00A1               	movwf	lcd_string@num
   722  0763  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   723  0764  120A  158A  26E4  120A  118A  	fcall	_lcd_string
   724                           
   725                           ;D_Clock.c: 57: lcd_command (0xc0) ;
   726  0769  30C0               	movlw	192
   727  076A  120A  158A  2685  120A  118A  	fcall	_lcd_command
   728                           
   729                           ;D_Clock.c: 58: lcd_string ("DATE:", 5) ;
   730  076F  3005               	movlw	5
   731  0770  1283               	bcf	3,5	;RP0=0, select bank0
   732  0771  1303               	bcf	3,6	;RP1=0, select bank0
   733  0772  00C6               	movwf	??_main
   734  0773  0846               	movf	??_main,w
   735  0774  00A1               	movwf	lcd_string@num
   736  0775  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   737  0776  120A  158A  26E4  120A  118A  	fcall	_lcd_string
   738                           
   739                           ;D_Clock.c: 59: _delay((unsigned long)((100)*(20000000/4000.0)));
   740  077B  3003               	movlw	3
   741  077C  1283               	bcf	3,5	;RP0=0, select bank0
   742  077D  1303               	bcf	3,6	;RP1=0, select bank0
   743  077E  00C8               	movwf	??_main+2
   744  077F  308A               	movlw	138
   745  0780  00C7               	movwf	??_main+1
   746  0781  3055               	movlw	85
   747  0782  00C6               	movwf	??_main
   748  0783                     u2317:	
   749  0783  0BC6               	decfsz	??_main,f
   750  0784  2F83               	goto	u2317
   751  0785  0BC7               	decfsz	??_main+1,f
   752  0786  2F83               	goto	u2317
   753  0787  0BC8               	decfsz	??_main+2,f
   754  0788  2F83               	goto	u2317
   755  0789                     l2216:	
   756                           
   757                           ;D_Clock.c: 62: {;D_Clock.c: 63: _delay((unsigned long)((20)*(20000000/4000.0)));
   758  0789  3082               	movlw	130
   759  078A  1283               	bcf	3,5	;RP0=0, select bank0
   760  078B  1303               	bcf	3,6	;RP1=0, select bank0
   761  078C  00C7               	movwf	??_main+1
   762  078D  30DD               	movlw	221
   763  078E  00C6               	movwf	??_main
   764  078F                     u2327:	
   765  078F  0BC6               	decfsz	??_main,f
   766  0790  2F8F               	goto	u2327
   767  0791  0BC7               	decfsz	??_main+1,f
   768  0792  2F8F               	goto	u2327
   769                           
   770                           ;D_Clock.c: 64: DS1307_read (0xd0, 0);
   771  0793  1283               	bcf	3,5	;RP0=0, select bank0
   772  0794  1303               	bcf	3,6	;RP1=0, select bank0
   773  0795  01A5               	clrf	DS1307_read@register_address
   774  0796  30D0               	movlw	208
   775  0797  120A  118A  25A7  120A  118A  	fcall	_DS1307_read
   776                           
   777                           ;D_Clock.c: 65: if(timing_flag > 0 ) {
   778  079C  1283               	bcf	3,5	;RP0=0, select bank0
   779  079D  1303               	bcf	3,6	;RP1=0, select bank0
   780  079E  0849               	movf	_timing_flag,w
   781  079F  1903               	btfsc	3,2
   782  07A0  2F89               	goto	l2216
   783                           
   784                           ;D_Clock.c: 66: set_timing ();
   785  07A1  120A  118A  201E  120A  118A  	fcall	_set_timing
   786  07A6  2F89               	goto	l2216
   787  07A7                     __end_of_main:	
   788                           
   789                           	psect	text1
   790  001E                     __ptext1:	
   791 ;; *************** function _set_timing *****************
   792 ;; Defined at:
   793 ;;		line 73 in file "D_Clock.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;		None
   796 ;; Auto vars:     Size  Location     Type
   797 ;;  decimal_val_    1   37[BANK0 ] unsigned char 
   798 ;;  decimal_val_    1   36[BANK0 ] unsigned char 
   799 ;;  decimal_val_    1   35[BANK0 ] unsigned char 
   800 ;;  decimal_val_    1   34[BANK0 ] unsigned char 
   801 ;;  decimal_val_    1   33[BANK0 ] unsigned char 
   802 ;;  decimal_val_    1   32[BANK0 ] unsigned char 
   803 ;;  bcd_val_year    1   31[BANK0 ] unsigned char 
   804 ;;  bcd_val_mont    1   30[BANK0 ] unsigned char 
   805 ;;  bcd_val_date    1   29[BANK0 ] unsigned char 
   806 ;;  bcd_val_hour    1   28[BANK0 ] unsigned char 
   807 ;;  bcd_val_minu    1   27[BANK0 ] unsigned char 
   808 ;;  bcd_val_seco    1   26[BANK0 ] unsigned char 
   809 ;; Return value:  Size  Location     Type
   810 ;;                  1    wreg      void 
   811 ;; Registers used:
   812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   813 ;; Tracked objects:
   814 ;;		On entry : 0/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   818 ;;      Params:         0       0       0       0       0
   819 ;;      Locals:         0      12       0       0       0
   820 ;;      Temps:          0       5       0       0       0
   821 ;;      Totals:         0      17       0       0       0
   822 ;;Total ram usage:       17 bytes
   823 ;; Hardware stack levels used:    1
   824 ;; Hardware stack levels required when called:    6
   825 ;; This function calls:
   826 ;;		_DS1307_write
   827 ;;		_bcd_to_ascii
   828 ;;		_bcd_to_decimal
   829 ;;		_decimal_to_bcd
   830 ;;		_lcd_command
   831 ;;		_lcd_init
   832 ;;		_lcd_string
   833 ;; This function is called by:
   834 ;;		_main
   835 ;; This function uses a non-reentrant model
   836 ;;
   837                           
   838                           
   839                           ;psect for function _set_timing
   840  001E                     _set_timing:	
   841                           
   842                           ;D_Clock.c: 75: unsigned char decimal_val_second ;;D_Clock.c: 76: unsigned char bcd_val_
      +                          second ;;D_Clock.c: 77: unsigned char decimal_val_minute ;;D_Clock.c: 78: unsigned char 
      +                          bcd_val_minute ;;D_Clock.c: 79: unsigned char decimal_val_hour ;;D_Clock.c: 80: unsigned
      +                           char bcd_val_hour ;;D_Clock.c: 81: unsigned char decimal_val_date ;;D_Clock.c: 82: unsi
      +                          gned char bcd_val_date ;;D_Clock.c: 83: unsigned char decimal_val_month ;;D_Clock.c: 84:
      +                           unsigned char bcd_val_month ;;D_Clock.c: 85: unsigned char decimal_val_year ;
   843                           
   844                           ;incstack = 0
   845                           ; Regs used in _set_timing: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   846  001E  1283               	bcf	3,5	;RP0=0, select bank0
   847  001F  1303               	bcf	3,6	;RP1=0, select bank0
   848  0020  0851               	movf	___second,w
   849  0021  120A  158A  2700  120A  118A  	fcall	_bcd_to_decimal
   850  0026  1283               	bcf	3,5	;RP0=0, select bank0
   851  0027  1303               	bcf	3,6	;RP1=0, select bank0
   852  0028  00B5               	movwf	??_set_timing
   853  0029  0835               	movf	??_set_timing,w
   854  002A  00C0               	movwf	set_timing@decimal_val_second
   855                           
   856                           ;D_Clock.c: 89: bcd_val_second =__second ;
   857  002B  0851               	movf	___second,w
   858  002C  00B5               	movwf	??_set_timing
   859  002D  0835               	movf	??_set_timing,w
   860  002E  00BA               	movwf	set_timing@bcd_val_second
   861                           
   862                           ;D_Clock.c: 90: decimal_val_minute = bcd_to_decimal (__minute) ;
   863  002F  0850               	movf	___minute,w
   864  0030  120A  158A  2700  120A  118A  	fcall	_bcd_to_decimal
   865  0035  1283               	bcf	3,5	;RP0=0, select bank0
   866  0036  1303               	bcf	3,6	;RP1=0, select bank0
   867  0037  00B5               	movwf	??_set_timing
   868  0038  0835               	movf	??_set_timing,w
   869  0039  00C1               	movwf	set_timing@decimal_val_minute
   870                           
   871                           ;D_Clock.c: 91: bcd_val_minute =__minute ;
   872  003A  0850               	movf	___minute,w
   873  003B  00B5               	movwf	??_set_timing
   874  003C  0835               	movf	??_set_timing,w
   875  003D  00BB               	movwf	set_timing@bcd_val_minute
   876                           
   877                           ;D_Clock.c: 92: decimal_val_hour = bcd_to_decimal (__hour) ;
   878  003E  084F               	movf	___hour,w
   879  003F  120A  158A  2700  120A  118A  	fcall	_bcd_to_decimal
   880  0044  1283               	bcf	3,5	;RP0=0, select bank0
   881  0045  1303               	bcf	3,6	;RP1=0, select bank0
   882  0046  00B5               	movwf	??_set_timing
   883  0047  0835               	movf	??_set_timing,w
   884  0048  00C2               	movwf	set_timing@decimal_val_hour
   885                           
   886                           ;D_Clock.c: 93: bcd_val_hour =__hour ;
   887  0049  084F               	movf	___hour,w
   888  004A  00B5               	movwf	??_set_timing
   889  004B  0835               	movf	??_set_timing,w
   890  004C  00BC               	movwf	set_timing@bcd_val_hour
   891                           
   892                           ;D_Clock.c: 94: decimal_val_date = bcd_to_decimal (__date) ;
   893  004D  084D               	movf	___date,w
   894  004E  120A  158A  2700  120A  118A  	fcall	_bcd_to_decimal
   895  0053  1283               	bcf	3,5	;RP0=0, select bank0
   896  0054  1303               	bcf	3,6	;RP1=0, select bank0
   897  0055  00B5               	movwf	??_set_timing
   898  0056  0835               	movf	??_set_timing,w
   899  0057  00C3               	movwf	set_timing@decimal_val_date
   900                           
   901                           ;D_Clock.c: 95: bcd_val_date =__date ;
   902  0058  084D               	movf	___date,w
   903  0059  00B5               	movwf	??_set_timing
   904  005A  0835               	movf	??_set_timing,w
   905  005B  00BD               	movwf	set_timing@bcd_val_date
   906                           
   907                           ;D_Clock.c: 96: decimal_val_month = bcd_to_decimal (__month) ;
   908  005C  084C               	movf	___month,w
   909  005D  120A  158A  2700  120A  118A  	fcall	_bcd_to_decimal
   910  0062  1283               	bcf	3,5	;RP0=0, select bank0
   911  0063  1303               	bcf	3,6	;RP1=0, select bank0
   912  0064  00B5               	movwf	??_set_timing
   913  0065  0835               	movf	??_set_timing,w
   914  0066  00C4               	movwf	set_timing@decimal_val_month
   915                           
   916                           ;D_Clock.c: 97: bcd_val_month =__month ;
   917  0067  084C               	movf	___month,w
   918  0068  00B5               	movwf	??_set_timing
   919  0069  0835               	movf	??_set_timing,w
   920  006A  00BE               	movwf	set_timing@bcd_val_month
   921                           
   922                           ;D_Clock.c: 98: decimal_val_year = bcd_to_decimal (__year) ;
   923  006B  084B               	movf	___year,w
   924  006C  120A  158A  2700  120A  118A  	fcall	_bcd_to_decimal
   925  0071  1283               	bcf	3,5	;RP0=0, select bank0
   926  0072  1303               	bcf	3,6	;RP1=0, select bank0
   927  0073  00B5               	movwf	??_set_timing
   928  0074  0835               	movf	??_set_timing,w
   929  0075  00C5               	movwf	set_timing@decimal_val_year
   930                           
   931                           ;D_Clock.c: 99: bcd_val_year =__year ;
   932  0076  084B               	movf	___year,w
   933  0077  00B5               	movwf	??_set_timing
   934  0078  0835               	movf	??_set_timing,w
   935  0079  00BF               	movwf	set_timing@bcd_val_year
   936  007A                     l2162:	
   937                           
   938                           ;D_Clock.c: 361: lcd_init ();
   939  007A  120A  158A  26B1  120A  118A  	fcall	_lcd_init
   940  007F                     l2164:	
   941  007F  1283               	bcf	3,5	;RP0=0, select bank0
   942  0080  1303               	bcf	3,6	;RP1=0, select bank0
   943  0081  1B06               	btfsc	6,6	;volatile
   944  0082  2D4A               	goto	l2166
   945                           
   946                           ;D_Clock.c: 104: {;D_Clock.c: 106: if (timing_flag == 1)
   947                           
   948                           ;D_Clock.c: 103: while (PORTBbits.RB6 == 0)
   949                           
   950                           ;D_Clock.c: 101: lcd_init ();
   951  0083  0349               	decf	_timing_flag,w
   952  0084  1D03               	btfss	3,2
   953  0085  292F               	goto	l1894
   954                           
   955                           ;D_Clock.c: 107: {;D_Clock.c: 108: lcd_command(0x01);
   956  0086  3001               	movlw	1
   957  0087  120A  158A  2685  120A  118A  	fcall	_lcd_command
   958                           
   959                           ;D_Clock.c: 109: lcd_command (0x83);
   960  008C  3083               	movlw	131
   961  008D  120A  158A  2685  120A  118A  	fcall	_lcd_command
   962                           
   963                           ;D_Clock.c: 110: lcd_string ("SEC.:",5);
   964  0092  3005               	movlw	5
   965  0093  1283               	bcf	3,5	;RP0=0, select bank0
   966  0094  1303               	bcf	3,6	;RP1=0, select bank0
   967  0095  00B5               	movwf	??_set_timing
   968  0096  0835               	movf	??_set_timing,w
   969  0097  00A1               	movwf	lcd_string@num
   970  0098  3008               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   971  0099  120A  158A  26E4  120A  118A  	fcall	_lcd_string
   972                           
   973                           ;D_Clock.c: 111: lcd_command (0x89) ;
   974  009E  3089               	movlw	137
   975  009F  120A  158A  2685  120A  118A  	fcall	_lcd_command
   976                           
   977                           ;D_Clock.c: 112: bcd_to_ascii (bcd_val_second) ;
   978  00A4  1283               	bcf	3,5	;RP0=0, select bank0
   979  00A5  1303               	bcf	3,6	;RP1=0, select bank0
   980  00A6  083A               	movf	set_timing@bcd_val_second,w
   981  00A7  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
   982                           
   983                           ;D_Clock.c: 113: _delay((unsigned long)((100)*(20000000/4000.0)));
   984  00AC  3003               	movlw	3
   985  00AD  1283               	bcf	3,5	;RP0=0, select bank0
   986  00AE  1303               	bcf	3,6	;RP1=0, select bank0
   987  00AF  00B7               	movwf	??_set_timing+2
   988  00B0  308A               	movlw	138
   989  00B1  00B6               	movwf	??_set_timing+1
   990  00B2  3055               	movlw	85
   991  00B3  00B5               	movwf	??_set_timing
   992  00B4                     u2337:	
   993  00B4  0BB5               	decfsz	??_set_timing,f
   994  00B5  28B4               	goto	u2337
   995  00B6  0BB6               	decfsz	??_set_timing+1,f
   996  00B7  28B4               	goto	u2337
   997  00B8  0BB7               	decfsz	??_set_timing+2,f
   998  00B9  28B4               	goto	u2337
   999                           
  1000                           ;D_Clock.c: 115: if(PORTBbits.RB4 == 1)
  1001  00BA  1283               	bcf	3,5	;RP0=0, select bank0
  1002  00BB  1303               	bcf	3,6	;RP1=0, select bank0
  1003  00BC  1E06               	btfss	6,4	;volatile
  1004  00BD  28F4               	goto	l1878
  1005  00BE                     l228:	
  1006  00BE  1A06               	btfsc	6,4	;volatile
  1007  00BF  28BE               	goto	l228
  1008                           
  1009                           ;D_Clock.c: 118: decimal_val_second ++ ;
  1010  00C0  3001               	movlw	1
  1011  00C1  00B5               	movwf	??_set_timing
  1012  00C2  0835               	movf	??_set_timing,w
  1013  00C3  07C0               	addwf	set_timing@decimal_val_second,f
  1014                           
  1015                           ;D_Clock.c: 119: if(decimal_val_second == 60)
  1016  00C4  303C               	movlw	60
  1017  00C5  0640               	xorwf	set_timing@decimal_val_second,w
  1018  00C6  1903               	btfsc	3,2
  1019                           
  1020                           ;D_Clock.c: 120: {;D_Clock.c: 121: decimal_val_second =0 ;
  1021  00C7  01C0               	clrf	set_timing@decimal_val_second
  1022                           
  1023                           ;D_Clock.c: 122: };D_Clock.c: 123: _delay((unsigned long)((100)*(20000000/4000.0)));
  1024  00C8  3003               	movlw	3
  1025  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  1026  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  1027  00CB  00B7               	movwf	??_set_timing+2
  1028  00CC  308A               	movlw	138
  1029  00CD  00B6               	movwf	??_set_timing+1
  1030  00CE  3055               	movlw	85
  1031  00CF  00B5               	movwf	??_set_timing
  1032  00D0                     u2347:	
  1033  00D0  0BB5               	decfsz	??_set_timing,f
  1034  00D1  28D0               	goto	u2347
  1035  00D2  0BB6               	decfsz	??_set_timing+1,f
  1036  00D3  28D0               	goto	u2347
  1037  00D4  0BB7               	decfsz	??_set_timing+2,f
  1038  00D5  28D0               	goto	u2347
  1039                           
  1040                           ;D_Clock.c: 126: lcd_command (0x89) ;
  1041  00D6  3089               	movlw	137
  1042  00D7  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1043                           
  1044                           ;D_Clock.c: 127: bcd_val_second = decimal_to_bcd (decimal_val_second);
  1045  00DC  1283               	bcf	3,5	;RP0=0, select bank0
  1046  00DD  1303               	bcf	3,6	;RP1=0, select bank0
  1047  00DE  0840               	movf	set_timing@decimal_val_second,w
  1048  00DF  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  1049  00E4  1283               	bcf	3,5	;RP0=0, select bank0
  1050  00E5  1303               	bcf	3,6	;RP1=0, select bank0
  1051  00E6  00B5               	movwf	??_set_timing
  1052  00E7  0835               	movf	??_set_timing,w
  1053  00E8  00BA               	movwf	set_timing@bcd_val_second
  1054                           
  1055                           ;D_Clock.c: 128: bcd_to_ascii (bcd_val_second) ;
  1056  00E9  083A               	movf	set_timing@bcd_val_second,w
  1057  00EA  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  1058                           
  1059                           ;D_Clock.c: 129: lcd_init ();
  1060  00EF  120A  158A  26B1  120A  118A  	fcall	_lcd_init
  1061  00F4                     l1878:	
  1062                           
  1063                           ;D_Clock.c: 130: };D_Clock.c: 131: if(PORTBbits.RB5 == 1)
  1064  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  1065  00F5  1303               	bcf	3,6	;RP1=0, select bank0
  1066  00F6  1E86               	btfss	6,5	;volatile
  1067  00F7  292F               	goto	l1894
  1068  00F8                     l233:	
  1069  00F8  1A86               	btfsc	6,5	;volatile
  1070  00F9  28F8               	goto	l233
  1071                           
  1072                           ;D_Clock.c: 134: decimal_val_second -- ;
  1073  00FA  3001               	movlw	1
  1074  00FB  02C0               	subwf	set_timing@decimal_val_second,f
  1075                           
  1076                           ;D_Clock.c: 135: if(decimal_val_second == 0)
  1077  00FC  0840               	movf	set_timing@decimal_val_second,w
  1078  00FD  1D03               	btfss	3,2
  1079  00FE  2903               	goto	l236
  1080                           
  1081                           ;D_Clock.c: 136: {;D_Clock.c: 137: decimal_val_second = 59 ;
  1082  00FF  303B               	movlw	59
  1083  0100  00B5               	movwf	??_set_timing
  1084  0101  0835               	movf	??_set_timing,w
  1085  0102  00C0               	movwf	set_timing@decimal_val_second
  1086  0103                     l236:	
  1087                           
  1088                           ;D_Clock.c: 138: };D_Clock.c: 139: _delay((unsigned long)((100)*(20000000/4000.0)));
  1089  0103  3003               	movlw	3
  1090  0104  1283               	bcf	3,5	;RP0=0, select bank0
  1091  0105  1303               	bcf	3,6	;RP1=0, select bank0
  1092  0106  00B7               	movwf	??_set_timing+2
  1093  0107  308A               	movlw	138
  1094  0108  00B6               	movwf	??_set_timing+1
  1095  0109  3055               	movlw	85
  1096  010A  00B5               	movwf	??_set_timing
  1097  010B                     u2357:	
  1098  010B  0BB5               	decfsz	??_set_timing,f
  1099  010C  290B               	goto	u2357
  1100  010D  0BB6               	decfsz	??_set_timing+1,f
  1101  010E  290B               	goto	u2357
  1102  010F  0BB7               	decfsz	??_set_timing+2,f
  1103  0110  290B               	goto	u2357
  1104                           
  1105                           ;D_Clock.c: 142: lcd_command (0x89) ;
  1106  0111  3089               	movlw	137
  1107  0112  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1108                           
  1109                           ;D_Clock.c: 143: bcd_val_second = decimal_to_bcd (decimal_val_second);
  1110  0117  1283               	bcf	3,5	;RP0=0, select bank0
  1111  0118  1303               	bcf	3,6	;RP1=0, select bank0
  1112  0119  0840               	movf	set_timing@decimal_val_second,w
  1113  011A  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  1114  011F  1283               	bcf	3,5	;RP0=0, select bank0
  1115  0120  1303               	bcf	3,6	;RP1=0, select bank0
  1116  0121  00B5               	movwf	??_set_timing
  1117  0122  0835               	movf	??_set_timing,w
  1118  0123  00BA               	movwf	set_timing@bcd_val_second
  1119                           
  1120                           ;D_Clock.c: 144: bcd_to_ascii (bcd_val_second) ;
  1121  0124  083A               	movf	set_timing@bcd_val_second,w
  1122  0125  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  1123                           
  1124                           ;D_Clock.c: 145: lcd_init ();
  1125  012A  120A  158A  26B1  120A  118A  	fcall	_lcd_init
  1126  012F                     l1894:	
  1127                           
  1128                           ;D_Clock.c: 146: };D_Clock.c: 148: };D_Clock.c: 150: if (timing_flag == 2)
  1129  012F  3002               	movlw	2
  1130  0130  1283               	bcf	3,5	;RP0=0, select bank0
  1131  0131  1303               	bcf	3,6	;RP1=0, select bank0
  1132  0132  0649               	xorwf	_timing_flag,w
  1133  0133  1D03               	btfss	3,2
  1134  0134  2A02               	goto	l1948
  1135                           
  1136                           ;D_Clock.c: 151: {;D_Clock.c: 152: lcd_command(0x01);
  1137  0135  3001               	movlw	1
  1138  0136  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1139                           
  1140                           ;D_Clock.c: 153: lcd_command (0x83);
  1141  013B  3083               	movlw	131
  1142  013C  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1143                           
  1144                           ;D_Clock.c: 154: lcd_string ("MIN.:",5);
  1145  0141  3005               	movlw	5
  1146  0142  1283               	bcf	3,5	;RP0=0, select bank0
  1147  0143  1303               	bcf	3,6	;RP1=0, select bank0
  1148  0144  00B5               	movwf	??_set_timing
  1149  0145  0835               	movf	??_set_timing,w
  1150  0146  00A1               	movwf	lcd_string@num
  1151  0147  300E               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1152  0148  120A  158A  26E4  120A  118A  	fcall	_lcd_string
  1153                           
  1154                           ;D_Clock.c: 155: lcd_command (0x89) ;
  1155  014D  3089               	movlw	137
  1156  014E  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1157                           
  1158                           ;D_Clock.c: 156: bcd_to_ascii (bcd_val_minute) ;
  1159  0153  1283               	bcf	3,5	;RP0=0, select bank0
  1160  0154  1303               	bcf	3,6	;RP1=0, select bank0
  1161  0155  083B               	movf	set_timing@bcd_val_minute,w
  1162  0156  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  1163                           
  1164                           ;D_Clock.c: 157: _delay((unsigned long)((100)*(20000000/4000.0)));
  1165  015B  3003               	movlw	3
  1166  015C  1283               	bcf	3,5	;RP0=0, select bank0
  1167  015D  1303               	bcf	3,6	;RP1=0, select bank0
  1168  015E  00B7               	movwf	??_set_timing+2
  1169  015F  308A               	movlw	138
  1170  0160  00B6               	movwf	??_set_timing+1
  1171  0161  3055               	movlw	85
  1172  0162  00B5               	movwf	??_set_timing
  1173  0163                     u2367:	
  1174  0163  0BB5               	decfsz	??_set_timing,f
  1175  0164  2963               	goto	u2367
  1176  0165  0BB6               	decfsz	??_set_timing+1,f
  1177  0166  2963               	goto	u2367
  1178  0167  0BB7               	decfsz	??_set_timing+2,f
  1179  0168  2963               	goto	u2367
  1180                           
  1181                           ;D_Clock.c: 159: if(PORTBbits.RB4 == 1)
  1182  0169  1283               	bcf	3,5	;RP0=0, select bank0
  1183  016A  1303               	bcf	3,6	;RP1=0, select bank0
  1184  016B  1E06               	btfss	6,4	;volatile
  1185  016C  29B5               	goto	l1928
  1186  016D                     l239:	
  1187  016D  1A06               	btfsc	6,4	;volatile
  1188  016E  296D               	goto	l239
  1189                           
  1190                           ;D_Clock.c: 162: decimal_val_minute ++ ;
  1191  016F  3001               	movlw	1
  1192  0170  00B5               	movwf	??_set_timing
  1193  0171  0835               	movf	??_set_timing,w
  1194  0172  07C1               	addwf	set_timing@decimal_val_minute,f
  1195                           
  1196                           ;D_Clock.c: 163: if(decimal_val_minute == 60)
  1197  0173  303C               	movlw	60
  1198  0174  0641               	xorwf	set_timing@decimal_val_minute,w
  1199  0175  1903               	btfsc	3,2
  1200                           
  1201                           ;D_Clock.c: 164: {;D_Clock.c: 165: decimal_val_minute =0 ;
  1202  0176  01C1               	clrf	set_timing@decimal_val_minute
  1203                           
  1204                           ;D_Clock.c: 166: };D_Clock.c: 167: _delay((unsigned long)((100)*(20000000/4000.0)));
  1205  0177  3003               	movlw	3
  1206  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1207  0179  1303               	bcf	3,6	;RP1=0, select bank0
  1208  017A  00B7               	movwf	??_set_timing+2
  1209  017B  308A               	movlw	138
  1210  017C  00B6               	movwf	??_set_timing+1
  1211  017D  3055               	movlw	85
  1212  017E  00B5               	movwf	??_set_timing
  1213  017F                     u2377:	
  1214  017F  0BB5               	decfsz	??_set_timing,f
  1215  0180  297F               	goto	u2377
  1216  0181  0BB6               	decfsz	??_set_timing+1,f
  1217  0182  297F               	goto	u2377
  1218  0183  0BB7               	decfsz	??_set_timing+2,f
  1219  0184  297F               	goto	u2377
  1220                           
  1221                           ;D_Clock.c: 168: lcd_command (0x83);
  1222  0185  3083               	movlw	131
  1223  0186  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1224                           
  1225                           ;D_Clock.c: 169: lcd_string ("MIN.:",5);
  1226  018B  3005               	movlw	5
  1227  018C  1283               	bcf	3,5	;RP0=0, select bank0
  1228  018D  1303               	bcf	3,6	;RP1=0, select bank0
  1229  018E  00B5               	movwf	??_set_timing
  1230  018F  0835               	movf	??_set_timing,w
  1231  0190  00A1               	movwf	lcd_string@num
  1232  0191  300E               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1233  0192  120A  158A  26E4  120A  118A  	fcall	_lcd_string
  1234                           
  1235                           ;D_Clock.c: 170: lcd_command (0x89) ;
  1236  0197  3089               	movlw	137
  1237  0198  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1238                           
  1239                           ;D_Clock.c: 171: bcd_val_minute = decimal_to_bcd (decimal_val_minute);
  1240  019D  1283               	bcf	3,5	;RP0=0, select bank0
  1241  019E  1303               	bcf	3,6	;RP1=0, select bank0
  1242  019F  0841               	movf	set_timing@decimal_val_minute,w
  1243  01A0  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  1244  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  1245  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  1246  01A7  00B5               	movwf	??_set_timing
  1247  01A8  0835               	movf	??_set_timing,w
  1248  01A9  00BB               	movwf	set_timing@bcd_val_minute
  1249                           
  1250                           ;D_Clock.c: 172: bcd_to_ascii (bcd_val_minute) ;
  1251  01AA  083B               	movf	set_timing@bcd_val_minute,w
  1252  01AB  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  1253                           
  1254                           ;D_Clock.c: 173: lcd_init ();
  1255  01B0  120A  158A  26B1  120A  118A  	fcall	_lcd_init
  1256  01B5                     l1928:	
  1257                           
  1258                           ;D_Clock.c: 174: };D_Clock.c: 175: if(PORTBbits.RB5 == 1)
  1259  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  1260  01B6  1303               	bcf	3,6	;RP1=0, select bank0
  1261  01B7  1E86               	btfss	6,5	;volatile
  1262  01B8  2A02               	goto	l1948
  1263  01B9                     l244:	
  1264  01B9  1A86               	btfsc	6,5	;volatile
  1265  01BA  29B9               	goto	l244
  1266                           
  1267                           ;D_Clock.c: 178: decimal_val_minute -- ;
  1268  01BB  3001               	movlw	1
  1269  01BC  02C1               	subwf	set_timing@decimal_val_minute,f
  1270                           
  1271                           ;D_Clock.c: 179: if(decimal_val_minute == 0)
  1272  01BD  0841               	movf	set_timing@decimal_val_minute,w
  1273  01BE  1D03               	btfss	3,2
  1274  01BF  29C4               	goto	l247
  1275                           
  1276                           ;D_Clock.c: 180: {;D_Clock.c: 181: decimal_val_minute = 59 ;
  1277  01C0  303B               	movlw	59
  1278  01C1  00B5               	movwf	??_set_timing
  1279  01C2  0835               	movf	??_set_timing,w
  1280  01C3  00C1               	movwf	set_timing@decimal_val_minute
  1281  01C4                     l247:	
  1282                           
  1283                           ;D_Clock.c: 182: };D_Clock.c: 183: _delay((unsigned long)((100)*(20000000/4000.0)));
  1284  01C4  3003               	movlw	3
  1285  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  1286  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  1287  01C7  00B7               	movwf	??_set_timing+2
  1288  01C8  308A               	movlw	138
  1289  01C9  00B6               	movwf	??_set_timing+1
  1290  01CA  3055               	movlw	85
  1291  01CB  00B5               	movwf	??_set_timing
  1292  01CC                     u2387:	
  1293  01CC  0BB5               	decfsz	??_set_timing,f
  1294  01CD  29CC               	goto	u2387
  1295  01CE  0BB6               	decfsz	??_set_timing+1,f
  1296  01CF  29CC               	goto	u2387
  1297  01D0  0BB7               	decfsz	??_set_timing+2,f
  1298  01D1  29CC               	goto	u2387
  1299                           
  1300                           ;D_Clock.c: 184: lcd_command (0x83);
  1301  01D2  3083               	movlw	131
  1302  01D3  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1303                           
  1304                           ;D_Clock.c: 185: lcd_string ("MIN.:",5);
  1305  01D8  3005               	movlw	5
  1306  01D9  1283               	bcf	3,5	;RP0=0, select bank0
  1307  01DA  1303               	bcf	3,6	;RP1=0, select bank0
  1308  01DB  00B5               	movwf	??_set_timing
  1309  01DC  0835               	movf	??_set_timing,w
  1310  01DD  00A1               	movwf	lcd_string@num
  1311  01DE  300E               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1312  01DF  120A  158A  26E4  120A  118A  	fcall	_lcd_string
  1313                           
  1314                           ;D_Clock.c: 186: lcd_command (0x89) ;
  1315  01E4  3089               	movlw	137
  1316  01E5  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1317                           
  1318                           ;D_Clock.c: 187: bcd_val_minute = decimal_to_bcd (decimal_val_minute);
  1319  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  1320  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  1321  01EC  0841               	movf	set_timing@decimal_val_minute,w
  1322  01ED  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  1323  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  1324  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  1325  01F4  00B5               	movwf	??_set_timing
  1326  01F5  0835               	movf	??_set_timing,w
  1327  01F6  00BB               	movwf	set_timing@bcd_val_minute
  1328                           
  1329                           ;D_Clock.c: 188: bcd_to_ascii (bcd_val_minute) ;
  1330  01F7  083B               	movf	set_timing@bcd_val_minute,w
  1331  01F8  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  1332                           
  1333                           ;D_Clock.c: 189: lcd_init ();
  1334  01FD  120A  158A  26B1  120A  118A  	fcall	_lcd_init
  1335  0202                     l1948:	
  1336                           
  1337                           ;D_Clock.c: 190: };D_Clock.c: 191: };D_Clock.c: 193: if (timing_flag == 3)
  1338  0202  3003               	movlw	3
  1339  0203  1283               	bcf	3,5	;RP0=0, select bank0
  1340  0204  1303               	bcf	3,6	;RP1=0, select bank0
  1341  0205  0649               	xorwf	_timing_flag,w
  1342  0206  1D03               	btfss	3,2
  1343  0207  2AD5               	goto	l2002
  1344                           
  1345                           ;D_Clock.c: 194: {;D_Clock.c: 195: lcd_command(0x01);
  1346  0208  3001               	movlw	1
  1347  0209  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1348                           
  1349                           ;D_Clock.c: 196: lcd_command (0x83);
  1350  020E  3083               	movlw	131
  1351  020F  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1352                           
  1353                           ;D_Clock.c: 197: lcd_string ("hour:",5);
  1354  0214  3005               	movlw	5
  1355  0215  1283               	bcf	3,5	;RP0=0, select bank0
  1356  0216  1303               	bcf	3,6	;RP1=0, select bank0
  1357  0217  00B5               	movwf	??_set_timing
  1358  0218  0835               	movf	??_set_timing,w
  1359  0219  00A1               	movwf	lcd_string@num
  1360  021A  3026               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1361  021B  120A  158A  26E4  120A  118A  	fcall	_lcd_string
  1362                           
  1363                           ;D_Clock.c: 198: lcd_command (0x89) ;
  1364  0220  3089               	movlw	137
  1365  0221  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1366                           
  1367                           ;D_Clock.c: 199: bcd_to_ascii (bcd_val_hour) ;
  1368  0226  1283               	bcf	3,5	;RP0=0, select bank0
  1369  0227  1303               	bcf	3,6	;RP1=0, select bank0
  1370  0228  083C               	movf	set_timing@bcd_val_hour,w
  1371  0229  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  1372                           
  1373                           ;D_Clock.c: 200: _delay((unsigned long)((100)*(20000000/4000.0)));
  1374  022E  3003               	movlw	3
  1375  022F  1283               	bcf	3,5	;RP0=0, select bank0
  1376  0230  1303               	bcf	3,6	;RP1=0, select bank0
  1377  0231  00B7               	movwf	??_set_timing+2
  1378  0232  308A               	movlw	138
  1379  0233  00B6               	movwf	??_set_timing+1
  1380  0234  3055               	movlw	85
  1381  0235  00B5               	movwf	??_set_timing
  1382  0236                     u2397:	
  1383  0236  0BB5               	decfsz	??_set_timing,f
  1384  0237  2A36               	goto	u2397
  1385  0238  0BB6               	decfsz	??_set_timing+1,f
  1386  0239  2A36               	goto	u2397
  1387  023A  0BB7               	decfsz	??_set_timing+2,f
  1388  023B  2A36               	goto	u2397
  1389                           
  1390                           ;D_Clock.c: 202: if(PORTBbits.RB4 == 1)
  1391  023C  1283               	bcf	3,5	;RP0=0, select bank0
  1392  023D  1303               	bcf	3,6	;RP1=0, select bank0
  1393  023E  1E06               	btfss	6,4	;volatile
  1394  023F  2A88               	goto	l1982
  1395  0240                     l250:	
  1396  0240  1A06               	btfsc	6,4	;volatile
  1397  0241  2A40               	goto	l250
  1398                           
  1399                           ;D_Clock.c: 205: decimal_val_hour ++ ;
  1400  0242  3001               	movlw	1
  1401  0243  00B5               	movwf	??_set_timing
  1402  0244  0835               	movf	??_set_timing,w
  1403  0245  07C2               	addwf	set_timing@decimal_val_hour,f
  1404                           
  1405                           ;D_Clock.c: 206: if(decimal_val_hour == 60)
  1406  0246  303C               	movlw	60
  1407  0247  0642               	xorwf	set_timing@decimal_val_hour,w
  1408  0248  1903               	btfsc	3,2
  1409                           
  1410                           ;D_Clock.c: 207: {;D_Clock.c: 208: decimal_val_hour =0 ;
  1411  0249  01C2               	clrf	set_timing@decimal_val_hour
  1412                           
  1413                           ;D_Clock.c: 209: };D_Clock.c: 210: _delay((unsigned long)((100)*(20000000/4000.0)));
  1414  024A  3003               	movlw	3
  1415  024B  1283               	bcf	3,5	;RP0=0, select bank0
  1416  024C  1303               	bcf	3,6	;RP1=0, select bank0
  1417  024D  00B7               	movwf	??_set_timing+2
  1418  024E  308A               	movlw	138
  1419  024F  00B6               	movwf	??_set_timing+1
  1420  0250  3055               	movlw	85
  1421  0251  00B5               	movwf	??_set_timing
  1422  0252                     u2407:	
  1423  0252  0BB5               	decfsz	??_set_timing,f
  1424  0253  2A52               	goto	u2407
  1425  0254  0BB6               	decfsz	??_set_timing+1,f
  1426  0255  2A52               	goto	u2407
  1427  0256  0BB7               	decfsz	??_set_timing+2,f
  1428  0257  2A52               	goto	u2407
  1429                           
  1430                           ;D_Clock.c: 211: lcd_command (0x83);
  1431  0258  3083               	movlw	131
  1432  0259  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1433                           
  1434                           ;D_Clock.c: 212: lcd_string ("SEC.:",5);
  1435  025E  3005               	movlw	5
  1436  025F  1283               	bcf	3,5	;RP0=0, select bank0
  1437  0260  1303               	bcf	3,6	;RP1=0, select bank0
  1438  0261  00B5               	movwf	??_set_timing
  1439  0262  0835               	movf	??_set_timing,w
  1440  0263  00A1               	movwf	lcd_string@num
  1441  0264  3008               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1442  0265  120A  158A  26E4  120A  118A  	fcall	_lcd_string
  1443                           
  1444                           ;D_Clock.c: 213: lcd_command (0x89) ;
  1445  026A  3089               	movlw	137
  1446  026B  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1447                           
  1448                           ;D_Clock.c: 214: bcd_val_hour = decimal_to_bcd (decimal_val_hour);
  1449  0270  1283               	bcf	3,5	;RP0=0, select bank0
  1450  0271  1303               	bcf	3,6	;RP1=0, select bank0
  1451  0272  0842               	movf	set_timing@decimal_val_hour,w
  1452  0273  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  1453  0278  1283               	bcf	3,5	;RP0=0, select bank0
  1454  0279  1303               	bcf	3,6	;RP1=0, select bank0
  1455  027A  00B5               	movwf	??_set_timing
  1456  027B  0835               	movf	??_set_timing,w
  1457  027C  00BC               	movwf	set_timing@bcd_val_hour
  1458                           
  1459                           ;D_Clock.c: 215: bcd_to_ascii (bcd_val_hour) ;
  1460  027D  083C               	movf	set_timing@bcd_val_hour,w
  1461  027E  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  1462                           
  1463                           ;D_Clock.c: 216: lcd_init ();
  1464  0283  120A  158A  26B1  120A  118A  	fcall	_lcd_init
  1465  0288                     l1982:	
  1466                           
  1467                           ;D_Clock.c: 217: };D_Clock.c: 218: if(PORTBbits.RB5 == 1)
  1468  0288  1283               	bcf	3,5	;RP0=0, select bank0
  1469  0289  1303               	bcf	3,6	;RP1=0, select bank0
  1470  028A  1E86               	btfss	6,5	;volatile
  1471  028B  2AD5               	goto	l2002
  1472  028C                     l255:	
  1473  028C  1A86               	btfsc	6,5	;volatile
  1474  028D  2A8C               	goto	l255
  1475                           
  1476                           ;D_Clock.c: 221: decimal_val_hour -- ;
  1477  028E  3001               	movlw	1
  1478  028F  02C2               	subwf	set_timing@decimal_val_hour,f
  1479                           
  1480                           ;D_Clock.c: 222: if(decimal_val_hour == 0)
  1481  0290  0842               	movf	set_timing@decimal_val_hour,w
  1482  0291  1D03               	btfss	3,2
  1483  0292  2A97               	goto	l258
  1484                           
  1485                           ;D_Clock.c: 223: {;D_Clock.c: 224: decimal_val_hour = 59 ;
  1486  0293  303B               	movlw	59
  1487  0294  00B5               	movwf	??_set_timing
  1488  0295  0835               	movf	??_set_timing,w
  1489  0296  00C2               	movwf	set_timing@decimal_val_hour
  1490  0297                     l258:	
  1491                           
  1492                           ;D_Clock.c: 225: };D_Clock.c: 226: _delay((unsigned long)((100)*(20000000/4000.0)));
  1493  0297  3003               	movlw	3
  1494  0298  1283               	bcf	3,5	;RP0=0, select bank0
  1495  0299  1303               	bcf	3,6	;RP1=0, select bank0
  1496  029A  00B7               	movwf	??_set_timing+2
  1497  029B  308A               	movlw	138
  1498  029C  00B6               	movwf	??_set_timing+1
  1499  029D  3055               	movlw	85
  1500  029E  00B5               	movwf	??_set_timing
  1501  029F                     u2417:	
  1502  029F  0BB5               	decfsz	??_set_timing,f
  1503  02A0  2A9F               	goto	u2417
  1504  02A1  0BB6               	decfsz	??_set_timing+1,f
  1505  02A2  2A9F               	goto	u2417
  1506  02A3  0BB7               	decfsz	??_set_timing+2,f
  1507  02A4  2A9F               	goto	u2417
  1508                           
  1509                           ;D_Clock.c: 227: lcd_command (0x83);
  1510  02A5  3083               	movlw	131
  1511  02A6  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1512                           
  1513                           ;D_Clock.c: 228: lcd_string ("SEC.:",5);
  1514  02AB  3005               	movlw	5
  1515  02AC  1283               	bcf	3,5	;RP0=0, select bank0
  1516  02AD  1303               	bcf	3,6	;RP1=0, select bank0
  1517  02AE  00B5               	movwf	??_set_timing
  1518  02AF  0835               	movf	??_set_timing,w
  1519  02B0  00A1               	movwf	lcd_string@num
  1520  02B1  3008               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1521  02B2  120A  158A  26E4  120A  118A  	fcall	_lcd_string
  1522                           
  1523                           ;D_Clock.c: 229: lcd_command (0x89) ;
  1524  02B7  3089               	movlw	137
  1525  02B8  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1526                           
  1527                           ;D_Clock.c: 230: bcd_val_hour = decimal_to_bcd (decimal_val_hour);
  1528  02BD  1283               	bcf	3,5	;RP0=0, select bank0
  1529  02BE  1303               	bcf	3,6	;RP1=0, select bank0
  1530  02BF  0842               	movf	set_timing@decimal_val_hour,w
  1531  02C0  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  1532  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  1533  02C6  1303               	bcf	3,6	;RP1=0, select bank0
  1534  02C7  00B5               	movwf	??_set_timing
  1535  02C8  0835               	movf	??_set_timing,w
  1536  02C9  00BC               	movwf	set_timing@bcd_val_hour
  1537                           
  1538                           ;D_Clock.c: 231: bcd_to_ascii (bcd_val_hour) ;
  1539  02CA  083C               	movf	set_timing@bcd_val_hour,w
  1540  02CB  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  1541                           
  1542                           ;D_Clock.c: 232: lcd_init ();
  1543  02D0  120A  158A  26B1  120A  118A  	fcall	_lcd_init
  1544  02D5                     l2002:	
  1545                           
  1546                           ;D_Clock.c: 233: };D_Clock.c: 234: };D_Clock.c: 236: if (timing_flag == 4 )
  1547  02D5  3004               	movlw	4
  1548  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  1549  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  1550  02D8  0649               	xorwf	_timing_flag,w
  1551  02D9  1D03               	btfss	3,2
  1552  02DA  2BA8               	goto	l2056
  1553                           
  1554                           ;D_Clock.c: 237: {;D_Clock.c: 238: lcd_command(0x01);
  1555  02DB  3001               	movlw	1
  1556  02DC  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1557                           
  1558                           ;D_Clock.c: 239: lcd_command (0x83);
  1559  02E1  3083               	movlw	131
  1560  02E2  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1561                           
  1562                           ;D_Clock.c: 240: lcd_string ("DATE:",5);
  1563  02E7  3005               	movlw	5
  1564  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  1565  02E9  1303               	bcf	3,6	;RP1=0, select bank0
  1566  02EA  00B5               	movwf	??_set_timing
  1567  02EB  0835               	movf	??_set_timing,w
  1568  02EC  00A1               	movwf	lcd_string@num
  1569  02ED  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1570  02EE  120A  158A  26E4  120A  118A  	fcall	_lcd_string
  1571                           
  1572                           ;D_Clock.c: 241: lcd_command (0x89) ;
  1573  02F3  3089               	movlw	137
  1574  02F4  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1575                           
  1576                           ;D_Clock.c: 242: bcd_to_ascii (bcd_val_date) ;
  1577  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  1578  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  1579  02FB  083D               	movf	set_timing@bcd_val_date,w
  1580  02FC  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  1581                           
  1582                           ;D_Clock.c: 243: _delay((unsigned long)((100)*(20000000/4000.0)));
  1583  0301  3003               	movlw	3
  1584  0302  1283               	bcf	3,5	;RP0=0, select bank0
  1585  0303  1303               	bcf	3,6	;RP1=0, select bank0
  1586  0304  00B7               	movwf	??_set_timing+2
  1587  0305  308A               	movlw	138
  1588  0306  00B6               	movwf	??_set_timing+1
  1589  0307  3055               	movlw	85
  1590  0308  00B5               	movwf	??_set_timing
  1591  0309                     u2427:	
  1592  0309  0BB5               	decfsz	??_set_timing,f
  1593  030A  2B09               	goto	u2427
  1594  030B  0BB6               	decfsz	??_set_timing+1,f
  1595  030C  2B09               	goto	u2427
  1596  030D  0BB7               	decfsz	??_set_timing+2,f
  1597  030E  2B09               	goto	u2427
  1598                           
  1599                           ;D_Clock.c: 245: if(PORTBbits.RB4 == 1)
  1600  030F  1283               	bcf	3,5	;RP0=0, select bank0
  1601  0310  1303               	bcf	3,6	;RP1=0, select bank0
  1602  0311  1E06               	btfss	6,4	;volatile
  1603  0312  2B5B               	goto	l2036
  1604  0313                     l261:	
  1605  0313  1A06               	btfsc	6,4	;volatile
  1606  0314  2B13               	goto	l261
  1607                           
  1608                           ;D_Clock.c: 248: decimal_val_date ++ ;
  1609  0315  3001               	movlw	1
  1610  0316  00B5               	movwf	??_set_timing
  1611  0317  0835               	movf	??_set_timing,w
  1612  0318  07C3               	addwf	set_timing@decimal_val_date,f
  1613                           
  1614                           ;D_Clock.c: 249: if(decimal_val_date == 32)
  1615  0319  3020               	movlw	32
  1616  031A  0643               	xorwf	set_timing@decimal_val_date,w
  1617  031B  1903               	btfsc	3,2
  1618                           
  1619                           ;D_Clock.c: 250: {;D_Clock.c: 251: decimal_val_date =0 ;
  1620  031C  01C3               	clrf	set_timing@decimal_val_date
  1621                           
  1622                           ;D_Clock.c: 252: };D_Clock.c: 253: _delay((unsigned long)((100)*(20000000/4000.0)));
  1623  031D  3003               	movlw	3
  1624  031E  1283               	bcf	3,5	;RP0=0, select bank0
  1625  031F  1303               	bcf	3,6	;RP1=0, select bank0
  1626  0320  00B7               	movwf	??_set_timing+2
  1627  0321  308A               	movlw	138
  1628  0322  00B6               	movwf	??_set_timing+1
  1629  0323  3055               	movlw	85
  1630  0324  00B5               	movwf	??_set_timing
  1631  0325                     u2437:	
  1632  0325  0BB5               	decfsz	??_set_timing,f
  1633  0326  2B25               	goto	u2437
  1634  0327  0BB6               	decfsz	??_set_timing+1,f
  1635  0328  2B25               	goto	u2437
  1636  0329  0BB7               	decfsz	??_set_timing+2,f
  1637  032A  2B25               	goto	u2437
  1638                           
  1639                           ;D_Clock.c: 254: lcd_command (0x83);
  1640  032B  3083               	movlw	131
  1641  032C  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1642                           
  1643                           ;D_Clock.c: 255: lcd_string ("DATE:",5);
  1644  0331  3005               	movlw	5
  1645  0332  1283               	bcf	3,5	;RP0=0, select bank0
  1646  0333  1303               	bcf	3,6	;RP1=0, select bank0
  1647  0334  00B5               	movwf	??_set_timing
  1648  0335  0835               	movf	??_set_timing,w
  1649  0336  00A1               	movwf	lcd_string@num
  1650  0337  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1651  0338  120A  158A  26E4  120A  118A  	fcall	_lcd_string
  1652                           
  1653                           ;D_Clock.c: 256: lcd_command (0x89) ;
  1654  033D  3089               	movlw	137
  1655  033E  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1656                           
  1657                           ;D_Clock.c: 257: bcd_val_date = decimal_to_bcd (decimal_val_date);
  1658  0343  1283               	bcf	3,5	;RP0=0, select bank0
  1659  0344  1303               	bcf	3,6	;RP1=0, select bank0
  1660  0345  0843               	movf	set_timing@decimal_val_date,w
  1661  0346  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  1662  034B  1283               	bcf	3,5	;RP0=0, select bank0
  1663  034C  1303               	bcf	3,6	;RP1=0, select bank0
  1664  034D  00B5               	movwf	??_set_timing
  1665  034E  0835               	movf	??_set_timing,w
  1666  034F  00BD               	movwf	set_timing@bcd_val_date
  1667                           
  1668                           ;D_Clock.c: 258: bcd_to_ascii (bcd_val_date) ;
  1669  0350  083D               	movf	set_timing@bcd_val_date,w
  1670  0351  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  1671                           
  1672                           ;D_Clock.c: 259: lcd_init ();
  1673  0356  120A  158A  26B1  120A  118A  	fcall	_lcd_init
  1674  035B                     l2036:	
  1675                           
  1676                           ;D_Clock.c: 260: };D_Clock.c: 261: if(PORTBbits.RB5 == 1)
  1677  035B  1283               	bcf	3,5	;RP0=0, select bank0
  1678  035C  1303               	bcf	3,6	;RP1=0, select bank0
  1679  035D  1E86               	btfss	6,5	;volatile
  1680  035E  2BA8               	goto	l2056
  1681  035F                     l266:	
  1682  035F  1A86               	btfsc	6,5	;volatile
  1683  0360  2B5F               	goto	l266
  1684                           
  1685                           ;D_Clock.c: 264: decimal_val_date -- ;
  1686  0361  3001               	movlw	1
  1687  0362  02C3               	subwf	set_timing@decimal_val_date,f
  1688                           
  1689                           ;D_Clock.c: 265: if(decimal_val_date == 0)
  1690  0363  0843               	movf	set_timing@decimal_val_date,w
  1691  0364  1D03               	btfss	3,2
  1692  0365  2B6A               	goto	l269
  1693                           
  1694                           ;D_Clock.c: 266: {;D_Clock.c: 267: decimal_val_date = 31 ;
  1695  0366  301F               	movlw	31
  1696  0367  00B5               	movwf	??_set_timing
  1697  0368  0835               	movf	??_set_timing,w
  1698  0369  00C3               	movwf	set_timing@decimal_val_date
  1699  036A                     l269:	
  1700                           
  1701                           ;D_Clock.c: 268: };D_Clock.c: 269: _delay((unsigned long)((100)*(20000000/4000.0)));
  1702  036A  3003               	movlw	3
  1703  036B  1283               	bcf	3,5	;RP0=0, select bank0
  1704  036C  1303               	bcf	3,6	;RP1=0, select bank0
  1705  036D  00B7               	movwf	??_set_timing+2
  1706  036E  308A               	movlw	138
  1707  036F  00B6               	movwf	??_set_timing+1
  1708  0370  3055               	movlw	85
  1709  0371  00B5               	movwf	??_set_timing
  1710  0372                     u2447:	
  1711  0372  0BB5               	decfsz	??_set_timing,f
  1712  0373  2B72               	goto	u2447
  1713  0374  0BB6               	decfsz	??_set_timing+1,f
  1714  0375  2B72               	goto	u2447
  1715  0376  0BB7               	decfsz	??_set_timing+2,f
  1716  0377  2B72               	goto	u2447
  1717                           
  1718                           ;D_Clock.c: 270: lcd_command (0x83);
  1719  0378  3083               	movlw	131
  1720  0379  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1721                           
  1722                           ;D_Clock.c: 271: lcd_string ("DATE:",5);
  1723  037E  3005               	movlw	5
  1724  037F  1283               	bcf	3,5	;RP0=0, select bank0
  1725  0380  1303               	bcf	3,6	;RP1=0, select bank0
  1726  0381  00B5               	movwf	??_set_timing
  1727  0382  0835               	movf	??_set_timing,w
  1728  0383  00A1               	movwf	lcd_string@num
  1729  0384  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1730  0385  120A  158A  26E4  120A  118A  	fcall	_lcd_string
  1731                           
  1732                           ;D_Clock.c: 272: lcd_command (0x89) ;
  1733  038A  3089               	movlw	137
  1734  038B  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1735                           
  1736                           ;D_Clock.c: 273: bcd_val_date = decimal_to_bcd (decimal_val_date);
  1737  0390  1283               	bcf	3,5	;RP0=0, select bank0
  1738  0391  1303               	bcf	3,6	;RP1=0, select bank0
  1739  0392  0843               	movf	set_timing@decimal_val_date,w
  1740  0393  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  1741  0398  1283               	bcf	3,5	;RP0=0, select bank0
  1742  0399  1303               	bcf	3,6	;RP1=0, select bank0
  1743  039A  00B5               	movwf	??_set_timing
  1744  039B  0835               	movf	??_set_timing,w
  1745  039C  00BD               	movwf	set_timing@bcd_val_date
  1746                           
  1747                           ;D_Clock.c: 274: bcd_to_ascii (bcd_val_date) ;
  1748  039D  083D               	movf	set_timing@bcd_val_date,w
  1749  039E  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  1750                           
  1751                           ;D_Clock.c: 275: lcd_init ();
  1752  03A3  120A  158A  26B1  120A  118A  	fcall	_lcd_init
  1753  03A8                     l2056:	
  1754                           
  1755                           ;D_Clock.c: 276: };D_Clock.c: 277: };D_Clock.c: 279: if (timing_flag == 5)
  1756  03A8  3005               	movlw	5
  1757  03A9  1283               	bcf	3,5	;RP0=0, select bank0
  1758  03AA  1303               	bcf	3,6	;RP1=0, select bank0
  1759  03AB  0649               	xorwf	_timing_flag,w
  1760  03AC  1D03               	btfss	3,2
  1761  03AD  2C7B               	goto	l2110
  1762                           
  1763                           ;D_Clock.c: 280: {;D_Clock.c: 281: lcd_command(0x01);
  1764  03AE  3001               	movlw	1
  1765  03AF  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1766                           
  1767                           ;D_Clock.c: 282: lcd_command (0x83);
  1768  03B4  3083               	movlw	131
  1769  03B5  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1770                           
  1771                           ;D_Clock.c: 283: lcd_string ("MON.:",5);
  1772  03BA  3005               	movlw	5
  1773  03BB  1283               	bcf	3,5	;RP0=0, select bank0
  1774  03BC  1303               	bcf	3,6	;RP1=0, select bank0
  1775  03BD  00B5               	movwf	??_set_timing
  1776  03BE  0835               	movf	??_set_timing,w
  1777  03BF  00A1               	movwf	lcd_string@num
  1778  03C0  3014               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1779  03C1  120A  158A  26E4  120A  118A  	fcall	_lcd_string
  1780                           
  1781                           ;D_Clock.c: 284: lcd_command (0x89) ;
  1782  03C6  3089               	movlw	137
  1783  03C7  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1784                           
  1785                           ;D_Clock.c: 285: bcd_to_ascii (bcd_val_month) ;
  1786  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  1787  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  1788  03CE  083E               	movf	set_timing@bcd_val_month,w
  1789  03CF  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  1790                           
  1791                           ;D_Clock.c: 286: _delay((unsigned long)((100)*(20000000/4000.0)));
  1792  03D4  3003               	movlw	3
  1793  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  1794  03D6  1303               	bcf	3,6	;RP1=0, select bank0
  1795  03D7  00B7               	movwf	??_set_timing+2
  1796  03D8  308A               	movlw	138
  1797  03D9  00B6               	movwf	??_set_timing+1
  1798  03DA  3055               	movlw	85
  1799  03DB  00B5               	movwf	??_set_timing
  1800  03DC                     u2457:	
  1801  03DC  0BB5               	decfsz	??_set_timing,f
  1802  03DD  2BDC               	goto	u2457
  1803  03DE  0BB6               	decfsz	??_set_timing+1,f
  1804  03DF  2BDC               	goto	u2457
  1805  03E0  0BB7               	decfsz	??_set_timing+2,f
  1806  03E1  2BDC               	goto	u2457
  1807                           
  1808                           ;D_Clock.c: 288: if(PORTBbits.RB4 == 1)
  1809  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  1810  03E3  1303               	bcf	3,6	;RP1=0, select bank0
  1811  03E4  1E06               	btfss	6,4	;volatile
  1812  03E5  2C2E               	goto	l2090
  1813  03E6                     l272:	
  1814  03E6  1A06               	btfsc	6,4	;volatile
  1815  03E7  2BE6               	goto	l272
  1816                           
  1817                           ;D_Clock.c: 291: decimal_val_month ++ ;
  1818  03E8  3001               	movlw	1
  1819  03E9  00B5               	movwf	??_set_timing
  1820  03EA  0835               	movf	??_set_timing,w
  1821  03EB  07C4               	addwf	set_timing@decimal_val_month,f
  1822                           
  1823                           ;D_Clock.c: 292: if(decimal_val_month == 60)
  1824  03EC  303C               	movlw	60
  1825  03ED  0644               	xorwf	set_timing@decimal_val_month,w
  1826  03EE  1903               	btfsc	3,2
  1827                           
  1828                           ;D_Clock.c: 293: {;D_Clock.c: 294: decimal_val_month =0 ;
  1829  03EF  01C4               	clrf	set_timing@decimal_val_month
  1830                           
  1831                           ;D_Clock.c: 295: };D_Clock.c: 296: _delay((unsigned long)((100)*(20000000/4000.0)));
  1832  03F0  3003               	movlw	3
  1833  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  1834  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  1835  03F3  00B7               	movwf	??_set_timing+2
  1836  03F4  308A               	movlw	138
  1837  03F5  00B6               	movwf	??_set_timing+1
  1838  03F6  3055               	movlw	85
  1839  03F7  00B5               	movwf	??_set_timing
  1840  03F8                     u2467:	
  1841  03F8  0BB5               	decfsz	??_set_timing,f
  1842  03F9  2BF8               	goto	u2467
  1843  03FA  0BB6               	decfsz	??_set_timing+1,f
  1844  03FB  2BF8               	goto	u2467
  1845  03FC  0BB7               	decfsz	??_set_timing+2,f
  1846  03FD  2BF8               	goto	u2467
  1847                           
  1848                           ;D_Clock.c: 297: lcd_command (0x83);
  1849  03FE  3083               	movlw	131
  1850  03FF  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1851                           
  1852                           ;D_Clock.c: 298: lcd_string ("SEC.:",5);
  1853  0404  3005               	movlw	5
  1854  0405  1283               	bcf	3,5	;RP0=0, select bank0
  1855  0406  1303               	bcf	3,6	;RP1=0, select bank0
  1856  0407  00B5               	movwf	??_set_timing
  1857  0408  0835               	movf	??_set_timing,w
  1858  0409  00A1               	movwf	lcd_string@num
  1859  040A  3008               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1860  040B  120A  158A  26E4  120A  118A  	fcall	_lcd_string
  1861                           
  1862                           ;D_Clock.c: 299: lcd_command (0x89) ;
  1863  0410  3089               	movlw	137
  1864  0411  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1865                           
  1866                           ;D_Clock.c: 300: bcd_val_month = decimal_to_bcd (decimal_val_month);
  1867  0416  1283               	bcf	3,5	;RP0=0, select bank0
  1868  0417  1303               	bcf	3,6	;RP1=0, select bank0
  1869  0418  0844               	movf	set_timing@decimal_val_month,w
  1870  0419  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  1871  041E  1283               	bcf	3,5	;RP0=0, select bank0
  1872  041F  1303               	bcf	3,6	;RP1=0, select bank0
  1873  0420  00B5               	movwf	??_set_timing
  1874  0421  0835               	movf	??_set_timing,w
  1875  0422  00BE               	movwf	set_timing@bcd_val_month
  1876                           
  1877                           ;D_Clock.c: 301: bcd_to_ascii (bcd_val_month) ;
  1878  0423  083E               	movf	set_timing@bcd_val_month,w
  1879  0424  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  1880                           
  1881                           ;D_Clock.c: 302: lcd_init ();
  1882  0429  120A  158A  26B1  120A  118A  	fcall	_lcd_init
  1883  042E                     l2090:	
  1884                           
  1885                           ;D_Clock.c: 303: };D_Clock.c: 304: if(PORTBbits.RB5 == 1)
  1886  042E  1283               	bcf	3,5	;RP0=0, select bank0
  1887  042F  1303               	bcf	3,6	;RP1=0, select bank0
  1888  0430  1E86               	btfss	6,5	;volatile
  1889  0431  2C7B               	goto	l2110
  1890  0432                     l277:	
  1891  0432  1A86               	btfsc	6,5	;volatile
  1892  0433  2C32               	goto	l277
  1893                           
  1894                           ;D_Clock.c: 307: decimal_val_month -- ;
  1895  0434  3001               	movlw	1
  1896  0435  02C4               	subwf	set_timing@decimal_val_month,f
  1897                           
  1898                           ;D_Clock.c: 308: if(decimal_val_month == 0)
  1899  0436  0844               	movf	set_timing@decimal_val_month,w
  1900  0437  1D03               	btfss	3,2
  1901  0438  2C3D               	goto	l280
  1902                           
  1903                           ;D_Clock.c: 309: {;D_Clock.c: 310: decimal_val_month = 59 ;
  1904  0439  303B               	movlw	59
  1905  043A  00B5               	movwf	??_set_timing
  1906  043B  0835               	movf	??_set_timing,w
  1907  043C  00C4               	movwf	set_timing@decimal_val_month
  1908  043D                     l280:	
  1909                           
  1910                           ;D_Clock.c: 311: };D_Clock.c: 312: _delay((unsigned long)((100)*(20000000/4000.0)));
  1911  043D  3003               	movlw	3
  1912  043E  1283               	bcf	3,5	;RP0=0, select bank0
  1913  043F  1303               	bcf	3,6	;RP1=0, select bank0
  1914  0440  00B7               	movwf	??_set_timing+2
  1915  0441  308A               	movlw	138
  1916  0442  00B6               	movwf	??_set_timing+1
  1917  0443  3055               	movlw	85
  1918  0444  00B5               	movwf	??_set_timing
  1919  0445                     u2477:	
  1920  0445  0BB5               	decfsz	??_set_timing,f
  1921  0446  2C45               	goto	u2477
  1922  0447  0BB6               	decfsz	??_set_timing+1,f
  1923  0448  2C45               	goto	u2477
  1924  0449  0BB7               	decfsz	??_set_timing+2,f
  1925  044A  2C45               	goto	u2477
  1926                           
  1927                           ;D_Clock.c: 313: lcd_command (0x83);
  1928  044B  3083               	movlw	131
  1929  044C  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1930                           
  1931                           ;D_Clock.c: 314: lcd_string ("SEC.:",5);
  1932  0451  3005               	movlw	5
  1933  0452  1283               	bcf	3,5	;RP0=0, select bank0
  1934  0453  1303               	bcf	3,6	;RP1=0, select bank0
  1935  0454  00B5               	movwf	??_set_timing
  1936  0455  0835               	movf	??_set_timing,w
  1937  0456  00A1               	movwf	lcd_string@num
  1938  0457  3008               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1939  0458  120A  158A  26E4  120A  118A  	fcall	_lcd_string
  1940                           
  1941                           ;D_Clock.c: 315: lcd_command (0x89) ;
  1942  045D  3089               	movlw	137
  1943  045E  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1944                           
  1945                           ;D_Clock.c: 316: bcd_val_month = decimal_to_bcd (decimal_val_month);
  1946  0463  1283               	bcf	3,5	;RP0=0, select bank0
  1947  0464  1303               	bcf	3,6	;RP1=0, select bank0
  1948  0465  0844               	movf	set_timing@decimal_val_month,w
  1949  0466  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  1950  046B  1283               	bcf	3,5	;RP0=0, select bank0
  1951  046C  1303               	bcf	3,6	;RP1=0, select bank0
  1952  046D  00B5               	movwf	??_set_timing
  1953  046E  0835               	movf	??_set_timing,w
  1954  046F  00BE               	movwf	set_timing@bcd_val_month
  1955                           
  1956                           ;D_Clock.c: 317: bcd_to_ascii (bcd_val_month) ;
  1957  0470  083E               	movf	set_timing@bcd_val_month,w
  1958  0471  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  1959                           
  1960                           ;D_Clock.c: 318: lcd_init ();
  1961  0476  120A  158A  26B1  120A  118A  	fcall	_lcd_init
  1962  047B                     l2110:	
  1963                           
  1964                           ;D_Clock.c: 319: };D_Clock.c: 320: };D_Clock.c: 322: if (timing_flag == 6)
  1965  047B  3006               	movlw	6
  1966  047C  1283               	bcf	3,5	;RP0=0, select bank0
  1967  047D  1303               	bcf	3,6	;RP1=0, select bank0
  1968  047E  0649               	xorwf	_timing_flag,w
  1969  047F  1D03               	btfss	3,2
  1970  0480  287F               	goto	l2164
  1971                           
  1972                           ;D_Clock.c: 323: {;D_Clock.c: 324: lcd_command(0x01);
  1973  0481  3001               	movlw	1
  1974  0482  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1975                           
  1976                           ;D_Clock.c: 325: lcd_command (0x83);
  1977  0487  3083               	movlw	131
  1978  0488  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1979                           
  1980                           ;D_Clock.c: 326: lcd_string ("yer.:",5);
  1981  048D  3005               	movlw	5
  1982  048E  1283               	bcf	3,5	;RP0=0, select bank0
  1983  048F  1303               	bcf	3,6	;RP1=0, select bank0
  1984  0490  00B5               	movwf	??_set_timing
  1985  0491  0835               	movf	??_set_timing,w
  1986  0492  00A1               	movwf	lcd_string@num
  1987  0493  301A               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  1988  0494  120A  158A  26E4  120A  118A  	fcall	_lcd_string
  1989                           
  1990                           ;D_Clock.c: 327: lcd_command (0x89) ;
  1991  0499  3089               	movlw	137
  1992  049A  120A  158A  2685  120A  118A  	fcall	_lcd_command
  1993                           
  1994                           ;D_Clock.c: 328: bcd_to_ascii (bcd_val_year) ;
  1995  049F  1283               	bcf	3,5	;RP0=0, select bank0
  1996  04A0  1303               	bcf	3,6	;RP1=0, select bank0
  1997  04A1  083F               	movf	set_timing@bcd_val_year,w
  1998  04A2  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  1999                           
  2000                           ;D_Clock.c: 329: _delay((unsigned long)((100)*(20000000/4000.0)));
  2001  04A7  3003               	movlw	3
  2002  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  2003  04A9  1303               	bcf	3,6	;RP1=0, select bank0
  2004  04AA  00B7               	movwf	??_set_timing+2
  2005  04AB  308A               	movlw	138
  2006  04AC  00B6               	movwf	??_set_timing+1
  2007  04AD  3055               	movlw	85
  2008  04AE  00B5               	movwf	??_set_timing
  2009  04AF                     u2487:	
  2010  04AF  0BB5               	decfsz	??_set_timing,f
  2011  04B0  2CAF               	goto	u2487
  2012  04B1  0BB6               	decfsz	??_set_timing+1,f
  2013  04B2  2CAF               	goto	u2487
  2014  04B3  0BB7               	decfsz	??_set_timing+2,f
  2015  04B4  2CAF               	goto	u2487
  2016                           
  2017                           ;D_Clock.c: 331: if(PORTBbits.RB4 == 1)
  2018  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  2019  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  2020  04B7  1E06               	btfss	6,4	;volatile
  2021  04B8  2D01               	goto	l2144
  2022  04B9                     l283:	
  2023  04B9  1A06               	btfsc	6,4	;volatile
  2024  04BA  2CB9               	goto	l283
  2025                           
  2026                           ;D_Clock.c: 334: decimal_val_year ++ ;
  2027  04BB  3001               	movlw	1
  2028  04BC  00B5               	movwf	??_set_timing
  2029  04BD  0835               	movf	??_set_timing,w
  2030  04BE  07C5               	addwf	set_timing@decimal_val_year,f
  2031                           
  2032                           ;D_Clock.c: 335: if(decimal_val_year == 60)
  2033  04BF  303C               	movlw	60
  2034  04C0  0645               	xorwf	set_timing@decimal_val_year,w
  2035  04C1  1903               	btfsc	3,2
  2036                           
  2037                           ;D_Clock.c: 336: {;D_Clock.c: 337: decimal_val_year =0 ;
  2038  04C2  01C5               	clrf	set_timing@decimal_val_year
  2039                           
  2040                           ;D_Clock.c: 338: };D_Clock.c: 339: _delay((unsigned long)((100)*(20000000/4000.0)));
  2041  04C3  3003               	movlw	3
  2042  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  2043  04C5  1303               	bcf	3,6	;RP1=0, select bank0
  2044  04C6  00B7               	movwf	??_set_timing+2
  2045  04C7  308A               	movlw	138
  2046  04C8  00B6               	movwf	??_set_timing+1
  2047  04C9  3055               	movlw	85
  2048  04CA  00B5               	movwf	??_set_timing
  2049  04CB                     u2497:	
  2050  04CB  0BB5               	decfsz	??_set_timing,f
  2051  04CC  2CCB               	goto	u2497
  2052  04CD  0BB6               	decfsz	??_set_timing+1,f
  2053  04CE  2CCB               	goto	u2497
  2054  04CF  0BB7               	decfsz	??_set_timing+2,f
  2055  04D0  2CCB               	goto	u2497
  2056                           
  2057                           ;D_Clock.c: 340: lcd_command (0x83);
  2058  04D1  3083               	movlw	131
  2059  04D2  120A  158A  2685  120A  118A  	fcall	_lcd_command
  2060                           
  2061                           ;D_Clock.c: 341: lcd_string ("yer.:",5);
  2062  04D7  3005               	movlw	5
  2063  04D8  1283               	bcf	3,5	;RP0=0, select bank0
  2064  04D9  1303               	bcf	3,6	;RP1=0, select bank0
  2065  04DA  00B5               	movwf	??_set_timing
  2066  04DB  0835               	movf	??_set_timing,w
  2067  04DC  00A1               	movwf	lcd_string@num
  2068  04DD  301A               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2069  04DE  120A  158A  26E4  120A  118A  	fcall	_lcd_string
  2070                           
  2071                           ;D_Clock.c: 342: lcd_command (0x89) ;
  2072  04E3  3089               	movlw	137
  2073  04E4  120A  158A  2685  120A  118A  	fcall	_lcd_command
  2074                           
  2075                           ;D_Clock.c: 343: bcd_val_year = decimal_to_bcd (decimal_val_year);
  2076  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  2077  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  2078  04EB  0845               	movf	set_timing@decimal_val_year,w
  2079  04EC  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  2080  04F1  1283               	bcf	3,5	;RP0=0, select bank0
  2081  04F2  1303               	bcf	3,6	;RP1=0, select bank0
  2082  04F3  00B5               	movwf	??_set_timing
  2083  04F4  0835               	movf	??_set_timing,w
  2084  04F5  00BF               	movwf	set_timing@bcd_val_year
  2085                           
  2086                           ;D_Clock.c: 344: bcd_to_ascii (bcd_val_year) ;
  2087  04F6  083F               	movf	set_timing@bcd_val_year,w
  2088  04F7  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  2089                           
  2090                           ;D_Clock.c: 345: lcd_init ();
  2091  04FC  120A  158A  26B1  120A  118A  	fcall	_lcd_init
  2092  0501                     l2144:	
  2093                           
  2094                           ;D_Clock.c: 346: };D_Clock.c: 347: if(PORTBbits.RB5 == 1)
  2095  0501  1283               	bcf	3,5	;RP0=0, select bank0
  2096  0502  1303               	bcf	3,6	;RP1=0, select bank0
  2097  0503  1E86               	btfss	6,5	;volatile
  2098  0504  287F               	goto	l2164
  2099  0505                     l288:	
  2100  0505  1A86               	btfsc	6,5	;volatile
  2101  0506  2D05               	goto	l288
  2102                           
  2103                           ;D_Clock.c: 350: decimal_val_year -- ;
  2104  0507  3001               	movlw	1
  2105  0508  02C5               	subwf	set_timing@decimal_val_year,f
  2106                           
  2107                           ;D_Clock.c: 351: if(decimal_val_year == 0)
  2108  0509  0845               	movf	set_timing@decimal_val_year,w
  2109  050A  1D03               	btfss	3,2
  2110  050B  2D10               	goto	l291
  2111                           
  2112                           ;D_Clock.c: 352: {;D_Clock.c: 353: decimal_val_year = 59 ;
  2113  050C  303B               	movlw	59
  2114  050D  00B5               	movwf	??_set_timing
  2115  050E  0835               	movf	??_set_timing,w
  2116  050F  00C5               	movwf	set_timing@decimal_val_year
  2117  0510                     l291:	
  2118                           
  2119                           ;D_Clock.c: 354: };D_Clock.c: 355: _delay((unsigned long)((100)*(20000000/4000.0)));
  2120  0510  3003               	movlw	3
  2121  0511  1283               	bcf	3,5	;RP0=0, select bank0
  2122  0512  1303               	bcf	3,6	;RP1=0, select bank0
  2123  0513  00B7               	movwf	??_set_timing+2
  2124  0514  308A               	movlw	138
  2125  0515  00B6               	movwf	??_set_timing+1
  2126  0516  3055               	movlw	85
  2127  0517  00B5               	movwf	??_set_timing
  2128  0518                     u2507:	
  2129  0518  0BB5               	decfsz	??_set_timing,f
  2130  0519  2D18               	goto	u2507
  2131  051A  0BB6               	decfsz	??_set_timing+1,f
  2132  051B  2D18               	goto	u2507
  2133  051C  0BB7               	decfsz	??_set_timing+2,f
  2134  051D  2D18               	goto	u2507
  2135                           
  2136                           ;D_Clock.c: 356: lcd_command (0x83);
  2137  051E  3083               	movlw	131
  2138  051F  120A  158A  2685  120A  118A  	fcall	_lcd_command
  2139                           
  2140                           ;D_Clock.c: 357: lcd_string ("yer.:",5);
  2141  0524  3005               	movlw	5
  2142  0525  1283               	bcf	3,5	;RP0=0, select bank0
  2143  0526  1303               	bcf	3,6	;RP1=0, select bank0
  2144  0527  00B5               	movwf	??_set_timing
  2145  0528  0835               	movf	??_set_timing,w
  2146  0529  00A1               	movwf	lcd_string@num
  2147  052A  301A               	movlw	(low ((STR_16-__stringbase)| (0+32768)))& (0+255)
  2148  052B  120A  158A  26E4  120A  118A  	fcall	_lcd_string
  2149                           
  2150                           ;D_Clock.c: 358: lcd_command (0x89) ;
  2151  0530  3089               	movlw	137
  2152  0531  120A  158A  2685  120A  118A  	fcall	_lcd_command
  2153                           
  2154                           ;D_Clock.c: 359: bcd_val_year = decimal_to_bcd (decimal_val_year);
  2155  0536  1283               	bcf	3,5	;RP0=0, select bank0
  2156  0537  1303               	bcf	3,6	;RP1=0, select bank0
  2157  0538  0845               	movf	set_timing@decimal_val_year,w
  2158  0539  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  2159  053E  1283               	bcf	3,5	;RP0=0, select bank0
  2160  053F  1303               	bcf	3,6	;RP1=0, select bank0
  2161  0540  00B5               	movwf	??_set_timing
  2162  0541  0835               	movf	??_set_timing,w
  2163  0542  00BF               	movwf	set_timing@bcd_val_year
  2164                           
  2165                           ;D_Clock.c: 360: bcd_to_ascii (bcd_val_year) ;
  2166  0543  083F               	movf	set_timing@bcd_val_year,w
  2167  0544  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  2168  0549  287A               	goto	l2162
  2169  054A                     l2166:	
  2170                           
  2171                           ;D_Clock.c: 362: };D_Clock.c: 363: };D_Clock.c: 367: };D_Clock.c: 369: lcd_init ();
  2172  054A  120A  158A  26B1  120A  118A  	fcall	_lcd_init
  2173                           
  2174                           ;D_Clock.c: 370: lcd_command (0x80);
  2175  054F  3080               	movlw	128
  2176  0550  120A  158A  2685  120A  118A  	fcall	_lcd_command
  2177                           
  2178                           ;D_Clock.c: 371: lcd_string ("CLOCK:",6);
  2179  0555  3006               	movlw	6
  2180  0556  1283               	bcf	3,5	;RP0=0, select bank0
  2181  0557  1303               	bcf	3,6	;RP1=0, select bank0
  2182  0558  00B5               	movwf	??_set_timing
  2183  0559  0835               	movf	??_set_timing,w
  2184  055A  00A1               	movwf	lcd_string@num
  2185  055B  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2186  055C  120A  158A  26E4  120A  118A  	fcall	_lcd_string
  2187                           
  2188                           ;D_Clock.c: 372: lcd_command (0xc0) ;
  2189  0561  30C0               	movlw	192
  2190  0562  120A  158A  2685  120A  118A  	fcall	_lcd_command
  2191                           
  2192                           ;D_Clock.c: 373: lcd_string ("DATE:", 5) ;
  2193  0567  3005               	movlw	5
  2194  0568  1283               	bcf	3,5	;RP0=0, select bank0
  2195  0569  1303               	bcf	3,6	;RP1=0, select bank0
  2196  056A  00B5               	movwf	??_set_timing
  2197  056B  0835               	movf	??_set_timing,w
  2198  056C  00A1               	movwf	lcd_string@num
  2199  056D  3020               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2200  056E  120A  158A  26E4  120A  118A  	fcall	_lcd_string
  2201                           
  2202                           ;D_Clock.c: 374: lcd_command (0xc7) ;
  2203  0573  30C7               	movlw	199
  2204  0574  120A  158A  2685  120A  118A  	fcall	_lcd_command
  2205                           
  2206                           ;D_Clock.c: 375: timing_flag = 0 ;
  2207  0579  1283               	bcf	3,5	;RP0=0, select bank0
  2208  057A  1303               	bcf	3,6	;RP1=0, select bank0
  2209  057B  01C9               	clrf	_timing_flag
  2210                           
  2211                           ;D_Clock.c: 376: _delay((unsigned long)((300)*(20000000/4000.0))) ;
  2212  057C  3008               	movlw	8
  2213  057D  1283               	bcf	3,5	;RP0=0, select bank0
  2214  057E  1303               	bcf	3,6	;RP1=0, select bank0
  2215  057F  00B7               	movwf	??_set_timing+2
  2216  0580  309D               	movlw	157
  2217  0581  00B6               	movwf	??_set_timing+1
  2218  0582  3005               	movlw	5
  2219  0583  00B5               	movwf	??_set_timing
  2220  0584                     u2517:	
  2221  0584  0BB5               	decfsz	??_set_timing,f
  2222  0585  2D84               	goto	u2517
  2223  0586  0BB6               	decfsz	??_set_timing+1,f
  2224  0587  2D84               	goto	u2517
  2225  0588  0BB7               	decfsz	??_set_timing+2,f
  2226  0589  2D84               	goto	u2517
  2227                           
  2228                           ;D_Clock.c: 377: DS1307_write (decimal_val_second, decimal_val_minute, decimal_val_hour,
      +                          1, decimal_val_date, decimal_val_month, decimal_val_year);
  2229  058A  1283               	bcf	3,5	;RP0=0, select bank0
  2230  058B  1303               	bcf	3,6	;RP1=0, select bank0
  2231  058C  0841               	movf	set_timing@decimal_val_minute,w
  2232  058D  00B5               	movwf	??_set_timing
  2233  058E  0835               	movf	??_set_timing,w
  2234  058F  00AF               	movwf	DS1307_write@_minute
  2235  0590  0842               	movf	set_timing@decimal_val_hour,w
  2236  0591  00B6               	movwf	??_set_timing+1
  2237  0592  0836               	movf	??_set_timing+1,w
  2238  0593  00B0               	movwf	DS1307_write@_hour
  2239  0594  01B1               	clrf	DS1307_write@_day
  2240  0595  0AB1               	incf	DS1307_write@_day,f
  2241  0596  0843               	movf	set_timing@decimal_val_date,w
  2242  0597  00B7               	movwf	??_set_timing+2
  2243  0598  0837               	movf	??_set_timing+2,w
  2244  0599  00B2               	movwf	DS1307_write@_date
  2245  059A  0844               	movf	set_timing@decimal_val_month,w
  2246  059B  00B8               	movwf	??_set_timing+3
  2247  059C  0838               	movf	??_set_timing+3,w
  2248  059D  00B3               	movwf	DS1307_write@_month
  2249  059E  0845               	movf	set_timing@decimal_val_year,w
  2250  059F  00B9               	movwf	??_set_timing+4
  2251  05A0  0839               	movf	??_set_timing+4,w
  2252  05A1  00B4               	movwf	DS1307_write@_year
  2253  05A2  0840               	movf	set_timing@decimal_val_second,w
  2254  05A3  120A  118A  26B0   	fcall	_DS1307_write
  2255  05A6  0008               	return
  2256  05A7                     __end_of_set_timing:	
  2257                           
  2258                           	psect	text2
  2259  0EE4                     __ptext2:	
  2260 ;; *************** function _lcd_string *****************
  2261 ;; Defined at:
  2262 ;;		line 36 in file "LCD.h"
  2263 ;; Parameters:    Size  Location     Type
  2264 ;;  str             1    wreg     PTR const unsigned char 
  2265 ;;		 -> STR_20(6), STR_19(7), STR_18(6), STR_17(6), 
  2266 ;;		 -> STR_16(6), STR_15(6), STR_14(6), STR_13(6), 
  2267 ;;		 -> STR_12(6), STR_11(6), STR_10(6), STR_9(6), 
  2268 ;;		 -> STR_8(6), STR_7(6), STR_6(6), STR_5(6), 
  2269 ;;		 -> STR_4(6), STR_3(6), STR_2(6), STR_1(7), 
  2270 ;;  num             1    1[BANK0 ] unsigned char 
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;  str             1    4[BANK0 ] PTR const unsigned char 
  2273 ;;		 -> STR_20(6), STR_19(7), STR_18(6), STR_17(6), 
  2274 ;;		 -> STR_16(6), STR_15(6), STR_14(6), STR_13(6), 
  2275 ;;		 -> STR_12(6), STR_11(6), STR_10(6), STR_9(6), 
  2276 ;;		 -> STR_8(6), STR_7(6), STR_6(6), STR_5(6), 
  2277 ;;		 -> STR_4(6), STR_3(6), STR_2(6), STR_1(7), 
  2278 ;;  i               1    3[BANK0 ] unsigned char 
  2279 ;; Return value:  Size  Location     Type
  2280 ;;                  1    wreg      void 
  2281 ;; Registers used:
  2282 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2283 ;; Tracked objects:
  2284 ;;		On entry : 0/0
  2285 ;;		On exit  : 0/0
  2286 ;;		Unchanged: 0/0
  2287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2288 ;;      Params:         0       1       0       0       0
  2289 ;;      Locals:         0       2       0       0       0
  2290 ;;      Temps:          0       1       0       0       0
  2291 ;;      Totals:         0       4       0       0       0
  2292 ;;Total ram usage:        4 bytes
  2293 ;; Hardware stack levels used:    1
  2294 ;; Hardware stack levels required when called:    4
  2295 ;; This function calls:
  2296 ;;		_lcd_data
  2297 ;; This function is called by:
  2298 ;;		_main
  2299 ;;		_set_timing
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303                           
  2304                           ;psect for function _lcd_string
  2305  0EE4                     _lcd_string:	
  2306                           
  2307                           ;incstack = 0
  2308                           ; Regs used in _lcd_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2309                           ;lcd_string@str stored from wreg
  2310  0EE4  1283               	bcf	3,5	;RP0=0, select bank0
  2311  0EE5  1303               	bcf	3,6	;RP1=0, select bank0
  2312  0EE6  00A4               	movwf	lcd_string@str
  2313                           
  2314                           ;LCD.h: 37: unsigned char i ;;LCD.h: 38: for (i=0; i<num; i++)
  2315  0EE7  01A3               	clrf	lcd_string@i
  2316  0EE8                     l1696:	
  2317  0EE8  0821               	movf	lcd_string@num,w
  2318  0EE9  0223               	subwf	lcd_string@i,w
  2319  0EEA  1803               	btfsc	3,0
  2320  0EEB  0008               	return
  2321                           
  2322                           ;LCD.h: 39: {;LCD.h: 40: lcd_data(str[i]);
  2323  0EEC  0823               	movf	lcd_string@i,w
  2324  0EED  0724               	addwf	lcd_string@str,w
  2325  0EEE  0084               	movwf	4
  2326  0EEF  120A  158A  2000  120A  158A  	fcall	stringdir
  2327  0EF4  120A  158A  2670  120A  158A  	fcall	_lcd_data
  2328  0EF9  3001               	movlw	1
  2329  0EFA  1283               	bcf	3,5	;RP0=0, select bank0
  2330  0EFB  1303               	bcf	3,6	;RP1=0, select bank0
  2331  0EFC  00A2               	movwf	??_lcd_string
  2332  0EFD  0822               	movf	??_lcd_string,w
  2333  0EFE  07A3               	addwf	lcd_string@i,f
  2334  0EFF  2EE8               	goto	l1696
  2335  0F00                     __end_of_lcd_string:	
  2336                           
  2337                           	psect	text3
  2338  0EB1                     __ptext3:	
  2339 ;; *************** function _lcd_init *****************
  2340 ;; Defined at:
  2341 ;;		line 11 in file "LCD.h"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;		None
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;		None
  2346 ;; Return value:  Size  Location     Type
  2347 ;;                  1    wreg      void 
  2348 ;; Registers used:
  2349 ;;		wreg, status,2, status,0, pclath, cstack
  2350 ;; Tracked objects:
  2351 ;;		On entry : 0/0
  2352 ;;		On exit  : 0/0
  2353 ;;		Unchanged: 0/0
  2354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2355 ;;      Params:         0       0       0       0       0
  2356 ;;      Locals:         0       0       0       0       0
  2357 ;;      Temps:          0       0       0       0       0
  2358 ;;      Totals:         0       0       0       0       0
  2359 ;;Total ram usage:        0 bytes
  2360 ;; Hardware stack levels used:    1
  2361 ;; Hardware stack levels required when called:    4
  2362 ;; This function calls:
  2363 ;;		_lcd_command
  2364 ;; This function is called by:
  2365 ;;		_main
  2366 ;;		_set_timing
  2367 ;; This function uses a non-reentrant model
  2368 ;;
  2369                           
  2370                           
  2371                           ;psect for function _lcd_init
  2372  0EB1                     _lcd_init:	
  2373                           
  2374                           ;LCD.h: 12: lcd_command (0x38);
  2375                           
  2376                           ;incstack = 0
  2377                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  2378  0EB1  3038               	movlw	56
  2379  0EB2  120A  158A  2685  120A  158A  	fcall	_lcd_command
  2380                           
  2381                           ;LCD.h: 13: lcd_command (0x06);
  2382  0EB7  3006               	movlw	6
  2383  0EB8  120A  158A  2685  120A  158A  	fcall	_lcd_command
  2384                           
  2385                           ;LCD.h: 14: lcd_command (0x0c);
  2386  0EBD  300C               	movlw	12
  2387  0EBE  120A  158A  2685  120A  158A  	fcall	_lcd_command
  2388                           
  2389                           ;LCD.h: 15: lcd_command (0x01);
  2390  0EC3  3001               	movlw	1
  2391  0EC4  120A  158A  2685   	fcall	_lcd_command
  2392  0EC7  0008               	return
  2393  0EC8                     __end_of_lcd_init:	
  2394                           
  2395                           	psect	text4
  2396  0F00                     __ptext4:	
  2397 ;; *************** function _bcd_to_decimal *****************
  2398 ;; Defined at:
  2399 ;;		line 20 in file "Conversion.h"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;  value           1    wreg     unsigned char 
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;  value           1    4[BANK0 ] unsigned char 
  2404 ;;  dec             1    5[BANK0 ] unsigned char 
  2405 ;; Return value:  Size  Location     Type
  2406 ;;                  1    wreg      unsigned char 
  2407 ;; Registers used:
  2408 ;;		wreg, status,2, status,0, pclath, cstack
  2409 ;; Tracked objects:
  2410 ;;		On entry : 0/0
  2411 ;;		On exit  : 0/0
  2412 ;;		Unchanged: 0/0
  2413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2414 ;;      Params:         0       0       0       0       0
  2415 ;;      Locals:         0       2       0       0       0
  2416 ;;      Temps:          0       2       0       0       0
  2417 ;;      Totals:         0       4       0       0       0
  2418 ;;Total ram usage:        4 bytes
  2419 ;; Hardware stack levels used:    1
  2420 ;; Hardware stack levels required when called:    4
  2421 ;; This function calls:
  2422 ;;		___bmul
  2423 ;; This function is called by:
  2424 ;;		_set_timing
  2425 ;; This function uses a non-reentrant model
  2426 ;;
  2427                           
  2428                           
  2429                           ;psect for function _bcd_to_decimal
  2430  0F00                     _bcd_to_decimal:	
  2431                           
  2432                           ;incstack = 0
  2433                           ; Regs used in _bcd_to_decimal: [wreg+status,2+status,0+pclath+cstack]
  2434                           ;bcd_to_decimal@value stored from wreg
  2435  0F00  1283               	bcf	3,5	;RP0=0, select bank0
  2436  0F01  1303               	bcf	3,6	;RP1=0, select bank0
  2437  0F02  00A4               	movwf	bcd_to_decimal@value
  2438                           
  2439                           ;Conversion.h: 22: unsigned char dec ;;Conversion.h: 23: dec = value ;
  2440  0F03  0824               	movf	bcd_to_decimal@value,w
  2441  0F04  00A2               	movwf	??_bcd_to_decimal
  2442  0F05  0822               	movf	??_bcd_to_decimal,w
  2443  0F06  00A5               	movwf	bcd_to_decimal@dec
  2444                           
  2445                           ;Conversion.h: 24: dec = dec & 0xf0 ;
  2446  0F07  0825               	movf	bcd_to_decimal@dec,w
  2447  0F08  39F0               	andlw	240
  2448  0F09  00A2               	movwf	??_bcd_to_decimal
  2449  0F0A  0822               	movf	??_bcd_to_decimal,w
  2450  0F0B  00A5               	movwf	bcd_to_decimal@dec
  2451                           
  2452                           ;Conversion.h: 25: dec = dec >> 4 ;
  2453  0F0C  0825               	movf	bcd_to_decimal@dec,w
  2454  0F0D  00A2               	movwf	??_bcd_to_decimal
  2455  0F0E  3004               	movlw	4
  2456  0F0F                     u1405:	
  2457  0F0F  1003               	clrc
  2458  0F10  0CA2               	rrf	??_bcd_to_decimal,f
  2459  0F11  3EFF               	addlw	-1
  2460  0F12  1D03               	skipz
  2461  0F13  2F0F               	goto	u1405
  2462  0F14  0822               	movf	??_bcd_to_decimal,w
  2463  0F15  00A3               	movwf	??_bcd_to_decimal+1
  2464  0F16  0823               	movf	??_bcd_to_decimal+1,w
  2465  0F17  00A5               	movwf	bcd_to_decimal@dec
  2466                           
  2467                           ;Conversion.h: 26: dec = dec * 10 ;
  2468  0F18  300A               	movlw	10
  2469  0F19  00A2               	movwf	??_bcd_to_decimal
  2470  0F1A  0822               	movf	??_bcd_to_decimal,w
  2471  0F1B  00F6               	movwf	___bmul@multiplicand
  2472  0F1C  0825               	movf	bcd_to_decimal@dec,w
  2473  0F1D  120A  158A  2648   	fcall	___bmul
  2474  0F20  1283               	bcf	3,5	;RP0=0, select bank0
  2475  0F21  1303               	bcf	3,6	;RP1=0, select bank0
  2476  0F22  00A3               	movwf	??_bcd_to_decimal+1
  2477  0F23  0823               	movf	??_bcd_to_decimal+1,w
  2478  0F24  00A5               	movwf	bcd_to_decimal@dec
  2479                           
  2480                           ;Conversion.h: 27: dec = dec + (value & 0x0f) ;
  2481  0F25  300F               	movlw	15
  2482  0F26  0524               	andwf	bcd_to_decimal@value,w
  2483  0F27  00A2               	movwf	??_bcd_to_decimal
  2484  0F28  0825               	movf	bcd_to_decimal@dec,w
  2485  0F29  0722               	addwf	??_bcd_to_decimal,w
  2486  0F2A  00A3               	movwf	??_bcd_to_decimal+1
  2487  0F2B  0823               	movf	??_bcd_to_decimal+1,w
  2488  0F2C  00A5               	movwf	bcd_to_decimal@dec
  2489                           
  2490                           ;Conversion.h: 28: return (dec) ;
  2491  0F2D  0825               	movf	bcd_to_decimal@dec,w
  2492  0F2E  0008               	return
  2493  0F2F                     __end_of_bcd_to_decimal:	
  2494                           
  2495                           	psect	text5
  2496  0E48                     __ptext5:	
  2497 ;; *************** function ___bmul *****************
  2498 ;; Defined at:
  2499 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;  multiplier      1    wreg     unsigned char 
  2502 ;;  multiplicand    1    6[COMMON] unsigned char 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  multiplier      1    1[BANK0 ] unsigned char 
  2505 ;;  product         1    0[BANK0 ] unsigned char 
  2506 ;; Return value:  Size  Location     Type
  2507 ;;                  1    wreg      unsigned char 
  2508 ;; Registers used:
  2509 ;;		wreg, status,2, status,0
  2510 ;; Tracked objects:
  2511 ;;		On entry : 0/0
  2512 ;;		On exit  : 0/0
  2513 ;;		Unchanged: 0/0
  2514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2515 ;;      Params:         1       0       0       0       0
  2516 ;;      Locals:         0       2       0       0       0
  2517 ;;      Temps:          1       0       0       0       0
  2518 ;;      Totals:         2       2       0       0       0
  2519 ;;Total ram usage:        4 bytes
  2520 ;; Hardware stack levels used:    1
  2521 ;; Hardware stack levels required when called:    3
  2522 ;; This function calls:
  2523 ;;		Nothing
  2524 ;; This function is called by:
  2525 ;;		_bcd_to_decimal
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529                           
  2530                           ;psect for function ___bmul
  2531  0E48                     ___bmul:	
  2532                           
  2533                           ;incstack = 0
  2534                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2535                           ;___bmul@multiplier stored from wreg
  2536  0E48  1283               	bcf	3,5	;RP0=0, select bank0
  2537  0E49  1303               	bcf	3,6	;RP1=0, select bank0
  2538  0E4A  00A1               	movwf	___bmul@multiplier
  2539  0E4B  01A0               	clrf	___bmul@product
  2540  0E4C                     l1676:	
  2541  0E4C  1C21               	btfss	___bmul@multiplier,0
  2542  0E4D  2E52               	goto	l1680
  2543  0E4E  0876               	movf	___bmul@multiplicand,w
  2544  0E4F  00F7               	movwf	??___bmul
  2545  0E50  0877               	movf	??___bmul,w
  2546  0E51  07A0               	addwf	___bmul@product,f
  2547  0E52                     l1680:	
  2548  0E52  1003               	clrc
  2549  0E53  0DF6               	rlf	___bmul@multiplicand,f
  2550  0E54  1003               	clrc
  2551  0E55  0CA1               	rrf	___bmul@multiplier,f
  2552  0E56  0821               	movf	___bmul@multiplier,w
  2553  0E57  1D03               	btfss	3,2
  2554  0E58  2E4C               	goto	l1676
  2555  0E59  0820               	movf	___bmul@product,w
  2556  0E5A  0008               	return
  2557  0E5B                     __end_of___bmul:	
  2558                           
  2559                           	psect	text6
  2560  06B0                     __ptext6:	
  2561 ;; *************** function _DS1307_write *****************
  2562 ;; Defined at:
  2563 ;;		line 13 in file "DS1307_write.h"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;  _second         1    wreg     unsigned char 
  2566 ;;  _minute         1   15[BANK0 ] unsigned char 
  2567 ;;  _hour           1   16[BANK0 ] unsigned char 
  2568 ;;  _day            1   17[BANK0 ] unsigned char 
  2569 ;;  _date           1   18[BANK0 ] unsigned char 
  2570 ;;  _month          1   19[BANK0 ] unsigned char 
  2571 ;;  _year           1   20[BANK0 ] unsigned char 
  2572 ;; Auto vars:     Size  Location     Type
  2573 ;;  _second         1    7[COMMON] unsigned char 
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      void 
  2576 ;; Registers used:
  2577 ;;		wreg, status,2, status,0, pclath, cstack
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2583 ;;      Params:         0       6       0       0       0
  2584 ;;      Locals:         1       0       0       0       0
  2585 ;;      Temps:          0       0       0       0       0
  2586 ;;      Totals:         1       6       0       0       0
  2587 ;;Total ram usage:        7 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; Hardware stack levels required when called:    5
  2590 ;; This function calls:
  2591 ;;		_decimal_to_bcd
  2592 ;; This function is called by:
  2593 ;;		_set_timing
  2594 ;; This function uses a non-reentrant model
  2595 ;;
  2596                           
  2597                           
  2598                           ;psect for function _DS1307_write
  2599  06B0                     _DS1307_write:	
  2600                           
  2601                           ;incstack = 0
  2602                           ; Regs used in _DS1307_write: [wreg+status,2+status,0+pclath+cstack]
  2603                           ;DS1307_write@_second stored from wreg
  2604  06B0  00F7               	movwf	DS1307_write@_second
  2605                           
  2606                           ;DS1307_write.h: 16: SSPCON2bits.SEN = 1;
  2607  06B1  1683               	bsf	3,5	;RP0=1, select bank1
  2608  06B2  1303               	bcf	3,6	;RP1=0, select bank1
  2609  06B3  1411               	bsf	17,0	;volatile
  2610  06B4                     l166:	
  2611                           ;DS1307_write.h: 17: while (SEN);
  2612                           
  2613  06B4  1811               	btfsc	17,0	;volatile
  2614  06B5  2EB4               	goto	l166
  2615                           
  2616                           ;DS1307_write.h: 18: PIR1bits.SSPIF =0 ;
  2617  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  2618  06B7  1303               	bcf	3,6	;RP1=0, select bank0
  2619  06B8  118C               	bcf	12,3	;volatile
  2620                           
  2621                           ;DS1307_write.h: 21: SSPBUF = 0xd0 ;
  2622  06B9  30D0               	movlw	208
  2623  06BA  0093               	movwf	19	;volatile
  2624  06BB                     l169:	
  2625                           ;DS1307_write.h: 22: while (!SSPIF) ;
  2626                           
  2627  06BB  1D8C               	btfss	12,3	;volatile
  2628  06BC  2EBB               	goto	l169
  2629                           
  2630                           ;DS1307_write.h: 23: PIR1bits.SSPIF = 0 ;
  2631  06BD  118C               	bcf	12,3	;volatile
  2632                           
  2633                           ;DS1307_write.h: 24: if (SSPCON2bits.ACKSTAT)
  2634  06BE  1683               	bsf	3,5	;RP0=1, select bank1
  2635  06BF  1303               	bcf	3,6	;RP1=0, select bank1
  2636  06C0  1F11               	btfss	17,6	;volatile
  2637  06C1  2EC6               	goto	l1736
  2638                           
  2639                           ;DS1307_write.h: 25: {;DS1307_write.h: 26: SSPCON2bits.PEN = 1;
  2640  06C2  1511               	bsf	17,2	;volatile
  2641  06C3                     l173:	
  2642                           ;DS1307_write.h: 27: while (PEN);
  2643                           
  2644  06C3  1D11               	btfss	17,2	;volatile
  2645  06C4  0008               	return
  2646  06C5  2EC3               	goto	l173
  2647  06C6                     l1736:	
  2648                           
  2649                           ;DS1307_write.h: 29: };DS1307_write.h: 32: SSPBUF = 0x00 ;
  2650  06C6  1283               	bcf	3,5	;RP0=0, select bank0
  2651  06C7  1303               	bcf	3,6	;RP1=0, select bank0
  2652  06C8  0193               	clrf	19	;volatile
  2653  06C9                     l177:	
  2654                           ;DS1307_write.h: 33: while (!SSPIF);
  2655                           
  2656  06C9  1D8C               	btfss	12,3	;volatile
  2657  06CA  2EC9               	goto	l177
  2658                           
  2659                           ;DS1307_write.h: 34: PIR1bits.SSPIF = 0 ;
  2660  06CB  118C               	bcf	12,3	;volatile
  2661                           
  2662                           ;DS1307_write.h: 35: if (SSPCON2bits.ACKSTAT)
  2663  06CC  1683               	bsf	3,5	;RP0=1, select bank1
  2664  06CD  1303               	bcf	3,6	;RP1=0, select bank1
  2665  06CE  1F11               	btfss	17,6	;volatile
  2666  06CF  2ED4               	goto	l1740
  2667                           
  2668                           ;DS1307_write.h: 36: {;DS1307_write.h: 37: SSPCON2bits.PEN = 1;
  2669  06D0  1511               	bsf	17,2	;volatile
  2670  06D1                     l181:	
  2671                           ;DS1307_write.h: 38: while (PEN);
  2672                           
  2673  06D1  1D11               	btfss	17,2	;volatile
  2674  06D2  0008               	return
  2675  06D3  2ED1               	goto	l181
  2676  06D4                     l1740:	
  2677                           
  2678                           ;DS1307_write.h: 40: };DS1307_write.h: 42: SSPBUF = decimal_to_bcd (_second) ;
  2679  06D4  0877               	movf	DS1307_write@_second,w
  2680  06D5  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  2681  06DA  1283               	bcf	3,5	;RP0=0, select bank0
  2682  06DB  1303               	bcf	3,6	;RP1=0, select bank0
  2683  06DC  0093               	movwf	19	;volatile
  2684  06DD                     l184:	
  2685                           ;DS1307_write.h: 43: while(!SSPIF);
  2686                           
  2687  06DD  1D8C               	btfss	12,3	;volatile
  2688  06DE  2EDD               	goto	l184
  2689                           
  2690                           ;DS1307_write.h: 44: PIR1bits.SSPIF = 0 ;
  2691  06DF  118C               	bcf	12,3	;volatile
  2692                           
  2693                           ;DS1307_write.h: 46: SSPBUF = decimal_to_bcd (_minute) ;
  2694  06E0  082F               	movf	DS1307_write@_minute,w
  2695  06E1  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  2696  06E6  1283               	bcf	3,5	;RP0=0, select bank0
  2697  06E7  1303               	bcf	3,6	;RP1=0, select bank0
  2698  06E8  0093               	movwf	19	;volatile
  2699  06E9                     l187:	
  2700                           ;DS1307_write.h: 47: while(!SSPIF);
  2701                           
  2702  06E9  1D8C               	btfss	12,3	;volatile
  2703  06EA  2EE9               	goto	l187
  2704                           
  2705                           ;DS1307_write.h: 48: PIR1bits.SSPIF = 0 ;
  2706  06EB  118C               	bcf	12,3	;volatile
  2707                           
  2708                           ;DS1307_write.h: 50: SSPBUF = decimal_to_bcd (_hour) ;
  2709  06EC  0830               	movf	DS1307_write@_hour,w
  2710  06ED  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  2711  06F2  1283               	bcf	3,5	;RP0=0, select bank0
  2712  06F3  1303               	bcf	3,6	;RP1=0, select bank0
  2713  06F4  0093               	movwf	19	;volatile
  2714  06F5                     l190:	
  2715                           ;DS1307_write.h: 51: while(!SSPIF);
  2716                           
  2717  06F5  1D8C               	btfss	12,3	;volatile
  2718  06F6  2EF5               	goto	l190
  2719                           
  2720                           ;DS1307_write.h: 52: PIR1bits.SSPIF = 0 ;
  2721  06F7  118C               	bcf	12,3	;volatile
  2722                           
  2723                           ;DS1307_write.h: 54: SSPBUF = decimal_to_bcd (_day) ;
  2724  06F8  0831               	movf	DS1307_write@_day,w
  2725  06F9  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  2726  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  2727  06FF  1303               	bcf	3,6	;RP1=0, select bank0
  2728  0700  0093               	movwf	19	;volatile
  2729  0701                     l193:	
  2730                           ;DS1307_write.h: 55: while(!SSPIF);
  2731                           
  2732  0701  1D8C               	btfss	12,3	;volatile
  2733  0702  2F01               	goto	l193
  2734                           
  2735                           ;DS1307_write.h: 56: PIR1bits.SSPIF = 0 ;
  2736  0703  118C               	bcf	12,3	;volatile
  2737                           
  2738                           ;DS1307_write.h: 58: SSPBUF = decimal_to_bcd (_date) ;
  2739  0704  0832               	movf	DS1307_write@_date,w
  2740  0705  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  2741  070A  1283               	bcf	3,5	;RP0=0, select bank0
  2742  070B  1303               	bcf	3,6	;RP1=0, select bank0
  2743  070C  0093               	movwf	19	;volatile
  2744  070D                     l196:	
  2745                           ;DS1307_write.h: 59: while(!SSPIF);
  2746                           
  2747  070D  1D8C               	btfss	12,3	;volatile
  2748  070E  2F0D               	goto	l196
  2749                           
  2750                           ;DS1307_write.h: 60: PIR1bits.SSPIF = 0 ;
  2751  070F  118C               	bcf	12,3	;volatile
  2752                           
  2753                           ;DS1307_write.h: 62: SSPBUF = decimal_to_bcd (_month) ;
  2754  0710  0833               	movf	DS1307_write@_month,w
  2755  0711  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  2756  0716  1283               	bcf	3,5	;RP0=0, select bank0
  2757  0717  1303               	bcf	3,6	;RP1=0, select bank0
  2758  0718  0093               	movwf	19	;volatile
  2759  0719                     l199:	
  2760                           ;DS1307_write.h: 63: while(!SSPIF);
  2761                           
  2762  0719  1D8C               	btfss	12,3	;volatile
  2763  071A  2F19               	goto	l199
  2764                           
  2765                           ;DS1307_write.h: 64: PIR1bits.SSPIF = 0 ;
  2766  071B  118C               	bcf	12,3	;volatile
  2767                           
  2768                           ;DS1307_write.h: 66: SSPBUF = decimal_to_bcd (_year) ;
  2769  071C  0834               	movf	DS1307_write@_year,w
  2770  071D  120A  158A  2767  120A  118A  	fcall	_decimal_to_bcd
  2771  0722  1283               	bcf	3,5	;RP0=0, select bank0
  2772  0723  1303               	bcf	3,6	;RP1=0, select bank0
  2773  0724  0093               	movwf	19	;volatile
  2774  0725                     l202:	
  2775                           ;DS1307_write.h: 67: while(!SSPIF);
  2776                           
  2777  0725  1D8C               	btfss	12,3	;volatile
  2778  0726  2F25               	goto	l202
  2779                           
  2780                           ;DS1307_write.h: 68: PIR1bits.SSPIF = 0 ;
  2781  0727  118C               	bcf	12,3	;volatile
  2782                           
  2783                           ;DS1307_write.h: 70: SSPBUF = 0x00 ;
  2784  0728  0193               	clrf	19	;volatile
  2785  0729                     l205:	
  2786                           ;DS1307_write.h: 71: while(!SSPIF);
  2787                           
  2788  0729  1D8C               	btfss	12,3	;volatile
  2789  072A  2F29               	goto	l205
  2790                           
  2791                           ;DS1307_write.h: 72: PIR1bits.SSPIF = 0 ;
  2792  072B  118C               	bcf	12,3	;volatile
  2793                           
  2794                           ;DS1307_write.h: 75: SSPCON2bits.PEN = 1 ;
  2795  072C  1683               	bsf	3,5	;RP0=1, select bank1
  2796  072D  1303               	bcf	3,6	;RP1=0, select bank1
  2797  072E  1511               	bsf	17,2	;volatile
  2798  072F                     l208:	
  2799                           ;DS1307_write.h: 76: while(PEN) ;
  2800                           
  2801  072F  1911               	btfsc	17,2	;volatile
  2802  0730  2F2F               	goto	l208
  2803                           
  2804                           ;DS1307_write.h: 77: PIR1bits.SSPIF = 0 ;
  2805  0731  1283               	bcf	3,5	;RP0=0, select bank0
  2806  0732  1303               	bcf	3,6	;RP1=0, select bank0
  2807  0733  118C               	bcf	12,3	;volatile
  2808  0734  0008               	return
  2809  0735                     __end_of_DS1307_write:	
  2810                           
  2811                           	psect	text7
  2812  0F67                     __ptext7:	
  2813 ;; *************** function _decimal_to_bcd *****************
  2814 ;; Defined at:
  2815 ;;		line 31 in file "Conversion.h"
  2816 ;; Parameters:    Size  Location     Type
  2817 ;;  value           1    wreg     unsigned char 
  2818 ;; Auto vars:     Size  Location     Type
  2819 ;;  value           1   14[BANK0 ] unsigned char 
  2820 ;;  hex             1   13[BANK0 ] unsigned char 
  2821 ;;  lsb             1   12[BANK0 ] unsigned char 
  2822 ;;  msb             1   11[BANK0 ] unsigned char 
  2823 ;; Return value:  Size  Location     Type
  2824 ;;                  1    wreg      unsigned char 
  2825 ;; Registers used:
  2826 ;;		wreg, status,2, status,0, pclath, cstack
  2827 ;; Tracked objects:
  2828 ;;		On entry : 0/0
  2829 ;;		On exit  : 0/0
  2830 ;;		Unchanged: 0/0
  2831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2832 ;;      Params:         0       0       0       0       0
  2833 ;;      Locals:         0       4       0       0       0
  2834 ;;      Temps:          0       3       0       0       0
  2835 ;;      Totals:         0       7       0       0       0
  2836 ;;Total ram usage:        7 bytes
  2837 ;; Hardware stack levels used:    1
  2838 ;; Hardware stack levels required when called:    4
  2839 ;; This function calls:
  2840 ;;		___awdiv
  2841 ;;		___awmod
  2842 ;; This function is called by:
  2843 ;;		_DS1307_write
  2844 ;;		_set_timing
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           
  2849                           ;psect for function _decimal_to_bcd
  2850  0F67                     _decimal_to_bcd:	
  2851                           
  2852                           ;incstack = 0
  2853                           ; Regs used in _decimal_to_bcd: [wreg+status,2+status,0+pclath+cstack]
  2854                           ;decimal_to_bcd@value stored from wreg
  2855  0F67  1283               	bcf	3,5	;RP0=0, select bank0
  2856  0F68  1303               	bcf	3,6	;RP1=0, select bank0
  2857  0F69  00AE               	movwf	decimal_to_bcd@value
  2858                           
  2859                           ;Conversion.h: 33: unsigned char msb ;;Conversion.h: 34: unsigned char lsb ;;Conversion.
      +                          h: 35: unsigned char hex ;;Conversion.h: 37: msb = value / 10 ;
  2860  0F6A  300A               	movlw	10
  2861  0F6B  00A0               	movwf	___awdiv@divisor
  2862  0F6C  3000               	movlw	0
  2863  0F6D  00A1               	movwf	___awdiv@divisor+1
  2864  0F6E  082E               	movf	decimal_to_bcd@value,w
  2865  0F6F  00A8               	movwf	??_decimal_to_bcd
  2866  0F70  01A9               	clrf	??_decimal_to_bcd+1
  2867  0F71  0828               	movf	??_decimal_to_bcd,w
  2868  0F72  00A2               	movwf	___awdiv@dividend
  2869  0F73  0829               	movf	??_decimal_to_bcd+1,w
  2870  0F74  00A3               	movwf	___awdiv@dividend+1
  2871  0F75  120A  158A  27A5  120A  158A  	fcall	___awdiv
  2872  0F7A  1283               	bcf	3,5	;RP0=0, select bank0
  2873  0F7B  1303               	bcf	3,6	;RP1=0, select bank0
  2874  0F7C  0820               	movf	?___awdiv,w
  2875  0F7D  00AA               	movwf	??_decimal_to_bcd+2
  2876  0F7E  082A               	movf	??_decimal_to_bcd+2,w
  2877  0F7F  00AB               	movwf	decimal_to_bcd@msb
  2878                           
  2879                           ;Conversion.h: 38: lsb = value % 10 ;
  2880  0F80  300A               	movlw	10
  2881  0F81  00A0               	movwf	___awmod@divisor
  2882  0F82  3000               	movlw	0
  2883  0F83  00A1               	movwf	___awmod@divisor+1
  2884  0F84  082E               	movf	decimal_to_bcd@value,w
  2885  0F85  00A8               	movwf	??_decimal_to_bcd
  2886  0F86  01A9               	clrf	??_decimal_to_bcd+1
  2887  0F87  0828               	movf	??_decimal_to_bcd,w
  2888  0F88  00A2               	movwf	___awmod@dividend
  2889  0F89  0829               	movf	??_decimal_to_bcd+1,w
  2890  0F8A  00A3               	movwf	___awmod@dividend+1
  2891  0F8B  120A  118A  27A7  120A  158A  	fcall	___awmod
  2892  0F90  1283               	bcf	3,5	;RP0=0, select bank0
  2893  0F91  1303               	bcf	3,6	;RP1=0, select bank0
  2894  0F92  0820               	movf	?___awmod,w
  2895  0F93  00AA               	movwf	??_decimal_to_bcd+2
  2896  0F94  082A               	movf	??_decimal_to_bcd+2,w
  2897  0F95  00AC               	movwf	decimal_to_bcd@lsb
  2898                           
  2899                           ;Conversion.h: 39: hex = ((msb<< 4) + lsb ) ;
  2900  0F96  082B               	movf	decimal_to_bcd@msb,w
  2901  0F97  00A8               	movwf	??_decimal_to_bcd
  2902  0F98  3004               	movlw	4
  2903  0F99                     u1355:	
  2904  0F99  1003               	clrc
  2905  0F9A  0DA8               	rlf	??_decimal_to_bcd,f
  2906  0F9B  3EFF               	addlw	-1
  2907  0F9C  1D03               	skipz
  2908  0F9D  2F99               	goto	u1355
  2909  0F9E  082C               	movf	decimal_to_bcd@lsb,w
  2910  0F9F  0728               	addwf	??_decimal_to_bcd,w
  2911  0FA0  00A9               	movwf	??_decimal_to_bcd+1
  2912  0FA1  0829               	movf	??_decimal_to_bcd+1,w
  2913  0FA2  00AD               	movwf	decimal_to_bcd@hex
  2914                           
  2915                           ;Conversion.h: 40: return (hex) ;
  2916  0FA3  082D               	movf	decimal_to_bcd@hex,w
  2917  0FA4  0008               	return
  2918  0FA5                     __end_of_decimal_to_bcd:	
  2919                           
  2920                           	psect	text8
  2921  07A7                     __ptext8:	
  2922 ;; *************** function ___awmod *****************
  2923 ;; Defined at:
  2924 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;  divisor         2    0[BANK0 ] int 
  2927 ;;  dividend        2    2[BANK0 ] int 
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;  sign            1    5[BANK0 ] unsigned char 
  2930 ;;  counter         1    4[BANK0 ] unsigned char 
  2931 ;; Return value:  Size  Location     Type
  2932 ;;                  2    0[BANK0 ] int 
  2933 ;; Registers used:
  2934 ;;		wreg, status,2, status,0
  2935 ;; Tracked objects:
  2936 ;;		On entry : 0/0
  2937 ;;		On exit  : 0/0
  2938 ;;		Unchanged: 0/0
  2939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2940 ;;      Params:         0       4       0       0       0
  2941 ;;      Locals:         0       2       0       0       0
  2942 ;;      Temps:          1       0       0       0       0
  2943 ;;      Totals:         1       6       0       0       0
  2944 ;;Total ram usage:        7 bytes
  2945 ;; Hardware stack levels used:    1
  2946 ;; Hardware stack levels required when called:    3
  2947 ;; This function calls:
  2948 ;;		Nothing
  2949 ;; This function is called by:
  2950 ;;		_decimal_to_bcd
  2951 ;; This function uses a non-reentrant model
  2952 ;;
  2953                           
  2954                           
  2955                           ;psect for function ___awmod
  2956  07A7                     ___awmod:	
  2957                           
  2958                           ;incstack = 0
  2959                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2960  07A7  1283               	bcf	3,5	;RP0=0, select bank0
  2961  07A8  1303               	bcf	3,6	;RP1=0, select bank0
  2962  07A9  01A5               	clrf	___awmod@sign
  2963  07AA  1FA3               	btfss	___awmod@dividend+1,7
  2964  07AB  2FB3               	goto	l1616
  2965  07AC  09A2               	comf	___awmod@dividend,f
  2966  07AD  09A3               	comf	___awmod@dividend+1,f
  2967  07AE  0AA2               	incf	___awmod@dividend,f
  2968  07AF  1903               	skipnz
  2969  07B0  0AA3               	incf	___awmod@dividend+1,f
  2970  07B1  01A5               	clrf	___awmod@sign
  2971  07B2  0AA5               	incf	___awmod@sign,f
  2972  07B3                     l1616:	
  2973  07B3  1FA1               	btfss	___awmod@divisor+1,7
  2974  07B4  2FBA               	goto	l1620
  2975  07B5  09A0               	comf	___awmod@divisor,f
  2976  07B6  09A1               	comf	___awmod@divisor+1,f
  2977  07B7  0AA0               	incf	___awmod@divisor,f
  2978  07B8  1903               	skipnz
  2979  07B9  0AA1               	incf	___awmod@divisor+1,f
  2980  07BA                     l1620:	
  2981  07BA  0820               	movf	___awmod@divisor,w
  2982  07BB  0421               	iorwf	___awmod@divisor+1,w
  2983  07BC  1903               	btfsc	3,2
  2984  07BD  2FE7               	goto	l1638
  2985  07BE  01A4               	clrf	___awmod@counter
  2986  07BF  0AA4               	incf	___awmod@counter,f
  2987  07C0                     l1628:	
  2988  07C0  1BA1               	btfsc	___awmod@divisor+1,7
  2989  07C1  2FCE               	goto	l1630
  2990  07C2  3001               	movlw	1
  2991  07C3                     u1295:	
  2992  07C3  1003               	clrc
  2993  07C4  0DA0               	rlf	___awmod@divisor,f
  2994  07C5  0DA1               	rlf	___awmod@divisor+1,f
  2995  07C6  3EFF               	addlw	-1
  2996  07C7  1D03               	skipz
  2997  07C8  2FC3               	goto	u1295
  2998  07C9  3001               	movlw	1
  2999  07CA  00F6               	movwf	??___awmod
  3000  07CB  0876               	movf	??___awmod,w
  3001  07CC  07A4               	addwf	___awmod@counter,f
  3002  07CD  2FC0               	goto	l1628
  3003  07CE                     l1630:	
  3004  07CE  0821               	movf	___awmod@divisor+1,w
  3005  07CF  0223               	subwf	___awmod@dividend+1,w
  3006  07D0  1D03               	skipz
  3007  07D1  2FD4               	goto	u1315
  3008  07D2  0820               	movf	___awmod@divisor,w
  3009  07D3  0222               	subwf	___awmod@dividend,w
  3010  07D4                     u1315:	
  3011  07D4  1C03               	skipc
  3012  07D5  2FDC               	goto	l1634
  3013  07D6  0820               	movf	___awmod@divisor,w
  3014  07D7  02A2               	subwf	___awmod@dividend,f
  3015  07D8  0821               	movf	___awmod@divisor+1,w
  3016  07D9  1C03               	skipc
  3017  07DA  03A3               	decf	___awmod@dividend+1,f
  3018  07DB  02A3               	subwf	___awmod@dividend+1,f
  3019  07DC                     l1634:	
  3020  07DC  3001               	movlw	1
  3021  07DD                     u1325:	
  3022  07DD  1003               	clrc
  3023  07DE  0CA1               	rrf	___awmod@divisor+1,f
  3024  07DF  0CA0               	rrf	___awmod@divisor,f
  3025  07E0  3EFF               	addlw	-1
  3026  07E1  1D03               	skipz
  3027  07E2  2FDD               	goto	u1325
  3028  07E3  3001               	movlw	1
  3029  07E4  02A4               	subwf	___awmod@counter,f
  3030  07E5  1D03               	btfss	3,2
  3031  07E6  2FCE               	goto	l1630
  3032  07E7                     l1638:	
  3033  07E7  0825               	movf	___awmod@sign,w
  3034  07E8  1903               	btfsc	3,2
  3035  07E9  2FEF               	goto	l1642
  3036  07EA  09A2               	comf	___awmod@dividend,f
  3037  07EB  09A3               	comf	___awmod@dividend+1,f
  3038  07EC  0AA2               	incf	___awmod@dividend,f
  3039  07ED  1903               	skipnz
  3040  07EE  0AA3               	incf	___awmod@dividend+1,f
  3041  07EF                     l1642:	
  3042  07EF  0823               	movf	___awmod@dividend+1,w
  3043  07F0  00A1               	movwf	?___awmod+1
  3044  07F1  0822               	movf	___awmod@dividend,w
  3045  07F2  00A0               	movwf	?___awmod
  3046  07F3  0008               	return
  3047  07F4                     __end_of___awmod:	
  3048                           
  3049                           	psect	text9
  3050  0FA5                     __ptext9:	
  3051 ;; *************** function ___awdiv *****************
  3052 ;; Defined at:
  3053 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;  divisor         2    0[BANK0 ] int 
  3056 ;;  dividend        2    2[BANK0 ] int 
  3057 ;; Auto vars:     Size  Location     Type
  3058 ;;  quotient        2    6[BANK0 ] int 
  3059 ;;  sign            1    5[BANK0 ] unsigned char 
  3060 ;;  counter         1    4[BANK0 ] unsigned char 
  3061 ;; Return value:  Size  Location     Type
  3062 ;;                  2    0[BANK0 ] int 
  3063 ;; Registers used:
  3064 ;;		wreg, status,2, status,0
  3065 ;; Tracked objects:
  3066 ;;		On entry : 0/0
  3067 ;;		On exit  : 0/0
  3068 ;;		Unchanged: 0/0
  3069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3070 ;;      Params:         0       4       0       0       0
  3071 ;;      Locals:         0       4       0       0       0
  3072 ;;      Temps:          1       0       0       0       0
  3073 ;;      Totals:         1       8       0       0       0
  3074 ;;Total ram usage:        9 bytes
  3075 ;; Hardware stack levels used:    1
  3076 ;; Hardware stack levels required when called:    3
  3077 ;; This function calls:
  3078 ;;		Nothing
  3079 ;; This function is called by:
  3080 ;;		_decimal_to_bcd
  3081 ;; This function uses a non-reentrant model
  3082 ;;
  3083                           
  3084                           
  3085                           ;psect for function ___awdiv
  3086  0FA5                     ___awdiv:	
  3087                           
  3088                           ;incstack = 0
  3089                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3090  0FA5  1283               	bcf	3,5	;RP0=0, select bank0
  3091  0FA6  1303               	bcf	3,6	;RP1=0, select bank0
  3092  0FA7  01A5               	clrf	___awdiv@sign
  3093  0FA8  1FA1               	btfss	___awdiv@divisor+1,7
  3094  0FA9  2FB1               	goto	l1572
  3095  0FAA  09A0               	comf	___awdiv@divisor,f
  3096  0FAB  09A1               	comf	___awdiv@divisor+1,f
  3097  0FAC  0AA0               	incf	___awdiv@divisor,f
  3098  0FAD  1903               	skipnz
  3099  0FAE  0AA1               	incf	___awdiv@divisor+1,f
  3100  0FAF  01A5               	clrf	___awdiv@sign
  3101  0FB0  0AA5               	incf	___awdiv@sign,f
  3102  0FB1                     l1572:	
  3103  0FB1  1FA3               	btfss	___awdiv@dividend+1,7
  3104  0FB2  2FBC               	goto	l1578
  3105  0FB3  09A2               	comf	___awdiv@dividend,f
  3106  0FB4  09A3               	comf	___awdiv@dividend+1,f
  3107  0FB5  0AA2               	incf	___awdiv@dividend,f
  3108  0FB6  1903               	skipnz
  3109  0FB7  0AA3               	incf	___awdiv@dividend+1,f
  3110  0FB8  3001               	movlw	1
  3111  0FB9  00F6               	movwf	??___awdiv
  3112  0FBA  0876               	movf	??___awdiv,w
  3113  0FBB  06A5               	xorwf	___awdiv@sign,f
  3114  0FBC                     l1578:	
  3115  0FBC  01A6               	clrf	___awdiv@quotient
  3116  0FBD  01A7               	clrf	___awdiv@quotient+1
  3117  0FBE  0820               	movf	___awdiv@divisor,w
  3118  0FBF  0421               	iorwf	___awdiv@divisor+1,w
  3119  0FC0  1903               	btfsc	3,2
  3120  0FC1  2FF3               	goto	l1600
  3121  0FC2  01A4               	clrf	___awdiv@counter
  3122  0FC3  0AA4               	incf	___awdiv@counter,f
  3123  0FC4                     l1588:	
  3124  0FC4  1BA1               	btfsc	___awdiv@divisor+1,7
  3125  0FC5  2FD2               	goto	l1590
  3126  0FC6  3001               	movlw	1
  3127  0FC7                     u1195:	
  3128  0FC7  1003               	clrc
  3129  0FC8  0DA0               	rlf	___awdiv@divisor,f
  3130  0FC9  0DA1               	rlf	___awdiv@divisor+1,f
  3131  0FCA  3EFF               	addlw	-1
  3132  0FCB  1D03               	skipz
  3133  0FCC  2FC7               	goto	u1195
  3134  0FCD  3001               	movlw	1
  3135  0FCE  00F6               	movwf	??___awdiv
  3136  0FCF  0876               	movf	??___awdiv,w
  3137  0FD0  07A4               	addwf	___awdiv@counter,f
  3138  0FD1  2FC4               	goto	l1588
  3139  0FD2                     l1590:	
  3140  0FD2  3001               	movlw	1
  3141  0FD3                     u1215:	
  3142  0FD3  1003               	clrc
  3143  0FD4  0DA6               	rlf	___awdiv@quotient,f
  3144  0FD5  0DA7               	rlf	___awdiv@quotient+1,f
  3145  0FD6  3EFF               	addlw	-1
  3146  0FD7  1D03               	skipz
  3147  0FD8  2FD3               	goto	u1215
  3148  0FD9  0821               	movf	___awdiv@divisor+1,w
  3149  0FDA  0223               	subwf	___awdiv@dividend+1,w
  3150  0FDB  1D03               	skipz
  3151  0FDC  2FDF               	goto	u1225
  3152  0FDD  0820               	movf	___awdiv@divisor,w
  3153  0FDE  0222               	subwf	___awdiv@dividend,w
  3154  0FDF                     u1225:	
  3155  0FDF  1C03               	skipc
  3156  0FE0  2FE8               	goto	l1596
  3157  0FE1  0820               	movf	___awdiv@divisor,w
  3158  0FE2  02A2               	subwf	___awdiv@dividend,f
  3159  0FE3  0821               	movf	___awdiv@divisor+1,w
  3160  0FE4  1C03               	skipc
  3161  0FE5  03A3               	decf	___awdiv@dividend+1,f
  3162  0FE6  02A3               	subwf	___awdiv@dividend+1,f
  3163  0FE7  1426               	bsf	___awdiv@quotient,0
  3164  0FE8                     l1596:	
  3165  0FE8  3001               	movlw	1
  3166  0FE9                     u1235:	
  3167  0FE9  1003               	clrc
  3168  0FEA  0CA1               	rrf	___awdiv@divisor+1,f
  3169  0FEB  0CA0               	rrf	___awdiv@divisor,f
  3170  0FEC  3EFF               	addlw	-1
  3171  0FED  1D03               	skipz
  3172  0FEE  2FE9               	goto	u1235
  3173  0FEF  3001               	movlw	1
  3174  0FF0  02A4               	subwf	___awdiv@counter,f
  3175  0FF1  1D03               	btfss	3,2
  3176  0FF2  2FD2               	goto	l1590
  3177  0FF3                     l1600:	
  3178  0FF3  0825               	movf	___awdiv@sign,w
  3179  0FF4  1903               	btfsc	3,2
  3180  0FF5  2FFB               	goto	l1604
  3181  0FF6  09A6               	comf	___awdiv@quotient,f
  3182  0FF7  09A7               	comf	___awdiv@quotient+1,f
  3183  0FF8  0AA6               	incf	___awdiv@quotient,f
  3184  0FF9  1903               	skipnz
  3185  0FFA  0AA7               	incf	___awdiv@quotient+1,f
  3186  0FFB                     l1604:	
  3187  0FFB  0827               	movf	___awdiv@quotient+1,w
  3188  0FFC  00A1               	movwf	?___awdiv+1
  3189  0FFD  0826               	movf	___awdiv@quotient,w
  3190  0FFE  00A0               	movwf	?___awdiv
  3191  0FFF  0008               	return
  3192  1000                     __end_of___awdiv:	
  3193                           
  3194                           	psect	text10
  3195  05A7                     __ptext10:	
  3196 ;; *************** function _DS1307_read *****************
  3197 ;; Defined at:
  3198 ;;		line 15 in file "DS1307_read.h"
  3199 ;; Parameters:    Size  Location     Type
  3200 ;;  slave_addres    1    wreg     unsigned char 
  3201 ;;  register_add    1    5[BANK0 ] unsigned char 
  3202 ;; Auto vars:     Size  Location     Type
  3203 ;;  slave_addres    1    7[BANK0 ] unsigned char 
  3204 ;; Return value:  Size  Location     Type
  3205 ;;                  1    wreg      void 
  3206 ;; Registers used:
  3207 ;;		wreg, status,2, status,0, pclath, cstack
  3208 ;; Tracked objects:
  3209 ;;		On entry : 0/0
  3210 ;;		On exit  : 0/0
  3211 ;;		Unchanged: 0/0
  3212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3213 ;;      Params:         0       1       0       0       0
  3214 ;;      Locals:         0       1       0       0       0
  3215 ;;      Temps:          0       1       0       0       0
  3216 ;;      Totals:         0       3       0       0       0
  3217 ;;Total ram usage:        3 bytes
  3218 ;; Hardware stack levels used:    1
  3219 ;; Hardware stack levels required when called:    5
  3220 ;; This function calls:
  3221 ;;		_bcd_to_ascii
  3222 ;;		_lcd_command
  3223 ;;		_lcd_data
  3224 ;; This function is called by:
  3225 ;;		_main
  3226 ;; This function uses a non-reentrant model
  3227 ;;
  3228                           
  3229                           
  3230                           ;psect for function _DS1307_read
  3231  05A7                     _DS1307_read:	
  3232                           
  3233                           ;incstack = 0
  3234                           ; Regs used in _DS1307_read: [wreg+status,2+status,0+pclath+cstack]
  3235                           ;DS1307_read@slave_address stored from wreg
  3236  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  3237  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  3238  05A9  00A7               	movwf	DS1307_read@slave_address
  3239                           
  3240                           ;DS1307_read.h: 18: SSPCON2bits.SEN = 1;
  3241  05AA  1683               	bsf	3,5	;RP0=1, select bank1
  3242  05AB  1303               	bcf	3,6	;RP1=0, select bank1
  3243  05AC  1411               	bsf	17,0	;volatile
  3244  05AD                     l85:	
  3245                           ;DS1307_read.h: 19: while (SEN);
  3246                           
  3247  05AD  1811               	btfsc	17,0	;volatile
  3248  05AE  2DAD               	goto	l85
  3249                           
  3250                           ;DS1307_read.h: 20: PIR1bits.SSPIF =0 ;
  3251  05AF  1283               	bcf	3,5	;RP0=0, select bank0
  3252  05B0  1303               	bcf	3,6	;RP1=0, select bank0
  3253  05B1  118C               	bcf	12,3	;volatile
  3254                           
  3255                           ;DS1307_read.h: 23: SSPBUF = slave_address ;
  3256  05B2  0827               	movf	DS1307_read@slave_address,w
  3257  05B3  0093               	movwf	19	;volatile
  3258  05B4                     l88:	
  3259                           ;DS1307_read.h: 24: while (!SSPIF) ;
  3260                           
  3261  05B4  1D8C               	btfss	12,3	;volatile
  3262  05B5  2DB4               	goto	l88
  3263                           
  3264                           ;DS1307_read.h: 25: PIR1bits.SSPIF = 0 ;
  3265  05B6  118C               	bcf	12,3	;volatile
  3266                           
  3267                           ;DS1307_read.h: 26: if (SSPCON2bits.ACKSTAT)
  3268  05B7  1683               	bsf	3,5	;RP0=1, select bank1
  3269  05B8  1303               	bcf	3,6	;RP1=0, select bank1
  3270  05B9  1F11               	btfss	17,6	;volatile
  3271  05BA  2DBF               	goto	l1772
  3272                           
  3273                           ;DS1307_read.h: 27: {;DS1307_read.h: 28: SSPCON2bits.PEN = 1;
  3274  05BB  1511               	bsf	17,2	;volatile
  3275  05BC                     l92:	
  3276                           ;DS1307_read.h: 29: while (PEN);
  3277                           
  3278  05BC  1D11               	btfss	17,2	;volatile
  3279  05BD  0008               	return
  3280  05BE  2DBC               	goto	l92
  3281  05BF                     l1772:	
  3282                           
  3283                           ;DS1307_read.h: 31: };DS1307_read.h: 34: SSPBUF = register_address ;
  3284  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  3285  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  3286  05C1  0825               	movf	DS1307_read@register_address,w
  3287  05C2  0093               	movwf	19	;volatile
  3288  05C3                     l96:	
  3289                           ;DS1307_read.h: 35: while (!SSPIF) ;
  3290                           
  3291  05C3  1D8C               	btfss	12,3	;volatile
  3292  05C4  2DC3               	goto	l96
  3293                           
  3294                           ;DS1307_read.h: 36: PIR1bits.SSPIF = 0 ;
  3295  05C5  118C               	bcf	12,3	;volatile
  3296                           
  3297                           ;DS1307_read.h: 37: if (SSPCON2bits.ACKSTAT)
  3298  05C6  1683               	bsf	3,5	;RP0=1, select bank1
  3299  05C7  1303               	bcf	3,6	;RP1=0, select bank1
  3300  05C8  1F11               	btfss	17,6	;volatile
  3301  05C9  2DCE               	goto	l99
  3302                           
  3303                           ;DS1307_read.h: 38: {;DS1307_read.h: 39: SSPCON2bits.PEN = 1;
  3304  05CA  1511               	bsf	17,2	;volatile
  3305  05CB                     l100:	
  3306                           ;DS1307_read.h: 40: while (PEN);
  3307                           
  3308  05CB  1D11               	btfss	17,2	;volatile
  3309  05CC  0008               	return
  3310  05CD  2DCB               	goto	l100
  3311  05CE                     l99:	
  3312                           
  3313                           ;DS1307_read.h: 42: };DS1307_read.h: 45: SSPCON2bits.RSEN = 1;
  3314  05CE  1491               	bsf	17,1	;volatile
  3315  05CF                     l103:	
  3316                           ;DS1307_read.h: 46: while (RSEN);
  3317                           
  3318  05CF  1891               	btfsc	17,1	;volatile
  3319  05D0  2DCF               	goto	l103
  3320                           
  3321                           ;DS1307_read.h: 47: PIR1bits.SSPIF =0 ;
  3322  05D1  1283               	bcf	3,5	;RP0=0, select bank0
  3323  05D2  1303               	bcf	3,6	;RP1=0, select bank0
  3324  05D3  118C               	bcf	12,3	;volatile
  3325                           
  3326                           ;DS1307_read.h: 50: SSPBUF = (slave_address + 1) ;
  3327  05D4  0827               	movf	DS1307_read@slave_address,w
  3328  05D5  3E01               	addlw	1
  3329  05D6  0093               	movwf	19	;volatile
  3330  05D7                     l106:	
  3331                           ;DS1307_read.h: 51: while (!SSPIF) ;
  3332                           
  3333  05D7  1D8C               	btfss	12,3	;volatile
  3334  05D8  2DD7               	goto	l106
  3335                           
  3336                           ;DS1307_read.h: 52: PIR1bits.SSPIF = 0 ;
  3337  05D9  118C               	bcf	12,3	;volatile
  3338                           
  3339                           ;DS1307_read.h: 53: if (SSPCON2bits.ACKSTAT)
  3340  05DA  1683               	bsf	3,5	;RP0=1, select bank1
  3341  05DB  1303               	bcf	3,6	;RP1=0, select bank1
  3342  05DC  1F11               	btfss	17,6	;volatile
  3343  05DD  2DE2               	goto	l109
  3344                           
  3345                           ;DS1307_read.h: 54: {;DS1307_read.h: 55: SSPCON2bits.PEN = 1;
  3346  05DE  1511               	bsf	17,2	;volatile
  3347  05DF                     l110:	
  3348                           ;DS1307_read.h: 56: while (PEN);
  3349                           
  3350  05DF  1D11               	btfss	17,2	;volatile
  3351  05E0  0008               	return
  3352  05E1  2DDF               	goto	l110
  3353  05E2                     l109:	
  3354                           
  3355                           ;DS1307_read.h: 58: };DS1307_read.h: 60: SSPCON2bits.RCEN = 1 ;
  3356  05E2  1591               	bsf	17,3	;volatile
  3357  05E3                     l113:	
  3358                           ;DS1307_read.h: 61: while (!SSPSTATbits.BF);
  3359                           
  3360  05E3  1C14               	btfss	20,0	;volatile
  3361  05E4  2DE3               	goto	l113
  3362                           
  3363                           ;DS1307_read.h: 62: __second = SSPBUF ;
  3364  05E5  1283               	bcf	3,5	;RP0=0, select bank0
  3365  05E6  1303               	bcf	3,6	;RP1=0, select bank0
  3366  05E7  0813               	movf	19,w	;volatile
  3367  05E8  00A6               	movwf	??_DS1307_read
  3368  05E9  0826               	movf	??_DS1307_read,w
  3369  05EA  00D1               	movwf	___second
  3370                           
  3371                           ;DS1307_read.h: 64: SSPCON2bits.ACKDT = 0 ;
  3372  05EB  1683               	bsf	3,5	;RP0=1, select bank1
  3373  05EC  1303               	bcf	3,6	;RP1=0, select bank1
  3374  05ED  1291               	bcf	17,5	;volatile
  3375                           
  3376                           ;DS1307_read.h: 65: SSPCON2bits.ACKEN = 1 ;
  3377  05EE  1611               	bsf	17,4	;volatile
  3378  05EF                     l116:	
  3379                           ;DS1307_read.h: 66: while (ACKEN) ;
  3380                           
  3381  05EF  1A11               	btfsc	17,4	;volatile
  3382  05F0  2DEF               	goto	l116
  3383                           
  3384                           ;DS1307_read.h: 68: SSPCON2bits.RCEN = 1 ;
  3385  05F1  1591               	bsf	17,3	;volatile
  3386  05F2                     l119:	
  3387                           ;DS1307_read.h: 69: while (!SSPSTATbits.BF);
  3388                           
  3389  05F2  1C14               	btfss	20,0	;volatile
  3390  05F3  2DF2               	goto	l119
  3391                           
  3392                           ;DS1307_read.h: 70: __minute = SSPBUF ;
  3393  05F4  1283               	bcf	3,5	;RP0=0, select bank0
  3394  05F5  1303               	bcf	3,6	;RP1=0, select bank0
  3395  05F6  0813               	movf	19,w	;volatile
  3396  05F7  00A6               	movwf	??_DS1307_read
  3397  05F8  0826               	movf	??_DS1307_read,w
  3398  05F9  00D0               	movwf	___minute
  3399                           
  3400                           ;DS1307_read.h: 72: SSPCON2bits.ACKDT = 0 ;
  3401  05FA  1683               	bsf	3,5	;RP0=1, select bank1
  3402  05FB  1303               	bcf	3,6	;RP1=0, select bank1
  3403  05FC  1291               	bcf	17,5	;volatile
  3404                           
  3405                           ;DS1307_read.h: 73: SSPCON2bits.ACKEN = 1 ;
  3406  05FD  1611               	bsf	17,4	;volatile
  3407  05FE                     l122:	
  3408                           ;DS1307_read.h: 74: while (ACKEN) ;
  3409                           
  3410  05FE  1A11               	btfsc	17,4	;volatile
  3411  05FF  2DFE               	goto	l122
  3412                           
  3413                           ;DS1307_read.h: 76: SSPCON2bits.RCEN = 1 ;
  3414  0600  1591               	bsf	17,3	;volatile
  3415  0601                     l125:	
  3416                           ;DS1307_read.h: 77: while (!SSPSTATbits.BF);
  3417                           
  3418  0601  1C14               	btfss	20,0	;volatile
  3419  0602  2E01               	goto	l125
  3420                           
  3421                           ;DS1307_read.h: 78: __hour = SSPBUF ;
  3422  0603  1283               	bcf	3,5	;RP0=0, select bank0
  3423  0604  1303               	bcf	3,6	;RP1=0, select bank0
  3424  0605  0813               	movf	19,w	;volatile
  3425  0606  00A6               	movwf	??_DS1307_read
  3426  0607  0826               	movf	??_DS1307_read,w
  3427  0608  00CF               	movwf	___hour
  3428                           
  3429                           ;DS1307_read.h: 80: SSPCON2bits.ACKDT = 0 ;
  3430  0609  1683               	bsf	3,5	;RP0=1, select bank1
  3431  060A  1303               	bcf	3,6	;RP1=0, select bank1
  3432  060B  1291               	bcf	17,5	;volatile
  3433                           
  3434                           ;DS1307_read.h: 81: SSPCON2bits.ACKEN = 1 ;
  3435  060C  1611               	bsf	17,4	;volatile
  3436  060D                     l128:	
  3437                           ;DS1307_read.h: 82: while (ACKEN) ;
  3438                           
  3439  060D  1A11               	btfsc	17,4	;volatile
  3440  060E  2E0D               	goto	l128
  3441                           
  3442                           ;DS1307_read.h: 84: SSPCON2bits.RCEN = 1 ;
  3443  060F  1591               	bsf	17,3	;volatile
  3444  0610                     l131:	
  3445                           ;DS1307_read.h: 85: while (!SSPSTATbits.BF);
  3446                           
  3447  0610  1C14               	btfss	20,0	;volatile
  3448  0611  2E10               	goto	l131
  3449                           
  3450                           ;DS1307_read.h: 86: __day = SSPBUF ;
  3451  0612  1283               	bcf	3,5	;RP0=0, select bank0
  3452  0613  1303               	bcf	3,6	;RP1=0, select bank0
  3453  0614  0813               	movf	19,w	;volatile
  3454  0615  00A6               	movwf	??_DS1307_read
  3455  0616  0826               	movf	??_DS1307_read,w
  3456  0617  00CE               	movwf	___day
  3457                           
  3458                           ;DS1307_read.h: 88: SSPCON2bits.ACKDT = 0 ;
  3459  0618  1683               	bsf	3,5	;RP0=1, select bank1
  3460  0619  1303               	bcf	3,6	;RP1=0, select bank1
  3461  061A  1291               	bcf	17,5	;volatile
  3462                           
  3463                           ;DS1307_read.h: 89: SSPCON2bits.ACKEN = 1 ;
  3464  061B  1611               	bsf	17,4	;volatile
  3465  061C                     l134:	
  3466                           ;DS1307_read.h: 90: while (ACKEN) ;
  3467                           
  3468  061C  1A11               	btfsc	17,4	;volatile
  3469  061D  2E1C               	goto	l134
  3470                           
  3471                           ;DS1307_read.h: 92: SSPCON2bits.RCEN = 1 ;
  3472  061E  1591               	bsf	17,3	;volatile
  3473  061F                     l137:	
  3474                           ;DS1307_read.h: 93: while (!SSPSTATbits.BF);
  3475                           
  3476  061F  1C14               	btfss	20,0	;volatile
  3477  0620  2E1F               	goto	l137
  3478                           
  3479                           ;DS1307_read.h: 94: __date = SSPBUF ;
  3480  0621  1283               	bcf	3,5	;RP0=0, select bank0
  3481  0622  1303               	bcf	3,6	;RP1=0, select bank0
  3482  0623  0813               	movf	19,w	;volatile
  3483  0624  00A6               	movwf	??_DS1307_read
  3484  0625  0826               	movf	??_DS1307_read,w
  3485  0626  00CD               	movwf	___date
  3486                           
  3487                           ;DS1307_read.h: 96: SSPCON2bits.ACKDT = 0 ;
  3488  0627  1683               	bsf	3,5	;RP0=1, select bank1
  3489  0628  1303               	bcf	3,6	;RP1=0, select bank1
  3490  0629  1291               	bcf	17,5	;volatile
  3491                           
  3492                           ;DS1307_read.h: 97: SSPCON2bits.ACKEN = 1 ;
  3493  062A  1611               	bsf	17,4	;volatile
  3494  062B                     l140:	
  3495                           ;DS1307_read.h: 98: while (ACKEN) ;
  3496                           
  3497  062B  1A11               	btfsc	17,4	;volatile
  3498  062C  2E2B               	goto	l140
  3499                           
  3500                           ;DS1307_read.h: 100: SSPCON2bits.RCEN = 1 ;
  3501  062D  1591               	bsf	17,3	;volatile
  3502  062E                     l143:	
  3503                           ;DS1307_read.h: 101: while (!SSPSTATbits.BF);
  3504                           
  3505  062E  1C14               	btfss	20,0	;volatile
  3506  062F  2E2E               	goto	l143
  3507                           
  3508                           ;DS1307_read.h: 102: __month = SSPBUF ;
  3509  0630  1283               	bcf	3,5	;RP0=0, select bank0
  3510  0631  1303               	bcf	3,6	;RP1=0, select bank0
  3511  0632  0813               	movf	19,w	;volatile
  3512  0633  00A6               	movwf	??_DS1307_read
  3513  0634  0826               	movf	??_DS1307_read,w
  3514  0635  00CC               	movwf	___month
  3515                           
  3516                           ;DS1307_read.h: 104: SSPCON2bits.ACKDT = 0 ;
  3517  0636  1683               	bsf	3,5	;RP0=1, select bank1
  3518  0637  1303               	bcf	3,6	;RP1=0, select bank1
  3519  0638  1291               	bcf	17,5	;volatile
  3520                           
  3521                           ;DS1307_read.h: 105: SSPCON2bits.ACKEN = 1 ;
  3522  0639  1611               	bsf	17,4	;volatile
  3523  063A                     l146:	
  3524                           ;DS1307_read.h: 106: while (ACKEN) ;
  3525                           
  3526  063A  1A11               	btfsc	17,4	;volatile
  3527  063B  2E3A               	goto	l146
  3528                           
  3529                           ;DS1307_read.h: 108: SSPCON2bits.RCEN = 1 ;
  3530  063C  1591               	bsf	17,3	;volatile
  3531  063D                     l149:	
  3532                           ;DS1307_read.h: 109: while (!SSPSTATbits.BF);
  3533                           
  3534  063D  1C14               	btfss	20,0	;volatile
  3535  063E  2E3D               	goto	l149
  3536                           
  3537                           ;DS1307_read.h: 110: __year = SSPBUF ;
  3538  063F  1283               	bcf	3,5	;RP0=0, select bank0
  3539  0640  1303               	bcf	3,6	;RP1=0, select bank0
  3540  0641  0813               	movf	19,w	;volatile
  3541  0642  00A6               	movwf	??_DS1307_read
  3542  0643  0826               	movf	??_DS1307_read,w
  3543  0644  00CB               	movwf	___year
  3544                           
  3545                           ;DS1307_read.h: 112: SSPCON2bits.ACKDT = 0 ;
  3546  0645  1683               	bsf	3,5	;RP0=1, select bank1
  3547  0646  1303               	bcf	3,6	;RP1=0, select bank1
  3548  0647  1291               	bcf	17,5	;volatile
  3549                           
  3550                           ;DS1307_read.h: 113: SSPCON2bits.ACKEN = 1 ;
  3551  0648  1611               	bsf	17,4	;volatile
  3552  0649                     l152:	
  3553                           ;DS1307_read.h: 114: while (ACKEN) ;
  3554                           
  3555  0649  1A11               	btfsc	17,4	;volatile
  3556  064A  2E49               	goto	l152
  3557                           
  3558                           ;DS1307_read.h: 116: SSPCON2bits.RCEN = 1 ;
  3559  064B  1591               	bsf	17,3	;volatile
  3560  064C                     l155:	
  3561                           ;DS1307_read.h: 117: while (!SSPSTATbits.BF);
  3562                           
  3563  064C  1C14               	btfss	20,0	;volatile
  3564  064D  2E4C               	goto	l155
  3565                           
  3566                           ;DS1307_read.h: 118: __con = SSPBUF ;
  3567  064E  1283               	bcf	3,5	;RP0=0, select bank0
  3568  064F  1303               	bcf	3,6	;RP1=0, select bank0
  3569  0650  0813               	movf	19,w	;volatile
  3570  0651  00A6               	movwf	??_DS1307_read
  3571  0652  0826               	movf	??_DS1307_read,w
  3572  0653  00CA               	movwf	___con
  3573                           
  3574                           ;DS1307_read.h: 120: SSPCON2bits.ACKDT = 1 ;
  3575  0654  1683               	bsf	3,5	;RP0=1, select bank1
  3576  0655  1303               	bcf	3,6	;RP1=0, select bank1
  3577  0656  1691               	bsf	17,5	;volatile
  3578                           
  3579                           ;DS1307_read.h: 121: SSPCON2bits.ACKEN = 1 ;
  3580  0657  1611               	bsf	17,4	;volatile
  3581  0658                     l158:	
  3582                           ;DS1307_read.h: 122: while (ACKEN) ;
  3583                           
  3584  0658  1A11               	btfsc	17,4	;volatile
  3585  0659  2E58               	goto	l158
  3586                           
  3587                           ;DS1307_read.h: 125: SSPCON2bits.PEN = 1 ;
  3588  065A  1511               	bsf	17,2	;volatile
  3589  065B                     l161:	
  3590                           ;DS1307_read.h: 126: while (PEN);
  3591                           
  3592  065B  1911               	btfsc	17,2	;volatile
  3593  065C  2E5B               	goto	l161
  3594                           
  3595                           ;DS1307_read.h: 128: lcd_command (0x88) ;
  3596  065D  3088               	movlw	136
  3597  065E  120A  158A  2685  120A  118A  	fcall	_lcd_command
  3598                           
  3599                           ;DS1307_read.h: 129: bcd_to_ascii (__hour) ;
  3600  0663  1283               	bcf	3,5	;RP0=0, select bank0
  3601  0664  1303               	bcf	3,6	;RP1=0, select bank0
  3602  0665  084F               	movf	___hour,w
  3603  0666  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  3604                           
  3605                           ;DS1307_read.h: 130: lcd_data (':');
  3606  066B  303A               	movlw	58
  3607  066C  120A  158A  2670  120A  118A  	fcall	_lcd_data
  3608                           
  3609                           ;DS1307_read.h: 131: bcd_to_ascii (__minute);
  3610  0671  1283               	bcf	3,5	;RP0=0, select bank0
  3611  0672  1303               	bcf	3,6	;RP1=0, select bank0
  3612  0673  0850               	movf	___minute,w
  3613  0674  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  3614                           
  3615                           ;DS1307_read.h: 132: lcd_data (':');
  3616  0679  303A               	movlw	58
  3617  067A  120A  158A  2670  120A  118A  	fcall	_lcd_data
  3618                           
  3619                           ;DS1307_read.h: 133: bcd_to_ascii (__second);
  3620  067F  1283               	bcf	3,5	;RP0=0, select bank0
  3621  0680  1303               	bcf	3,6	;RP1=0, select bank0
  3622  0681  0851               	movf	___second,w
  3623  0682  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  3624                           
  3625                           ;DS1307_read.h: 135: lcd_command (0xc7) ;
  3626  0687  30C7               	movlw	199
  3627  0688  120A  158A  2685  120A  118A  	fcall	_lcd_command
  3628                           
  3629                           ;DS1307_read.h: 136: bcd_to_ascii (__date) ;
  3630  068D  1283               	bcf	3,5	;RP0=0, select bank0
  3631  068E  1303               	bcf	3,6	;RP1=0, select bank0
  3632  068F  084D               	movf	___date,w
  3633  0690  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  3634                           
  3635                           ;DS1307_read.h: 137: lcd_data ('/');
  3636  0695  302F               	movlw	47
  3637  0696  120A  158A  2670  120A  118A  	fcall	_lcd_data
  3638                           
  3639                           ;DS1307_read.h: 138: bcd_to_ascii (__month);
  3640  069B  1283               	bcf	3,5	;RP0=0, select bank0
  3641  069C  1303               	bcf	3,6	;RP1=0, select bank0
  3642  069D  084C               	movf	___month,w
  3643  069E  120A  158A  272F  120A  118A  	fcall	_bcd_to_ascii
  3644                           
  3645                           ;DS1307_read.h: 139: lcd_data ('/');
  3646  06A3  302F               	movlw	47
  3647  06A4  120A  158A  2670  120A  118A  	fcall	_lcd_data
  3648                           
  3649                           ;DS1307_read.h: 140: bcd_to_ascii (__year);
  3650  06A9  1283               	bcf	3,5	;RP0=0, select bank0
  3651  06AA  1303               	bcf	3,6	;RP1=0, select bank0
  3652  06AB  084B               	movf	___year,w
  3653  06AC  120A  158A  272F   	fcall	_bcd_to_ascii
  3654  06AF  0008               	return
  3655  06B0                     __end_of_DS1307_read:	
  3656                           
  3657                           	psect	text11
  3658  0E85                     __ptext11:	
  3659 ;; *************** function _lcd_command *****************
  3660 ;; Defined at:
  3661 ;;		line 27 in file "LCD.h"
  3662 ;; Parameters:    Size  Location     Type
  3663 ;;  cmd             1    wreg     unsigned char 
  3664 ;; Auto vars:     Size  Location     Type
  3665 ;;  cmd             1    0[BANK0 ] unsigned char 
  3666 ;; Return value:  Size  Location     Type
  3667 ;;                  1    wreg      void 
  3668 ;; Registers used:
  3669 ;;		wreg
  3670 ;; Tracked objects:
  3671 ;;		On entry : 0/0
  3672 ;;		On exit  : 0/0
  3673 ;;		Unchanged: 0/0
  3674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3675 ;;      Params:         0       0       0       0       0
  3676 ;;      Locals:         0       1       0       0       0
  3677 ;;      Temps:          2       0       0       0       0
  3678 ;;      Totals:         2       1       0       0       0
  3679 ;;Total ram usage:        3 bytes
  3680 ;; Hardware stack levels used:    1
  3681 ;; Hardware stack levels required when called:    3
  3682 ;; This function calls:
  3683 ;;		Nothing
  3684 ;; This function is called by:
  3685 ;;		_lcd_init
  3686 ;;		_DS1307_read
  3687 ;;		_main
  3688 ;;		_set_timing
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           
  3693                           ;psect for function _lcd_command
  3694  0E85                     _lcd_command:	
  3695                           
  3696                           ;incstack = 0
  3697                           ; Regs used in _lcd_command: [wreg]
  3698                           ;lcd_command@cmd stored from wreg
  3699  0E85  1283               	bcf	3,5	;RP0=0, select bank0
  3700  0E86  1303               	bcf	3,6	;RP1=0, select bank0
  3701  0E87  00A0               	movwf	lcd_command@cmd
  3702                           
  3703                           ;LCD.h: 28: PORTD = cmd;
  3704  0E88  0820               	movf	lcd_command@cmd,w
  3705  0E89  0088               	movwf	8	;volatile
  3706                           
  3707                           ;LCD.h: 29: PORTBbits.RB1 = 0;
  3708  0E8A  1086               	bcf	6,1	;volatile
  3709                           
  3710                           ;LCD.h: 30: PORTBbits.RB2 = 0;
  3711  0E8B  1106               	bcf	6,2	;volatile
  3712                           
  3713                           ;LCD.h: 31: PORTBbits.RB3 =1;
  3714  0E8C  1586               	bsf	6,3	;volatile
  3715                           
  3716                           ;LCD.h: 32: _delay((unsigned long)((5)*(20000000/4000.0)));
  3717  0E8D  3021               	movlw	33
  3718  0E8E  00F7               	movwf	??_lcd_command+1
  3719  0E8F  3076               	movlw	118
  3720  0E90  00F6               	movwf	??_lcd_command
  3721  0E91                     u2527:	
  3722  0E91  0BF6               	decfsz	??_lcd_command,f
  3723  0E92  2E91               	goto	u2527
  3724  0E93  0BF7               	decfsz	??_lcd_command+1,f
  3725  0E94  2E91               	goto	u2527
  3726  0E95  0000               	nop
  3727                           
  3728                           ;LCD.h: 33: PORTBbits.RB3 =0 ;
  3729  0E96  1283               	bcf	3,5	;RP0=0, select bank0
  3730  0E97  1303               	bcf	3,6	;RP1=0, select bank0
  3731  0E98  1186               	bcf	6,3	;volatile
  3732  0E99  0008               	return
  3733  0E9A                     __end_of_lcd_command:	
  3734                           
  3735                           	psect	text12
  3736  0F2F                     __ptext12:	
  3737 ;; *************** function _bcd_to_ascii *****************
  3738 ;; Defined at:
  3739 ;;		line 5 in file "Conversion.h"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;  value           1    wreg     unsigned char 
  3742 ;; Auto vars:     Size  Location     Type
  3743 ;;  value           1    3[BANK0 ] unsigned char 
  3744 ;;  bcd             1    4[BANK0 ] unsigned char 
  3745 ;; Return value:  Size  Location     Type
  3746 ;;                  1    wreg      void 
  3747 ;; Registers used:
  3748 ;;		wreg, status,2, status,0, pclath, cstack
  3749 ;; Tracked objects:
  3750 ;;		On entry : 0/0
  3751 ;;		On exit  : 0/0
  3752 ;;		Unchanged: 0/0
  3753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3754 ;;      Params:         0       0       0       0       0
  3755 ;;      Locals:         0       2       0       0       0
  3756 ;;      Temps:          0       2       0       0       0
  3757 ;;      Totals:         0       4       0       0       0
  3758 ;;Total ram usage:        4 bytes
  3759 ;; Hardware stack levels used:    1
  3760 ;; Hardware stack levels required when called:    4
  3761 ;; This function calls:
  3762 ;;		_lcd_data
  3763 ;; This function is called by:
  3764 ;;		_DS1307_read
  3765 ;;		_set_timing
  3766 ;; This function uses a non-reentrant model
  3767 ;;
  3768                           
  3769                           
  3770                           ;psect for function _bcd_to_ascii
  3771  0F2F                     _bcd_to_ascii:	
  3772                           
  3773                           ;incstack = 0
  3774                           ; Regs used in _bcd_to_ascii: [wreg+status,2+status,0+pclath+cstack]
  3775                           ;bcd_to_ascii@value stored from wreg
  3776  0F2F  1283               	bcf	3,5	;RP0=0, select bank0
  3777  0F30  1303               	bcf	3,6	;RP1=0, select bank0
  3778  0F31  00A3               	movwf	bcd_to_ascii@value
  3779                           
  3780                           ;Conversion.h: 7: unsigned char bcd ;;Conversion.h: 8: bcd = value ;
  3781  0F32  0823               	movf	bcd_to_ascii@value,w
  3782  0F33  00A1               	movwf	??_bcd_to_ascii
  3783  0F34  0821               	movf	??_bcd_to_ascii,w
  3784  0F35  00A4               	movwf	bcd_to_ascii@bcd
  3785                           
  3786                           ;Conversion.h: 9: bcd = bcd & 0xf0 ;
  3787  0F36  0824               	movf	bcd_to_ascii@bcd,w
  3788  0F37  39F0               	andlw	240
  3789  0F38  00A1               	movwf	??_bcd_to_ascii
  3790  0F39  0821               	movf	??_bcd_to_ascii,w
  3791  0F3A  00A4               	movwf	bcd_to_ascii@bcd
  3792                           
  3793                           ;Conversion.h: 10: bcd = bcd >> 4 ;
  3794  0F3B  0824               	movf	bcd_to_ascii@bcd,w
  3795  0F3C  00A1               	movwf	??_bcd_to_ascii
  3796  0F3D  3004               	movlw	4
  3797  0F3E                     u1395:	
  3798  0F3E  1003               	clrc
  3799  0F3F  0CA1               	rrf	??_bcd_to_ascii,f
  3800  0F40  3EFF               	addlw	-1
  3801  0F41  1D03               	skipz
  3802  0F42  2F3E               	goto	u1395
  3803  0F43  0821               	movf	??_bcd_to_ascii,w
  3804  0F44  00A2               	movwf	??_bcd_to_ascii+1
  3805  0F45  0822               	movf	??_bcd_to_ascii+1,w
  3806  0F46  00A4               	movwf	bcd_to_ascii@bcd
  3807                           
  3808                           ;Conversion.h: 11: bcd = bcd | 0x30 ;
  3809  0F47  0824               	movf	bcd_to_ascii@bcd,w
  3810  0F48  3830               	iorlw	48
  3811  0F49  00A1               	movwf	??_bcd_to_ascii
  3812  0F4A  0821               	movf	??_bcd_to_ascii,w
  3813  0F4B  00A4               	movwf	bcd_to_ascii@bcd
  3814                           
  3815                           ;Conversion.h: 12: lcd_data (bcd) ;
  3816  0F4C  0824               	movf	bcd_to_ascii@bcd,w
  3817  0F4D  120A  158A  2670  120A  158A  	fcall	_lcd_data
  3818                           
  3819                           ;Conversion.h: 14: bcd = value ;
  3820  0F52  1283               	bcf	3,5	;RP0=0, select bank0
  3821  0F53  1303               	bcf	3,6	;RP1=0, select bank0
  3822  0F54  0823               	movf	bcd_to_ascii@value,w
  3823  0F55  00A1               	movwf	??_bcd_to_ascii
  3824  0F56  0821               	movf	??_bcd_to_ascii,w
  3825  0F57  00A4               	movwf	bcd_to_ascii@bcd
  3826                           
  3827                           ;Conversion.h: 15: bcd = bcd & 0x0f ;
  3828  0F58  0824               	movf	bcd_to_ascii@bcd,w
  3829  0F59  390F               	andlw	15
  3830  0F5A  00A1               	movwf	??_bcd_to_ascii
  3831  0F5B  0821               	movf	??_bcd_to_ascii,w
  3832  0F5C  00A4               	movwf	bcd_to_ascii@bcd
  3833                           
  3834                           ;Conversion.h: 16: bcd = bcd | 0x30 ;
  3835  0F5D  0824               	movf	bcd_to_ascii@bcd,w
  3836  0F5E  3830               	iorlw	48
  3837  0F5F  00A1               	movwf	??_bcd_to_ascii
  3838  0F60  0821               	movf	??_bcd_to_ascii,w
  3839  0F61  00A4               	movwf	bcd_to_ascii@bcd
  3840                           
  3841                           ;Conversion.h: 17: lcd_data (bcd) ;
  3842  0F62  0824               	movf	bcd_to_ascii@bcd,w
  3843  0F63  120A  158A  2670   	fcall	_lcd_data
  3844  0F66  0008               	return
  3845  0F67                     __end_of_bcd_to_ascii:	
  3846                           
  3847                           	psect	text13
  3848  0E70                     __ptext13:	
  3849 ;; *************** function _lcd_data *****************
  3850 ;; Defined at:
  3851 ;;		line 18 in file "LCD.h"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;  data            1    wreg     unsigned char 
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;  data            1    0[BANK0 ] unsigned char 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  1    wreg      void 
  3858 ;; Registers used:
  3859 ;;		wreg
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3865 ;;      Params:         0       0       0       0       0
  3866 ;;      Locals:         0       1       0       0       0
  3867 ;;      Temps:          2       0       0       0       0
  3868 ;;      Totals:         2       1       0       0       0
  3869 ;;Total ram usage:        3 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    3
  3872 ;; This function calls:
  3873 ;;		Nothing
  3874 ;; This function is called by:
  3875 ;;		_lcd_string
  3876 ;;		_bcd_to_ascii
  3877 ;;		_DS1307_read
  3878 ;; This function uses a non-reentrant model
  3879 ;;
  3880                           
  3881                           
  3882                           ;psect for function _lcd_data
  3883  0E70                     _lcd_data:	
  3884                           
  3885                           ;incstack = 0
  3886                           ; Regs used in _lcd_data: [wreg]
  3887                           ;lcd_data@data stored from wreg
  3888  0E70  1283               	bcf	3,5	;RP0=0, select bank0
  3889  0E71  1303               	bcf	3,6	;RP1=0, select bank0
  3890  0E72  00A0               	movwf	lcd_data@data
  3891                           
  3892                           ;LCD.h: 19: PORTD = data;
  3893  0E73  0820               	movf	lcd_data@data,w
  3894  0E74  0088               	movwf	8	;volatile
  3895                           
  3896                           ;LCD.h: 20: PORTBbits.RB1 = 1;
  3897  0E75  1486               	bsf	6,1	;volatile
  3898                           
  3899                           ;LCD.h: 21: PORTBbits.RB2 = 0;
  3900  0E76  1106               	bcf	6,2	;volatile
  3901                           
  3902                           ;LCD.h: 22: PORTBbits.RB3 =1;
  3903  0E77  1586               	bsf	6,3	;volatile
  3904                           
  3905                           ;LCD.h: 23: _delay((unsigned long)((5)*(20000000/4000.0)));
  3906  0E78  3021               	movlw	33
  3907  0E79  00F7               	movwf	??_lcd_data+1
  3908  0E7A  3076               	movlw	118
  3909  0E7B  00F6               	movwf	??_lcd_data
  3910  0E7C                     u2537:	
  3911  0E7C  0BF6               	decfsz	??_lcd_data,f
  3912  0E7D  2E7C               	goto	u2537
  3913  0E7E  0BF7               	decfsz	??_lcd_data+1,f
  3914  0E7F  2E7C               	goto	u2537
  3915  0E80  0000               	nop
  3916                           
  3917                           ;LCD.h: 24: PORTBbits.RB3 =0 ;
  3918  0E81  1283               	bcf	3,5	;RP0=0, select bank0
  3919  0E82  1303               	bcf	3,6	;RP1=0, select bank0
  3920  0E83  1186               	bcf	6,3	;volatile
  3921  0E84  0008               	return
  3922  0E85                     __end_of_lcd_data:	
  3923                           
  3924                           	psect	text14
  3925  0EC8                     __ptext14:	
  3926 ;; *************** function _external *****************
  3927 ;; Defined at:
  3928 ;;		line 379 in file "D_Clock.c"
  3929 ;; Parameters:    Size  Location     Type
  3930 ;;		None
  3931 ;; Auto vars:     Size  Location     Type
  3932 ;;		None
  3933 ;; Return value:  Size  Location     Type
  3934 ;;                  1    wreg      void 
  3935 ;; Registers used:
  3936 ;;		wreg, status,2, status,0, pclath, cstack
  3937 ;; Tracked objects:
  3938 ;;		On entry : 0/0
  3939 ;;		On exit  : 0/0
  3940 ;;		Unchanged: 0/0
  3941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3942 ;;      Params:         0       0       0       0       0
  3943 ;;      Locals:         0       0       0       0       0
  3944 ;;      Temps:          3       0       0       0       0
  3945 ;;      Totals:         3       0       0       0       0
  3946 ;;Total ram usage:        3 bytes
  3947 ;; Hardware stack levels used:    1
  3948 ;; Hardware stack levels required when called:    2
  3949 ;; This function calls:
  3950 ;;		i1_lcd_init
  3951 ;; This function is called by:
  3952 ;;		Interrupt level 1
  3953 ;; This function uses a non-reentrant model
  3954 ;;
  3955                           
  3956                           
  3957                           ;psect for function _external
  3958  0EC8                     _external:	
  3959                           
  3960                           ;D_Clock.c: 382: if (INTCONbits.INTF == 1) {
  3961  0EC8  1C8B               	btfss	11,1	;volatile
  3962  0EC9  2EDD               	goto	i1l300
  3963                           
  3964                           ;D_Clock.c: 383: INTCONbits.INTF = 0;
  3965  0ECA  108B               	bcf	11,1	;volatile
  3966                           
  3967                           ;D_Clock.c: 384: lcd_init();
  3968  0ECB  120A  158A  269A  120A  158A  	fcall	i1_lcd_init
  3969                           
  3970                           ;D_Clock.c: 385: timing_flag = 1 + timing_flag ;
  3971  0ED0  1283               	bcf	3,5	;RP0=0, select bank0
  3972  0ED1  1303               	bcf	3,6	;RP1=0, select bank0
  3973  0ED2  0849               	movf	_timing_flag,w
  3974  0ED3  3E01               	addlw	1
  3975  0ED4  00F3               	movwf	??_external
  3976  0ED5  0873               	movf	??_external,w
  3977  0ED6  00C9               	movwf	_timing_flag
  3978                           
  3979                           ;D_Clock.c: 386: if (timing_flag == 7 ) {
  3980  0ED7  3007               	movlw	7
  3981  0ED8  0649               	xorwf	_timing_flag,w
  3982  0ED9  1D03               	btfss	3,2
  3983  0EDA  2EDD               	goto	i1l300
  3984                           
  3985                           ;D_Clock.c: 387: timing_flag = 1;
  3986  0EDB  01C9               	clrf	_timing_flag
  3987  0EDC  0AC9               	incf	_timing_flag,f
  3988  0EDD                     i1l300:	
  3989  0EDD  0875               	movf	??_external+2,w
  3990  0EDE  008A               	movwf	10
  3991  0EDF  0E74               	swapf	(??_external+1)^(0+4294967168),w
  3992  0EE0  0083               	movwf	3
  3993  0EE1  0EFE               	swapf	126,f
  3994  0EE2  0E7E               	swapf	126,w
  3995  0EE3  0009               	retfie
  3996  0EE4                     __end_of_external:	
  3997                           
  3998                           	psect	intentry
  3999  0004                     __pintentry:	
  4000                           ;incstack = 0
  4001                           ; Regs used in _external: [wreg+status,2+status,0+pclath+cstack]
  4002                           
  4003  0004                     interrupt_function:	
  4004  007E                     saved_w	set	btemp
  4005  0004  00FE               	movwf	btemp
  4006  0005  0E03               	swapf	3,w
  4007  0006  00F4               	movwf	??_external+1
  4008  0007  080A               	movf	10,w
  4009  0008  00F5               	movwf	??_external+2
  4010  0009  120A  158A  2EC8   	ljmp	_external
  4011                           
  4012                           	psect	text15
  4013  0E9A                     __ptext15:	
  4014 ;; *************** function i1_lcd_init *****************
  4015 ;; Defined at:
  4016 ;;		line 11 in file "LCD.h"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;		None
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;		None
  4021 ;; Return value:  Size  Location     Type
  4022 ;;                  1    wreg      void 
  4023 ;; Registers used:
  4024 ;;		wreg, status,2, status,0, pclath, cstack
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4030 ;;      Params:         0       0       0       0       0
  4031 ;;      Locals:         0       0       0       0       0
  4032 ;;      Temps:          0       0       0       0       0
  4033 ;;      Totals:         0       0       0       0       0
  4034 ;;Total ram usage:        0 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    1
  4037 ;; This function calls:
  4038 ;;		i1_lcd_command
  4039 ;; This function is called by:
  4040 ;;		_external
  4041 ;; This function uses a non-reentrant model
  4042 ;;
  4043                           
  4044                           
  4045                           ;psect for function i1_lcd_init
  4046  0E9A                     i1_lcd_init:	
  4047                           
  4048                           ;LCD.h: 12: lcd_command (0x38);
  4049                           
  4050                           ;incstack = 0
  4051                           ; Regs used in i1_lcd_init: [wreg+status,2+status,0+pclath+cstack]
  4052  0E9A  3038               	movlw	56
  4053  0E9B  120A  158A  265B  120A  158A  	fcall	i1_lcd_command
  4054                           
  4055                           ;LCD.h: 13: lcd_command (0x06);
  4056  0EA0  3006               	movlw	6
  4057  0EA1  120A  158A  265B  120A  158A  	fcall	i1_lcd_command
  4058                           
  4059                           ;LCD.h: 14: lcd_command (0x0c);
  4060  0EA6  300C               	movlw	12
  4061  0EA7  120A  158A  265B  120A  158A  	fcall	i1_lcd_command
  4062                           
  4063                           ;LCD.h: 15: lcd_command (0x01);
  4064  0EAC  3001               	movlw	1
  4065  0EAD  120A  158A  265B   	fcall	i1_lcd_command
  4066  0EB0  0008               	return
  4067  0EB1                     __end_ofi1_lcd_init:	
  4068                           
  4069                           	psect	text16
  4070  0E5B                     __ptext16:	
  4071 ;; *************** function i1_lcd_command *****************
  4072 ;; Defined at:
  4073 ;;		line 27 in file "LCD.h"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;  cmd             1    wreg     unsigned char 
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;  cmd             1    2[COMMON] unsigned char 
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  1    wreg      void 
  4080 ;; Registers used:
  4081 ;;		wreg
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4087 ;;      Params:         0       0       0       0       0
  4088 ;;      Locals:         1       0       0       0       0
  4089 ;;      Temps:          2       0       0       0       0
  4090 ;;      Totals:         3       0       0       0       0
  4091 ;;Total ram usage:        3 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; This function calls:
  4094 ;;		Nothing
  4095 ;; This function is called by:
  4096 ;;		i1_lcd_init
  4097 ;; This function uses a non-reentrant model
  4098 ;;
  4099                           
  4100                           
  4101                           ;psect for function i1_lcd_command
  4102  0E5B                     i1_lcd_command:	
  4103                           
  4104                           ;incstack = 0
  4105                           ; Regs used in i1_lcd_command: [wreg]
  4106                           ;i1lcd_command@cmd stored from wreg
  4107  0E5B  00F2               	movwf	i1lcd_command@cmd
  4108                           
  4109                           ;LCD.h: 28: PORTD = cmd;
  4110  0E5C  0872               	movf	i1lcd_command@cmd,w
  4111  0E5D  1283               	bcf	3,5	;RP0=0, select bank0
  4112  0E5E  1303               	bcf	3,6	;RP1=0, select bank0
  4113  0E5F  0088               	movwf	8	;volatile
  4114                           
  4115                           ;LCD.h: 29: PORTBbits.RB1 = 0;
  4116  0E60  1086               	bcf	6,1	;volatile
  4117                           
  4118                           ;LCD.h: 30: PORTBbits.RB2 = 0;
  4119  0E61  1106               	bcf	6,2	;volatile
  4120                           
  4121                           ;LCD.h: 31: PORTBbits.RB3 =1;
  4122  0E62  1586               	bsf	6,3	;volatile
  4123                           
  4124                           ;LCD.h: 32: _delay((unsigned long)((5)*(20000000/4000.0)));
  4125  0E63  3021               	movlw	33
  4126  0E64  00F1               	movwf	??i1_lcd_command+1
  4127  0E65  3076               	movlw	118
  4128  0E66  00F0               	movwf	??i1_lcd_command
  4129  0E67                     u254_27:	
  4130  0E67  0BF0               	decfsz	??i1_lcd_command,f
  4131  0E68  2E67               	goto	u254_27
  4132  0E69  0BF1               	decfsz	??i1_lcd_command+1,f
  4133  0E6A  2E67               	goto	u254_27
  4134  0E6B  0000               	nop
  4135                           
  4136                           ;LCD.h: 33: PORTBbits.RB3 =0 ;
  4137  0E6C  1283               	bcf	3,5	;RP0=0, select bank0
  4138  0E6D  1303               	bcf	3,6	;RP1=0, select bank0
  4139  0E6E  1186               	bcf	6,3	;volatile
  4140  0E6F  0008               	return
  4141  0E70                     __end_ofi1_lcd_command:	
  4142  007E                     btemp	set	126	;btemp
  4143  007E                     wtemp0	set	126


Data Sizes:
    Strings     43
    Constant    0
    Data        0
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80     41      50
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_string@str	PTR const unsigned char  size(1) Largest target is 7
		 -> STR_20(CODE[6]), STR_19(CODE[7]), STR_18(CODE[6]), STR_17(CODE[6]), 
		 -> STR_16(CODE[6]), STR_15(CODE[6]), STR_14(CODE[6]), STR_13(CODE[6]), 
		 -> STR_12(CODE[6]), STR_11(CODE[6]), STR_10(CODE[6]), STR_9(CODE[6]), 
		 -> STR_8(CODE[6]), STR_7(CODE[6]), STR_6(CODE[6]), STR_5(CODE[6]), 
		 -> STR_4(CODE[6]), STR_3(CODE[6]), STR_2(CODE[6]), STR_1(CODE[7]), 


Critical Paths under _main in COMMON

    _main->_lcd_command
    _set_timing->_DS1307_write
    _set_timing->_lcd_command
    _lcd_string->_lcd_data
    _lcd_init->_lcd_command
    _bcd_to_decimal->___bmul
    _decimal_to_bcd->___awdiv
    _decimal_to_bcd->___awmod
    _DS1307_read->_lcd_command
    _DS1307_read->_lcd_data
    _bcd_to_ascii->_lcd_data

Critical Paths under _external in COMMON

    i1_lcd_init->i1_lcd_command

Critical Paths under _main in BANK0

    _main->_set_timing
    _set_timing->_DS1307_write
    _lcd_string->_lcd_data
    _lcd_init->_lcd_command
    _bcd_to_decimal->___bmul
    _DS1307_write->_decimal_to_bcd
    _decimal_to_bcd->___awdiv
    _DS1307_read->_bcd_to_ascii
    _bcd_to_ascii->_lcd_data

Critical Paths under _external in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _external in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _external in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _external in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    9379
                                             38 BANK0      3     3      0
                        _DS1307_read
                        _lcd_command
                           _lcd_init
                         _lcd_string
                         _set_timing
 ---------------------------------------------------------------------------------
 (1) _set_timing                                          17    17      0    6630
                                             21 BANK0     17    17      0
                       _DS1307_write
                       _bcd_to_ascii
                     _bcd_to_decimal
                     _decimal_to_bcd
                        _lcd_command
                           _lcd_init
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _lcd_string                                           4     3      1    2292
                                              1 BANK0      4     3      1
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             0     0      0      22
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _bcd_to_decimal                                       4     4      0     327
                                              2 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     168
                                              6 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DS1307_write                                         7     1      6    1623
                                              7 COMMON     1     1      0
                                             15 BANK0      6     0      6
                     _decimal_to_bcd
 ---------------------------------------------------------------------------------
 (2) _decimal_to_bcd                                       7     7      0    1013
                                              8 BANK0      7     7      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              6 COMMON     1     1      0
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     452
                                              6 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _DS1307_read                                          3     2      1     413
                                              5 BANK0      3     2      1
                       _bcd_to_ascii
                        _lcd_command
                           _lcd_data
 ---------------------------------------------------------------------------------
 (3) _lcd_command                                          3     3      0      22
                                              6 COMMON     2     2      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _bcd_to_ascii                                         4     4      0     227
                                              1 BANK0      4     4      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (3) _lcd_data                                             3     3      0      22
                                              6 COMMON     2     2      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _external                                             3     3      0      22
                                              3 COMMON     3     3      0
                         i1_lcd_init
 ---------------------------------------------------------------------------------
 (6) i1_lcd_init                                           0     0      0      22
                      i1_lcd_command
 ---------------------------------------------------------------------------------
 (7) i1_lcd_command                                        3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DS1307_read
     _bcd_to_ascii
       _lcd_data
     _lcd_command
     _lcd_data
   _lcd_command
   _lcd_init
     _lcd_command
   _lcd_string
     _lcd_data
   _set_timing
     _DS1307_write
       _decimal_to_bcd
         ___awdiv
         ___awmod
     _bcd_to_ascii
       _lcd_data
     _bcd_to_decimal
       ___bmul
     _decimal_to_bcd
       ___awdiv
       ___awmod
     _lcd_command
     _lcd_init
       _lcd_command
     _lcd_string
       _lcd_data

 _external (ROOT)
   i1_lcd_init
     i1_lcd_command

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     29      32       5       62.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3A      12        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Oct 29 11:07:19 2023

                           pc 0002                  lcd_data@data 0020                ___bmul@product 0020  
                 __CFG_CP$OFF 0000                   _SSPSTATbits 0094                            l92 05BC  
                          l85 05AD                            l96 05C3                            l88 05B4  
                          l99 05CE                  ___awdiv@sign 0025                            fsr 0004  
      set_timing@bcd_val_date 003D        set_timing@bcd_val_hour 003C        set_timing@bcd_val_year 003F  
              _decimal_to_bcd 0F67                   __CFG_LVP$ON 0000                           l100 05CB  
                         l110 05DF                           l103 05CF                           l113 05E3  
                         l122 05FE                           l106 05D7                           l202 0725  
                         l131 0610                           l140 062B                           l116 05EF  
                         l125 0601                           l109 05E2                           l205 0729  
                         l134 061C                           l143 062E                           l119 05F2  
                         l152 0649                           l128 060D                           l208 072F  
                         l161 065B                           l137 061F                           l233 00F8  
                         l146 063A                           l250 0240                           l155 064C  
                         l244 01B9                           l236 0103                           l228 00BE  
                         l149 063D                           l181 06D1                           l173 06C3  
                         l261 0313                           l158 0658                           l190 06F5  
                         l166 06B4                           l255 028C                           l247 01C4  
                         l239 016D                           l184 06DD                           l280 043D  
                         l272 03E6                           l193 0701                           l177 06C9  
                         l169 06BB                           l266 035F                           l258 0297  
                         l187 06E9                           l291 0510                           l283 04B9  
                         l196 070D                           l277 0432                           l269 036A  
                         l199 0719                           l288 0505                           _PEN 048A  
                __CFG_CPD$OFF 0000                           _SEN 0488                           fsr0 0004  
                ___awmod@sign 0025       set_timing@bcd_val_month 003E                    i1_lcd_init 0E9A  
                _DS1307_write 06B0                          l2002 02D5                          l2110 047B  
                        l2036 035B                          l1600 0FF3                          l2144 0501  
                        l2056 03A8                          l2216 0789                          l2162 007A  
                        l2090 042E                          l1604 0FFB                          l1620 07BA  
                        l2164 007F                          l1630 07CE                          l2166 054A  
                        l1616 07B3                          l1642 07EF                          l1634 07DC  
                        l1572 0FB1                          l1628 07C0                          l1740 06D4  
                        l1590 0FD2                          l1638 07E7                          l1736 06C6  
                        l1680 0E52                          l1578 0FBC                          l1772 05BF  
                        l1596 0FE8                          l1588 0FC4                          l1676 0E4C  
                        l1696 0EE8                          l1928 01B5                          l1948 0202  
                        l1982 0288                          l1878 00F4                          l1894 012F  
                        STR_1 0806                          STR_2 0825                          STR_3 080D  
                        STR_4 0813                          STR_5 0813                          STR_6 0813  
                        STR_7 082B                          STR_8 080D                          STR_9 080D  
                        u1215 0FD3                          u1225 0FDF                          u1235 0FE9  
                        u1315 07D4                          u1325 07DD                          u1405 0F0F  
                        u1195 0FC7                          u1355 0F99                          u2317 0783  
                        u1295 07C3                          u2407 0252                          u2327 078F  
                        u2417 029F                          u2337 00B4                          u1395 0F3E  
                        u2507 0518                          u2427 0309                          u2347 00D0  
                        u2517 0584                          u2437 0325                          u2357 010B  
                        u2527 0E91                          u2447 0372                          u2367 0163  
                        u2537 0E7C                          u2457 03DC                          u2377 017F  
                        u2467 03F8                          u2387 01CC                          u2477 0445  
                        u2397 0236                          u2487 04AF                          u2497 04CB  
                        _RSEN 0489                  __CFG_WRT$OFF 0000                          _main 0735  
                        btemp 007E                          start 000C                   lcd_string@i 0023  
    set_timing@bcd_val_minute 003B      set_timing@bcd_val_second 003A             ___bmul@multiplier 0021  
      __end_of_decimal_to_bcd 0FA5                         ?_main 0070                         _ACKEN 048C  
             __end_of___awdiv 1000                         STR_10 0825                         STR_11 0825  
                       STR_20 0825                         STR_12 0825                         STR_13 0819  
                       STR_14 080D                         STR_15 080D                         STR_16 081F  
                       STR_17 081F                 __CFG_WDTE$OFF 0000                         STR_18 081F  
                       STR_19 0806               __end_of___awmod 07F4               ___awdiv@divisor 0020  
                       i1l300 0EDD               ___awdiv@counter 0024         __size_of_bcd_to_ascii 0038  
                       _PORTD 0008                         _TRISC 0087                         _TRISD 0088  
                       _SSPIF 0063                         ___day 004E                         ___con 004A  
              __CFG_BOREN$OFF 0000                         pclath 000A                         status 0003  
                       wtemp0 007E               __initialization 000F                  __end_of_main 07A7  
                _bcd_to_ascii 0F2F               ?_decimal_to_bcd 0070                        ??_main 0046  
              lcd_command@cmd 0020        __size_ofi1_lcd_command 0015                   ?i1_lcd_init 0070  
            ___awdiv@dividend 0022  set_timing@decimal_val_minute 0041  set_timing@decimal_val_second 0040  
                      u254_27 0E67                        _SSPADD 0093                        _SSPBUF 0013  
                      _SSPCON 0014                __CFG_PWRTE$OFF 0000              __end_of_lcd_data 0E85  
            __end_of_lcd_init 0EC8          __size_of_lcd_command 0015                        ___date 004D  
                      ___bmul 0E48                        ___hour 004F                        ___year 004B  
                   ??___awdiv 0076                     ??___awmod 0076              ___awdiv@quotient 0026  
             ___awmod@divisor 0020               ___awmod@counter 0024              __end_of_external 0EE4  
                      saved_w 007E                 lcd_string@num 0021               __CFG_FOSC$EXTRC 0000  
               lcd_string@str 0024       __end_of__initialization 001A                 i1_lcd_command 0E5B  
         ___bmul@multiplicand 0076                __pcstackCOMMON 0070           __size_ofi1_lcd_init 0017  
              _OPTION_REGbits 0081                    __pbssBANK0 0049                 ??_DS1307_read 0026  
              ?i1_lcd_command 0070                    __pmaintext 0735                       ?___bmul 0076  
           bcd_to_decimal@dec 0025                    __pintentry 0004               bcd_to_ascii@bcd 0024  
         bcd_to_decimal@value 0024       __size_of_bcd_to_decimal 002F                     ?_lcd_data 0070  
                  _lcd_string 0EE4                     ?_lcd_init 0070                    __stringtab 0800  
           bcd_to_ascii@value 0023                     ?_external 0070              ??_decimal_to_bcd 0028  
         __end_of_DS1307_read 06B0      DS1307_read@slave_address 0027               __size_of___bmul 0013  
                     ___awdiv 0FA5                       ___awmod 07A7                       ___month 004C  
                     __ptext1 001E                       __ptext2 0EE4                       __ptext3 0EB1  
                     __ptext4 0F00                       __ptext5 0E48                       __ptext6 06B0  
                     __ptext7 0F67                       __ptext8 07A7                       __ptext9 0FA5  
            ___awmod@dividend 0022                  ??i1_lcd_init 0073           decimal_to_bcd@value 002E  
                  ??_lcd_data 0076                    ??_lcd_init 0078          end_of_initialization 001A  
             ??i1_lcd_command 0070              i1lcd_command@cmd 0072              DS1307_write@_day 0031  
                  ??_external 0073                    _set_timing 001E            __end_ofi1_lcd_init 0EB1  
                   _PORTBbits 0006                     _TRISBbits 0086                   ?_lcd_string 0021  
                 _DS1307_read 05A7                 ??_lcd_command 0076                __end_of___bmul 0E5B  
         start_initialization 000F                _bcd_to_decimal 0F00                 ?_DS1307_write 002F  
                    ??___bmul 0077                   ?_set_timing 0070             decimal_to_bcd@hex 002D  
           decimal_to_bcd@lsb 002C             decimal_to_bcd@msb 002B           __end_of_lcd_command 0E9A  
         __size_of_lcd_string 001C        __end_of_bcd_to_decimal 0F2F                     ___latbits 0002  
               __pcstackBANK0 0020                ??_DS1307_write 0077             __size_of_lcd_data 0015  
           __size_of_lcd_init 0017           DS1307_write@_minute 002F           DS1307_write@_second 0077  
           __size_of_external 001C                 ?_bcd_to_ascii 0070                      ?___awdiv 0020  
                    ?___awmod 0020                     __pstrings 0800               ?_bcd_to_decimal 0070  
         __size_of_set_timing 0589             interrupt_function 0004                   _lcd_command 0E85  
                    _PIR1bits 000C                ??_bcd_to_ascii 0021                   __stringbase 0805  
                ??_lcd_string 0022                  ?_DS1307_read 0025         __end_ofi1_lcd_command 0E70  
 set_timing@decimal_val_month 0044          __end_of_DS1307_write 0735              __size_of___awdiv 005B  
            __size_of___awmod 004D            __end_of_lcd_string 0F00                      ___minute 0050  
          __end_of__stringtab 0806                      ___second 0051       __size_of_decimal_to_bcd 003E  
          DS1307_write@_month 0033                      __ptext10 05A7                      __ptext11 0E85  
                    __ptext12 0F2F                      __ptext13 0E70                      __ptext14 0EC8  
                    __ptext15 0E9A                      __ptext16 0E5B                      _lcd_data 0E70  
                    _lcd_init 0EB1                 __size_of_main 0072                      _external 0EC8  
                ??_set_timing 0035                    _INTCONbits 000B    set_timing@decimal_val_date 0043  
  set_timing@decimal_val_hour 0042    set_timing@decimal_val_year 0045          __end_of_bcd_to_ascii 0F67  
                    intlevel1 0000            __end_of_set_timing 05A7             DS1307_write@_date 0032  
           DS1307_write@_hour 0030             DS1307_write@_year 0034                     stringcode 0800  
            ??_bcd_to_decimal 0022   DS1307_read@register_address 0025                      stringdir 0800  
                    stringtab 0800                   _SSPCON2bits 0091                   _timing_flag 0049  
       __size_of_DS1307_write 0085                  ?_lcd_command 0070          __size_of_DS1307_read 0109  
